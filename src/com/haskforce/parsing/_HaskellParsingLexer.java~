/* The following code was generated by JFlex 1.4.3 on 4/19/15 10:14 AM */

package com.haskforce.parsing;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.psi.HaskellTypes.*;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.openapi.util.Pair;
import java.util.*;
import com.intellij.util.containers.Stack;

/**
 * Hand-written lexer used for parsing in IntelliJ.
 *
 * We share token names with the grammar-kit generated
 * parser.
 *
 * Massively changed, but originally derived from the lexer generated by
 * Grammar-Kit at 29 April 2014.
 */


/*
 * To generate sources from this file -
 *   Click Tools->Run JFlex generator.
 *
 * Command-Shift-G should be the keyboard shortcut, but that is the same
 * shortcut as find previous.
 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/19/15 10:14 AM from the specification file
 * <tt>/home/developer/sources/intellij-haskforce-for-prs/src/com/haskforce/parsing/_HaskellParsingLexer.flex</tt>
 */
public class _HaskellParsingLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int REALLYYINITIAL = 2;
  public static final int INSHEBANG = 18;
  public static final int INPRAGMA = 8;
  public static final int INCOMMENT = 4;
  public static final int INSTRING = 6;
  public static final int YYINITIAL = 0;
  public static final int ININDENTATION = 10;
  public static final int INQUASIQUOTE = 14;
  public static final int INQUASIQUOTEHEAD = 16;
  public static final int INIMPORT = 20;
  public static final int FINDINGINDENTATIONCONTEXT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\51\1\53\1\1\22\0\1\53\1\52\1\101"+
    "\1\14\1\103\1\104\1\72\1\12\1\10\1\11\1\105\1\30\1\75"+
    "\1\31\1\25\1\106\1\15\7\20\2\5\1\112\1\76\1\64\1\70"+
    "\1\66\1\107\1\110\4\24\1\27\1\24\10\7\1\17\10\7\1\22"+
    "\2\7\1\77\1\13\1\74\1\32\1\4\1\100\1\45\1\23\1\42"+
    "\1\35\1\26\1\34\1\46\1\61\1\33\2\6\1\36\1\47\1\40"+
    "\1\16\1\43\1\62\1\44\1\37\1\55\1\41\1\56\1\60\1\21"+
    "\1\57\1\6\1\54\1\73\1\102\1\111\u2111\0\1\65\1\0\1\67"+
    "\17\0\2\50\56\0\1\71\55\0\1\63\66\0\1\113\u03cd\0\1\50"+
    "\u0315\0\2\50\ud6e3\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\3\1\1\4\1\1\1\5"+
    "\2\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\11\1\12\1\21\1\12\1\22"+
    "\1\23\1\24\11\12\1\25\1\26\1\27\1\30\4\12"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\4\62\1\63\2\64\1\65\1\66\1\67\1\66"+
    "\1\70\1\2\4\70\3\71\1\72\4\73\1\74\1\67"+
    "\2\5\1\21\1\75\1\76\1\77\6\0\1\100\2\0"+
    "\1\101\1\102\1\11\2\0\1\13\1\103\1\0\1\104"+
    "\2\0\1\105\1\106\1\107\4\0\1\110\1\111\2\12"+
    "\1\25\1\35\1\112\1\113\3\12\1\114\7\12\1\115"+
    "\2\12\1\116\5\12\1\33\1\37\1\117\4\0\1\120"+
    "\1\0\1\121\1\122\1\123\1\61\1\124\1\125\1\0"+
    "\2\63\1\0\1\63\1\0\1\126\1\127\1\0\1\130"+
    "\1\131\1\132\6\0\1\133\5\0\2\134\1\135\1\0"+
    "\1\136\1\11\2\137\1\0\2\140\3\0\1\141\2\11"+
    "\2\12\2\142\1\143\10\12\1\144\3\12\1\145\1\12"+
    "\1\146\1\147\5\12\1\150\3\0\1\151\1\152\1\0"+
    "\1\153\1\154\5\0\2\133\6\0\1\137\1\140\4\0"+
    "\1\12\1\155\10\12\1\156\2\12\1\157\1\12\1\160"+
    "\1\161\3\12\1\0\1\162\1\163\1\0\1\133\2\0"+
    "\1\164\3\0\1\137\1\165\1\166\1\167\1\0\1\12"+
    "\1\170\10\12\1\171\1\12\1\172\2\12\1\173\1\174"+
    "\2\0\1\175\1\0\1\176\1\177\1\200\1\201\1\202"+
    "\1\12\1\203\1\12\1\31\1\204\3\12\1\205\1\206"+
    "\1\12\1\0\1\207\1\210\1\12\1\211\1\212\1\12"+
    "\1\213\1\12\1\214\1\215\1\216\1\12\1\217";

  private static int [] zzUnpackAction() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\u02f8\0\u02f8\0\u0344\0\u02f8\0\u0390\0\u03dc"+
    "\0\u0428\0\u02f8\0\u0474\0\u02f8\0\u04c0\0\u02f8\0\u02f8\0\u050c"+
    "\0\u0558\0\u050c\0\u05a4\0\u05f0\0\u02f8\0\u063c\0\u0688\0\u06d4"+
    "\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u0850\0\u08e8"+
    "\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48"+
    "\0\u0850\0\u0850\0\u02f8\0\u0b94\0\u0be0\0\u0c2c\0\u0c78\0\u0cc4"+
    "\0\u02f8\0\u0d10\0\u02f8\0\u0850\0\u02f8\0\u0d5c\0\u02f8\0\u0850"+
    "\0\u0da8\0\u02f8\0\u02f8\0\u02f8\0\u0df4\0\u02f8\0\u02f8\0\u02f8"+
    "\0\u0e40\0\u0850\0\u0850\0\u0850\0\u0850\0\u0850\0\u0850\0\u0e8c"+
    "\0\u02f8\0\u0ed8\0\u0f24\0\u0f70\0\u02f8\0\u0fbc\0\u02f8\0\u1008"+
    "\0\u02f8\0\u1054\0\u10a0\0\u10ec\0\u02f8\0\u02f8\0\u1138\0\u1184"+
    "\0\u11d0\0\u121c\0\u02f8\0\u1138\0\u1268\0\u12b4\0\u1300\0\u134c"+
    "\0\u02f8\0\u1398\0\u13e4\0\u1430\0\u050c\0\u147c\0\u02f8\0\u02f8"+
    "\0\u14c8\0\u02f8\0\u1514\0\u1560\0\u15ac\0\u15f8\0\u1644\0\u1690"+
    "\0\u02f8\0\u16dc\0\u1728\0\u02f8\0\u1774\0\u17c0\0\u180c\0\u1858"+
    "\0\u02f8\0\u02f8\0\u18a4\0\u02f8\0\u18f0\0\u193c\0\u0850\0\u02f8"+
    "\0\u0850\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u050c\0\u0850\0\u1ab8"+
    "\0\u1b04\0\u1b50\0\u0850\0\u050c\0\u1b9c\0\u1be8\0\u1c34\0\u1c80"+
    "\0\u050c\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1e94"+
    "\0\u050c\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4\0\u2010\0\u205c\0\u20a8"+
    "\0\u20f4\0\u0850\0\u0850\0\u02f8\0\u2140\0\u218c\0\u21d8\0\u2224"+
    "\0\u02f8\0\u2270\0\u2270\0\u02f8\0\u22bc\0\u22bc\0\u02f8\0\u02f8"+
    "\0\u2308\0\u2354\0\u23a0\0\u23ec\0\u02f8\0\u2438\0\u16dc\0\u2484"+
    "\0\u24d0\0\u16dc\0\u251c\0\u02f8\0\u2568\0\u25b4\0\u2600\0\u264c"+
    "\0\u2698\0\u26e4\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac"+
    "\0\u28f8\0\u02f8\0\u2944\0\u2990\0\u02f8\0\u02f8\0\u29dc\0\u2a28"+
    "\0\u2a74\0\u2ac0\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88"+
    "\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8\0\u02f8\0\u2e04\0\u2e50\0\u2e9c"+
    "\0\u2ee8\0\u2f34\0\u2f80\0\u2fcc\0\u3018\0\u3064\0\u050c\0\u30b0"+
    "\0\u30fc\0\u3148\0\u050c\0\u3194\0\u050c\0\u02f8\0\u31e0\0\u322c"+
    "\0\u3278\0\u32c4\0\u3310\0\u02f8\0\u335c\0\u33a8\0\u23a0\0\u02f8"+
    "\0\u02f8\0\u33f4\0\u02f8\0\u02f8\0\u1398\0\u3440\0\u348c\0\u34d8"+
    "\0\u3524\0\u3570\0\u35bc\0\u3608\0\u3654\0\u36a0\0\u36ec\0\u3738"+
    "\0\u3784\0\u37d0\0\u02f8\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c"+
    "\0\u050c\0\u3998\0\u39e4\0\u3a30\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60"+
    "\0\u3bac\0\u050c\0\u3bf8\0\u3c44\0\u050c\0\u3c90\0\u050c\0\u050c"+
    "\0\u3cdc\0\u3d28\0\u3d74\0\u3dc0\0\u3e0c\0\u3e58\0\u3ea4\0\u3ef0"+
    "\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u02f8\0\u02f8"+
    "\0\u4104\0\u4150\0\u419c\0\u41e8\0\u4234\0\u4280\0\u42cc\0\u4318"+
    "\0\u4364\0\u43b0\0\u43fc\0\u4448\0\u4494\0\u050c\0\u44e0\0\u050c"+
    "\0\u452c\0\u4578\0\u45c4\0\u4610\0\u465c\0\u46a8\0\u46f4\0\u4740"+
    "\0\u02f8\0\u478c\0\u050c\0\u050c\0\u050c\0\u47d8\0\u050c\0\u4824"+
    "\0\u050c\0\u050c\0\u4870\0\u48bc\0\u4908\0\u050c\0\u050c\0\u4954"+
    "\0\u49a0\0\u49ec\0\u4a38\0\u4a84\0\u050c\0\u050c\0\u4ad0\0\u050c"+
    "\0\u4b1c\0\u4b68\0\u050c\0\u050c\0\u4bb4\0\u050c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\2\15\1\16\10\14\1\17\14\14\1\20\15\14"+
    "\1\21\3\14\1\22\1\23\37\14\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\33\1\31\1\32\1\33"+
    "\1\32\1\33\1\43\1\44\1\33\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\32\1\54\1\32\1\55"+
    "\1\32\1\56\1\57\1\32\1\60\1\61\1\24\1\62"+
    "\1\63\1\64\1\65\2\32\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\31\122\1\123\22\122\1\124\25\122\1\125\11\122\2\126"+
    "\1\127\10\126\1\130\65\126\1\131\12\126\1\132\3\133"+
    "\10\132\1\134\36\132\1\133\40\132\2\135\1\136\1\16"+
    "\10\135\1\137\14\135\1\140\21\135\1\22\1\141\3\135"+
    "\1\142\33\135\2\143\1\136\1\16\10\143\1\144\14\143"+
    "\1\145\21\143\1\22\1\146\37\143\73\147\1\150\1\151"+
    "\2\147\1\152\14\147\1\24\2\153\1\154\1\155\1\24"+
    "\1\32\1\33\1\156\5\24\1\32\1\33\1\24\1\32"+
    "\1\33\1\32\1\33\1\157\1\32\1\33\3\24\15\32"+
    "\3\24\1\154\1\24\6\32\10\24\1\160\20\24\1\161"+
    "\2\162\111\161\115\0\2\15\137\0\1\163\4\0\1\164"+
    "\1\0\1\165\1\166\2\0\1\167\1\0\1\170\6\0"+
    "\1\171\72\0\1\172\100\0\1\173\75\0\31\174\1\175"+
    "\62\174\2\0\1\26\115\0\4\32\2\0\1\32\2\0"+
    "\10\32\1\0\2\32\3\0\15\32\5\0\6\32\36\0"+
    "\1\31\6\0\1\176\1\31\2\0\1\31\4\0\1\177"+
    "\2\200\70\0\4\33\2\0\1\33\2\0\10\33\1\0"+
    "\2\33\3\0\15\33\5\0\6\33\42\0\1\201\2\0"+
    "\1\202\77\0\12\203\1\204\1\205\100\203\13\0\2\61"+
    "\10\0\1\61\2\0\3\61\7\0\1\206\5\0\1\61"+
    "\1\0\1\61\11\0\1\61\1\0\1\61\1\0\1\61"+
    "\1\0\1\207\1\61\7\0\10\61\12\0\1\210\1\0"+
    "\1\61\1\211\10\0\1\61\1\212\1\0\3\61\1\213"+
    "\14\0\1\61\1\0\1\61\11\0\1\61\1\0\1\61"+
    "\1\0\1\61\1\0\2\61\7\0\10\61\6\0\1\31"+
    "\6\0\1\176\1\31\2\214\1\31\2\215\2\0\1\177"+
    "\2\200\70\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\1\32\1\216\13\32\5\0\6\32\44\0"+
    "\2\61\10\0\1\217\2\0\3\61\15\0\1\61\1\0"+
    "\1\61\11\0\1\61\1\0\1\61\1\0\1\61\1\0"+
    "\2\61\7\0\10\61\5\0\4\32\2\0\1\32\2\0"+
    "\4\32\1\220\3\32\1\0\2\32\3\0\3\32\1\221"+
    "\11\32\5\0\6\32\44\0\2\61\10\0\1\61\2\0"+
    "\3\61\15\0\1\61\1\0\1\61\11\0\1\61\1\0"+
    "\1\61\1\0\1\61\1\0\2\61\7\0\10\61\14\0"+
    "\2\61\10\0\1\61\2\0\1\61\1\222\1\61\15\0"+
    "\1\61\1\0\1\61\11\0\1\61\1\0\1\223\1\0"+
    "\1\61\1\0\2\61\7\0\10\61\5\0\4\32\2\0"+
    "\1\32\2\0\10\32\1\0\2\32\3\0\1\32\1\224"+
    "\3\32\1\225\6\32\1\226\5\0\6\32\35\0\4\32"+
    "\2\0\1\32\2\0\1\32\1\227\6\32\1\0\2\32"+
    "\3\0\12\32\1\230\2\32\5\0\6\32\35\0\4\32"+
    "\2\0\1\32\2\0\1\32\1\231\6\32\1\0\1\232"+
    "\1\32\3\0\12\32\1\233\2\32\5\0\6\32\35\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\1\234\1\32"+
    "\3\0\15\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\1\235\1\32\3\0\15\32\5\0"+
    "\6\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\3\32\1\236\6\32\1\237\2\32\5\0"+
    "\6\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\1\240\1\32\3\0\15\32\5\0\6\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\4\32"+
    "\1\241\10\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\1\32\1\242\6\32\1\0\2\32\3\0\2\32"+
    "\1\243\12\32\5\0\6\32\62\0\1\244\66\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\15\32"+
    "\5\0\2\32\1\245\1\32\1\246\1\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\15\32"+
    "\5\0\4\32\1\247\1\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\1\250\14\32\5\0"+
    "\6\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\6\32\1\251\6\32\5\0\6\32\44\0"+
    "\2\61\10\0\1\61\2\0\1\61\1\252\1\61\15\0"+
    "\1\61\1\0\1\61\11\0\1\61\1\0\1\61\1\0"+
    "\1\61\1\0\2\61\7\0\10\61\14\0\2\61\10\0"+
    "\1\61\2\0\3\61\15\0\1\61\1\0\1\61\11\0"+
    "\1\61\1\0\1\253\1\0\1\61\1\0\2\61\7\0"+
    "\10\61\14\0\2\61\10\0\1\61\2\0\3\61\15\0"+
    "\1\61\1\0\1\61\11\0\1\61\1\0\1\61\1\0"+
    "\1\61\1\0\2\61\1\254\6\0\10\61\5\0\1\255"+
    "\1\0\1\256\1\257\1\260\5\0\1\256\1\257\1\0"+
    "\1\256\1\257\1\256\1\257\1\0\1\256\1\257\3\0"+
    "\15\256\5\0\6\256\10\0\1\261\24\0\1\262\1\0"+
    "\1\263\1\0\1\264\2\0\2\61\1\0\1\263\2\0"+
    "\1\263\1\0\1\263\1\0\1\61\1\263\1\0\3\61"+
    "\15\263\1\61\1\0\1\61\2\0\6\263\1\0\1\61"+
    "\1\0\1\61\1\0\1\61\1\0\2\61\7\0\10\61"+
    "\14\0\2\265\10\0\1\265\2\0\3\265\15\0\1\265"+
    "\1\0\1\265\11\0\1\265\1\0\1\265\1\0\1\265"+
    "\1\0\2\265\7\0\7\265\1\266\1\0\31\122\1\0"+
    "\22\122\1\0\25\122\1\0\11\122\102\0\1\267\42\0"+
    "\1\270\62\0\2\126\1\0\10\126\1\271\65\126\1\0"+
    "\12\126\1\0\1\272\1\273\1\274\2\0\1\275\4\0"+
    "\1\275\2\0\1\275\2\0\1\275\1\0\1\275\2\0"+
    "\1\275\4\0\15\275\1\0\1\274\1\0\1\274\1\0"+
    "\6\275\16\0\1\126\12\0\1\132\3\0\10\132\1\0"+
    "\36\132\1\0\40\132\1\0\3\133\47\0\1\133\71\0"+
    "\1\276\110\0\1\163\4\0\1\164\1\0\1\165\1\166"+
    "\2\0\1\167\1\0\1\170\101\0\1\277\113\0\1\300"+
    "\143\0\1\301\63\0\1\302\113\0\1\303\62\0\73\147"+
    "\2\0\2\147\1\0\14\147\74\0\1\304\23\0\1\305"+
    "\1\0\1\306\1\307\1\310\5\0\1\306\1\307\1\0"+
    "\1\306\1\307\1\306\1\307\1\0\1\306\1\307\3\0"+
    "\15\306\5\0\6\306\32\0\2\153\114\0\1\154\47\0"+
    "\1\154\51\0\1\201\102\0\1\161\2\0\111\161\36\0"+
    "\1\311\1\0\1\312\107\0\1\313\3\0\1\314\101\0"+
    "\1\315\120\0\1\316\120\0\1\317\117\0\1\320\47\0"+
    "\1\321\2\322\27\321\1\323\61\321\35\0\1\324\72\0"+
    "\1\325\113\0\1\326\104\0\1\327\7\0\1\327\2\0"+
    "\1\327\100\0\1\330\7\0\1\330\2\0\1\330\7\0"+
    "\2\331\74\0\1\332\101\0\2\203\1\0\7\203\1\333"+
    "\101\203\45\0\1\334\104\0\1\335\1\0\1\336\107\0"+
    "\1\337\74\0\1\340\2\0\1\340\100\0\1\341\7\0"+
    "\1\341\2\0\1\341\2\0\2\341\1\0\2\341\4\0"+
    "\2\341\4\0\1\341\2\0\1\341\52\0\4\32\2\0"+
    "\1\32\2\0\10\32\1\0\2\32\3\0\10\32\1\342"+
    "\4\32\5\0\6\32\35\0\4\32\2\0\1\32\2\0"+
    "\10\32\1\0\2\32\3\0\4\32\1\343\10\32\5\0"+
    "\6\32\31\0\1\344\2\345\27\344\1\346\61\344\4\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\2\32\3\0"+
    "\1\32\1\347\2\32\1\350\10\32\5\0\6\32\35\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\2\32\3\0"+
    "\10\32\1\351\4\32\5\0\6\32\35\0\4\32\2\0"+
    "\1\32\2\0\10\32\1\0\2\32\3\0\11\32\1\352"+
    "\3\32\5\0\6\32\35\0\4\32\2\0\1\32\2\0"+
    "\10\32\1\0\2\32\3\0\14\32\1\353\5\0\6\32"+
    "\35\0\4\32\2\0\1\32\2\0\10\32\1\0\2\32"+
    "\3\0\1\32\1\354\7\32\1\355\3\32\5\0\6\32"+
    "\35\0\4\32\2\0\1\32\2\0\10\32\1\0\2\32"+
    "\3\0\15\32\5\0\1\356\5\32\35\0\4\32\2\0"+
    "\1\32\2\0\10\32\1\0\2\32\3\0\15\32\5\0"+
    "\1\357\5\32\35\0\4\32\2\0\1\32\2\0\10\32"+
    "\1\0\2\32\3\0\15\32\5\0\3\32\1\360\2\32"+
    "\35\0\4\32\2\0\1\32\2\0\10\32\1\0\2\32"+
    "\3\0\12\32\1\361\2\32\5\0\6\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\4\32"+
    "\1\362\10\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\7\32\1\363\5\32"+
    "\5\0\6\32\35\0\4\32\2\0\1\32\2\0\10\32"+
    "\1\0\2\32\3\0\2\32\1\364\12\32\5\0\6\32"+
    "\35\0\4\32\2\0\1\32\2\0\1\32\1\365\6\32"+
    "\1\0\2\32\3\0\15\32\5\0\6\32\45\0\1\366"+
    "\103\0\4\32\2\0\1\32\2\0\10\32\1\0\2\32"+
    "\3\0\10\32\1\367\4\32\5\0\6\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\1\370\1\32\3\0"+
    "\15\32\5\0\6\32\35\0\4\32\2\0\1\32\2\0"+
    "\10\32\1\0\1\371\1\32\3\0\15\32\5\0\6\32"+
    "\35\0\4\32\2\0\1\32\2\0\10\32\1\0\2\32"+
    "\3\0\2\32\1\372\12\32\5\0\6\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\12\32"+
    "\1\373\2\32\5\0\6\32\35\0\4\256\2\0\1\256"+
    "\2\0\10\256\1\0\2\256\3\0\15\256\5\0\6\256"+
    "\35\0\4\256\2\0\1\256\2\0\10\256\1\0\2\256"+
    "\3\0\15\256\5\0\6\256\10\0\1\374\24\0\4\257"+
    "\2\0\1\257\2\0\10\257\1\375\2\257\3\0\15\257"+
    "\5\0\6\257\42\0\1\376\106\0\4\263\2\0\1\263"+
    "\2\0\10\263\1\0\2\263\3\0\15\263\5\0\6\263"+
    "\44\0\2\265\10\0\1\265\2\0\3\265\15\0\1\265"+
    "\1\0\1\265\11\0\1\265\1\0\1\265\1\0\1\265"+
    "\1\0\2\265\7\0\10\265\2\0\1\274\1\377\1\274"+
    "\45\0\1\274\1\0\1\274\25\0\1\126\13\0\1\274"+
    "\1\273\1\274\45\0\1\274\1\0\1\274\41\0\3\377"+
    "\7\0\1\126\35\0\1\377\1\0\1\377\41\0\1\274"+
    "\1\377\1\274\45\0\1\274\1\0\1\274\142\0\1\u0100"+
    "\25\0\1\u0101\125\0\1\u0102\101\0\1\u0103\103\0\4\306"+
    "\2\0\1\306\2\0\10\306\1\0\2\306\3\0\15\306"+
    "\5\0\6\306\35\0\4\306\2\0\1\306\2\0\10\306"+
    "\1\0\2\306\3\0\15\306\5\0\6\306\10\0\1\u0104"+
    "\24\0\4\307\2\0\1\307\2\0\10\307\1\u0105\2\307"+
    "\3\0\15\307\5\0\6\307\42\0\1\u0106\135\0\1\u0107"+
    "\3\0\1\u0108\111\0\1\u0109\56\0\1\u010a\2\0\32\u010a"+
    "\1\u010b\56\u010a\42\0\1\u010c\105\0\1\u010d\117\0\1\u010e"+
    "\110\0\1\u010f\123\0\1\u0110\46\0\1\321\1\0\1\322"+
    "\111\321\1\323\2\0\111\323\41\0\1\u0111\57\0\1\327"+
    "\6\0\1\u0112\1\327\2\0\1\327\5\0\2\200\71\0"+
    "\1\330\6\0\1\u0112\1\330\2\0\1\330\100\0\1\330"+
    "\7\0\1\330\2\0\1\330\107\0\1\u0113\111\0\1\332"+
    "\1\0\1\u0113\136\0\1\u0114\107\0\1\u0115\3\0\1\u0116"+
    "\111\0\1\u0117\56\0\1\337\2\0\111\337\14\0\1\176"+
    "\1\340\2\0\1\340\100\0\1\341\6\0\1\176\1\341"+
    "\2\0\1\341\2\0\2\341\1\0\2\341\4\0\2\341"+
    "\4\0\1\341\2\0\1\341\52\0\4\32\2\0\1\32"+
    "\2\0\1\32\1\u0118\6\32\1\0\2\32\3\0\15\32"+
    "\5\0\6\32\35\0\4\32\2\0\1\32\2\0\10\32"+
    "\1\0\1\u0119\1\32\3\0\15\32\5\0\6\32\31\0"+
    "\1\344\1\0\1\345\111\344\1\346\2\0\111\346\4\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\2\32\3\0"+
    "\1\u011a\14\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\15\32\5\0\1\u011b"+
    "\5\32\35\0\4\32\2\0\1\32\2\0\1\32\1\u011c"+
    "\6\32\1\0\2\32\3\0\15\32\5\0\6\32\35\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\1\u011d\1\32"+
    "\3\0\12\32\1\u011e\2\32\5\0\6\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\1\u011f"+
    "\14\32\5\0\6\32\35\0\4\32\2\0\1\32\2\0"+
    "\10\32\1\0\2\32\3\0\12\32\1\u0120\2\32\5\0"+
    "\6\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\1\u0121\14\32\5\0\6\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\12\32"+
    "\1\u0122\2\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\15\32\5\0\1\u0123"+
    "\5\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\4\32\1\u0124\10\32\5\0\6\32\35\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\1\u0125\1\32"+
    "\3\0\15\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\6\32\1\u0126\6\32"+
    "\5\0\6\32\35\0\4\32\2\0\1\32\2\0\10\32"+
    "\1\0\1\u0127\1\32\3\0\15\32\5\0\6\32\35\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\2\32\3\0"+
    "\5\32\1\u0128\7\32\5\0\6\32\35\0\4\32\2\0"+
    "\1\32\2\0\10\32\1\0\2\32\3\0\11\32\1\u0129"+
    "\3\32\5\0\6\32\35\0\4\32\2\0\1\32\2\0"+
    "\10\32\1\0\2\32\3\0\1\u012a\14\32\5\0\6\32"+
    "\35\0\4\32\2\0\1\32\2\0\10\32\1\0\2\32"+
    "\3\0\3\32\1\u012b\11\32\5\0\6\32\35\0\1\255"+
    "\1\0\1\256\1\257\1\260\5\0\1\256\1\257\1\0"+
    "\1\256\1\257\1\256\1\257\1\0\1\256\1\257\3\0"+
    "\15\256\5\0\6\256\56\0\1\375\132\0\1\u012c\74\0"+
    "\1\u0105\122\0\1\u012d\105\0\1\u012e\120\0\1\u012f\60\0"+
    "\1\u010a\2\0\112\u010a\2\0\23\u010a\1\u0130\65\u010a\36\0"+
    "\1\u0131\110\0\1\u0132\106\0\1\u0133\113\0\1\u0134\133\0"+
    "\1\u0135\103\0\1\u0136\71\0\1\u0137\125\0\1\u0138\121\0"+
    "\1\u0139\105\0\1\u013a\120\0\1\u013b\64\0\4\32\2\0"+
    "\1\32\2\0\10\32\1\0\2\32\3\0\11\32\1\u013c"+
    "\3\32\5\0\6\32\35\0\4\32\2\0\1\32\2\0"+
    "\4\32\1\u013d\3\32\1\0\2\32\3\0\15\32\5\0"+
    "\6\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\12\32\1\u013e\2\32\5\0\6\32\35\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\2\32\3\0"+
    "\11\32\1\u013f\3\32\5\0\6\32\35\0\4\32\2\0"+
    "\1\32\2\0\10\32\1\0\2\32\3\0\1\u0140\14\32"+
    "\5\0\6\32\35\0\4\32\2\0\1\32\2\0\10\32"+
    "\1\0\2\32\3\0\3\32\1\u0141\11\32\5\0\6\32"+
    "\35\0\4\32\2\0\1\32\2\0\10\32\1\0\2\32"+
    "\3\0\3\32\1\u0142\11\32\5\0\6\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\6\32"+
    "\1\u0143\6\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\15\32\5\0\1\32"+
    "\1\u0144\4\32\35\0\4\32\2\0\1\32\2\0\10\32"+
    "\1\0\2\32\3\0\15\32\5\0\2\32\1\u0145\3\32"+
    "\35\0\4\32\2\0\1\32\2\0\10\32\1\0\2\32"+
    "\3\0\4\32\1\u0146\10\32\5\0\6\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\3\32"+
    "\1\u0147\11\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\1\u0148\1\32\3\0\15\32\5\0"+
    "\6\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\5\32\1\u0149\7\32\5\0\6\32\35\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\2\32\3\0"+
    "\1\u014a\14\32\5\0\6\32\57\0\1\135\65\0\1\u012d"+
    "\2\0\111\u012d\1\u012e\2\0\111\u012e\34\0\1\u014b\57\0"+
    "\1\u010a\2\0\31\u010a\1\u014c\57\u010a\41\0\1\u014d\112\0"+
    "\1\u014e\53\0\1\u0133\2\0\111\u0133\34\0\1\u014f\126\0"+
    "\1\u0150\72\0\1\u0151\65\0\1\u0139\2\0\111\u0139\1\u013a"+
    "\2\0\111\u013a\34\0\1\u0152\63\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\15\32\5\0\1\u0153"+
    "\5\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\3\32\1\u0154\5\32\1\u0155\3\32\5\0"+
    "\6\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\5\32\1\u0156\7\32\5\0\6\32\35\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\2\32\3\0"+
    "\15\32\5\0\1\u0157\5\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\13\32\1\u0158\1\32"+
    "\5\0\6\32\35\0\4\32\2\0\1\32\2\0\10\32"+
    "\1\0\2\32\3\0\3\32\1\u0159\11\32\5\0\6\32"+
    "\35\0\4\32\2\0\1\32\2\0\10\32\1\0\2\32"+
    "\3\0\15\32\5\0\2\32\1\u015a\3\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\3\32"+
    "\1\u015b\11\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\1\u015c\14\32\5\0"+
    "\6\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\10\32\1\u015d\4\32\5\0\6\32\35\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\1\u015e\1\32"+
    "\3\0\15\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\13\32\1\u015f\1\32"+
    "\5\0\6\32\35\0\4\32\2\0\1\32\2\0\10\32"+
    "\1\0\2\32\3\0\1\32\1\u0160\13\32\5\0\6\32"+
    "\31\0\1\u014b\2\0\111\u014b\1\u014c\2\0\111\u014c\35\0"+
    "\1\u0161\104\0\1\u0162\65\0\1\u014f\2\0\111\u014f\45\0"+
    "\1\u0163\46\0\1\u0152\2\0\111\u0152\4\0\4\32\2\0"+
    "\1\32\2\0\10\32\1\0\2\32\3\0\7\32\1\u0164"+
    "\5\32\5\0\6\32\35\0\4\32\2\0\1\32\2\0"+
    "\10\32\1\0\2\32\3\0\5\32\1\u0165\7\32\5\0"+
    "\6\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\15\32\5\0\1\u0166\5\32\35\0\4\32"+
    "\2\0\1\32\2\0\10\32\1\0\2\32\3\0\5\32"+
    "\1\u0167\7\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\1\u0168\1\32\3\0\15\32\5\0"+
    "\6\32\35\0\4\32\2\0\1\32\2\0\10\32\1\0"+
    "\2\32\3\0\1\u0169\14\32\5\0\6\32\57\0\1\u016a"+
    "\65\0\1\u0162\2\0\111\u0162\1\u0163\2\0\111\u0163\4\0"+
    "\4\32\2\0\1\32\2\0\10\32\1\0\1\u016b\1\32"+
    "\3\0\15\32\5\0\6\32\35\0\4\32\2\0\1\32"+
    "\2\0\10\32\1\0\2\32\3\0\13\32\1\u016c\1\32"+
    "\5\0\6\32\35\0\4\32\2\0\1\32\2\0\10\32"+
    "\1\0\1\u016d\1\32\3\0\15\32\5\0\6\32\31\0"+
    "\1\u016a\2\0\111\u016a\4\0\4\32\2\0\1\32\2\0"+
    "\10\32\1\0\2\32\3\0\2\32\1\u016e\12\32\5\0"+
    "\6\32\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\10\1\11\1\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\2\11\5\1\1\11\25\1\1\11\5\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\3\11\1\1\3\11\10\1\1\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\3\1\2\11\4\1\1\11\5\1"+
    "\1\11\5\1\2\11\1\1\1\11\6\0\1\11\2\0"+
    "\1\11\2\1\2\0\2\11\1\0\1\11\2\0\1\1"+
    "\1\11\1\1\4\0\36\1\1\11\4\0\1\11\1\0"+
    "\1\1\1\11\2\1\2\11\1\0\2\1\1\0\1\11"+
    "\1\0\2\1\1\0\2\1\1\11\6\0\1\1\5\0"+
    "\1\1\1\11\1\1\1\0\2\11\2\1\1\0\2\1"+
    "\3\0\6\1\1\11\20\1\1\11\5\1\1\11\3\0"+
    "\2\11\1\0\2\11\5\0\2\1\6\0\1\1\1\11"+
    "\4\0\24\1\1\0\2\1\1\0\1\1\2\0\1\1"+
    "\3\0\2\11\2\1\1\0\21\1\2\0\1\1\1\0"+
    "\1\11\17\1\1\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[366];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private static final Pair<Integer, Integer> NO_LAYOUT = Pair.create(-1, -1);
  private int commentLevel;
  private int qqLevel;
  private int indent;
  private boolean retry;
  private int emptyblockPhase;
  private Stack<Pair<Integer,Integer>> indentationStack;
  private Stack<Integer> stateStack;
  public LinkedList<Pair<Pair<Integer,Integer>,Integer>> openBraces;
  // Shared varsym token to ensure that shebang lex failures return the same
  // token as normal varsyms.
  public static final IElementType SHARED_VARSYM_TOKEN = VARSYMTOKPLUS;
  // %line/%column/%char does not declare these.
  private int yyline;
  private int yycolumn;
  private int yychar;

  public _HaskellParsingLexer() {
    this((java.io.Reader)null);
    commentLevel = 0;
    qqLevel = 0;
    retry = false;
    emptyblockPhase = 0;
    openBraces = ContainerUtil.newLinkedList();
    openBraces.push(Pair.create(Pair.create(-1,-1), 0));
    indentationStack = ContainerUtil.newStack();
    stateStack = ContainerUtil.newStack();
  }


  public _HaskellParsingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaskellParsingLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return BACKSLASH;
          }
        case 144: break;
        case 143: 
          { return QUALIFIED;
          }
        case 145: break;
        case 4: 
          { indent++;
                        return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 146: break;
        case 101: 
          { return RECTOK;
          }
        case 147: break;
        case 22: 
          { return EXCLAMATION;
          }
        case 148: break;
        case 12: 
          { return LPAREN;
          }
        case 149: break;
        case 45: 
          { return QUESTION;
          }
        case 150: break;
        case 25: 
          { return FORALLTOKEN;
          }
        case 151: break;
        case 30: 
          { return EQUALS;
          }
        case 152: break;
        case 70: 
          { return RUNBOXPAREN;
          }
        case 153: break;
        case 108: 
          { yypushback(yytext().length() - 1);
                                qqLevel++;
                                stateStack.push(INQUASIQUOTE);
                                yybegin(INQUASIQUOTEHEAD);
                                return QQTEXT;
          }
        case 154: break;
        case 50: 
          { return COMMENTTEXT;
          }
        case 155: break;
        case 71: 
          { return DOUBLEHASH;
          }
        case 156: break;
        case 34: 
          { return RBRACKET;
          }
        case 157: break;
        case 42: 
          { return PERCENT;
          }
        case 158: break;
        case 48: 
          { return COLON;
          }
        case 159: break;
        case 27: 
          { return LEFTARROW;
          }
        case 160: break;
        case 123: 
          { indent = 0; return CPPENDIF;
          }
        case 161: break;
        case 100: 
          { yybegin(FINDINGINDENTATIONCONTEXT);
                            indent = yycolumn;
                            return LET;
          }
        case 162: break;
        case 26: 
          { return LESSTHAN;
          }
        case 163: break;
        case 121: 
          { return CLASSTOKEN;
          }
        case 164: break;
        case 135: 
          { indent = 0; return CPPDEFINE;
          }
        case 165: break;
        case 54: 
          { return PRAGMA;
          }
        case 166: break;
        case 1: 
          { indentationStack.push(Pair.create(yyline, yycolumn));
                        yybegin(REALLYYINITIAL);
                        yypushback(1);
                        int lastNum = openBraces.peek().getSecond();
                        openBraces.push(Pair.create(Pair.create(yyline,yycolumn), ++lastNum));
                        return WHITESPACELBRACETOK;
          }
        case 167: break;
        case 126: 
          { yybegin(REALLYYINITIAL);
                        yypushback(6);
          }
        case 168: break;
        case 7: 
          { indent = indent + (indent + 8) % 8;
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 169: break;
        case 141: 
          { return INSTANCE;
          }
        case 170: break;
        case 84: 
          { commentLevel--;
                        if (commentLevel == 0) {
                            yybegin(stateStack.pop());
                            return CLOSECOM;
                        }
                        return COMMENTTEXT;
          }
        case 171: break;
        case 9: 
          { return INTEGERTOKEN;
          }
        case 172: break;
        case 91: 
          { indent = 0; return CPPIF;
          }
        case 173: break;
        case 73: 
          { return DOUBLEPERIOD;
          }
        case 174: break;
        case 98: 
          { indent = 0; yybegin(ININDENTATION); return COMMENT;
          }
        case 175: break;
        case 106: 
          { stateStack.push(ININDENTATION);
                        yybegin(INPRAGMA);
                        return OPENPRAGMA;
          }
        case 176: break;
        case 20: 
          { return CARET;
          }
        case 177: break;
        case 94: 
          { stateStack.push(YYINITIAL);
                        yybegin(INPRAGMA);
                        return OPENPRAGMA;
          }
        case 178: break;
        case 80: 
          { return LTHOPEN;
          }
        case 179: break;
        case 55: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 180: break;
        case 128: 
          { return EXPORTTOKEN;
          }
        case 181: break;
        case 63: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 182: break;
        case 39: 
          { yybegin(INSTRING);
                        return DOUBLEQUOTE;
          }
        case 183: break;
        case 37: 
          { return LBRACKET;
          }
        case 184: break;
        case 14: 
          { return SINGLEQUOTE;
          }
        case 185: break;
        case 142: 
          { return DERIVING;
          }
        case 186: break;
        case 65: 
          { yybegin(REALLYYINITIAL);
                        yypushback(2);
          }
        case 187: break;
        case 36: 
          { return SEMICOLON;
          }
        case 188: break;
        case 107: 
          { stateStack.push(FINDINGINDENTATIONCONTEXT);
                        yybegin(INPRAGMA);
                        return OPENPRAGMA;
          }
        case 189: break;
        case 35: 
          { return COMMA;
          }
        case 190: break;
        case 132: 
          { return FAMILYTOKEN;
          }
        case 191: break;
        case 110: 
          { return DATA;
          }
        case 192: break;
        case 11: 
          { return CONIDREGEXP;
          }
        case 193: break;
        case 62: 
          { yybegin(YYINITIAL); return SHEBANGPATH;
          }
        case 194: break;
        case 85: 
          { commentLevel++;
                        return COMMENTTEXT;
          }
        case 195: break;
        case 68: 
          { return THQUOTE;
          }
        case 196: break;
        case 58: 
          { yybegin(REALLYYINITIAL);
                        yypushback(1);
          }
        case 197: break;
        case 116: 
          { indent = 0; return CPPLINE;
          }
        case 198: break;
        case 95: 
          { return FLOATTOKEN;
          }
        case 199: break;
        case 105: 
          { yybegin(stateStack.pop());
                        return CLOSEPRAGMA;
          }
        case 200: break;
        case 87: 
          { commentLevel++;
                        stateStack.push(ININDENTATION);
                        yybegin(INCOMMENT);
                        return OPENCOM;
          }
        case 201: break;
        case 64: 
          { if (yychar == 0) {
                          yybegin(INSHEBANG);
                          return SHEBANGSTART;
                      }
                      return SHARED_VARSYM_TOKEN;
          }
        case 202: break;
        case 124: 
          { indent = 0; return CPPIFDEF;
          }
        case 203: break;
        case 18: 
          { return PLUS;
          }
        case 204: break;
        case 10: 
          { return VARIDREGEXP;
          }
        case 205: break;
        case 92: 
          { indent = 0; return COMMENT;
          }
        case 206: break;
        case 52: 
          { return BADSTRINGTOKEN;
          }
        case 207: break;
        case 112: 
          { return TYPE;
          }
        case 208: break;
        case 78: 
          { commentLevel++;
                        stateStack.push(REALLYYINITIAL);
                        yybegin(INCOMMENT);
                        return OPENCOM;
          }
        case 209: break;
        case 17: 
          { return PERIOD;
          }
        case 210: break;
        case 90: 
          { qqLevel--;
                                yybegin(stateStack.pop());
                                if (qqLevel == 0) {
                                    return RTHCLOSE;
                                }
                                return QQTEXT;
          }
        case 211: break;
        case 28: 
          { return GREATERTHAN;
          }
        case 212: break;
        case 6: 
          { yybegin(ININDENTATION);
                        indent = 0;
                        return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 213: break;
        case 99: 
          { indent = 0; yybegin(ININDENTATION); return HADDOCK;
          }
        case 214: break;
        case 16: 
          { return HASH;
          }
        case 215: break;
        case 21: 
          { return SHARED_VARSYM_TOKEN;
          }
        case 216: break;
        case 43: 
          { return ASTERISK;
          }
        case 217: break;
        case 104: 
          { yypushback(yytext().length() - 1);
                            qqLevel++;
                            stateStack.push(REALLYYINITIAL);
                            yybegin(INQUASIQUOTEHEAD);
                            return QQOPEN;
          }
        case 218: break;
        case 75: 
          { if (retry) {
                                retry = false;
                            } else if (!indentationStack.isEmpty() &&
                                        yyline ==
                                           indentationStack.peek().getFirst()) {
                                indentationStack.pop();
                                yypushback(2);
                                retry = true;
                                int lastNum = openBraces.peek().getSecond();
                                openBraces.push(Pair.create(Pair.create(yyline,yycolumn), --lastNum));
                                return WHITESPACERBRACETOK;
                            }
                            return IN;
          }
        case 219: break;
        case 138: 
          { return DEFAULT;
          }
        case 220: break;
        case 56: 
          { boolean isWhere = yytext().toString().equals("where");
                        boolean equalIndent = !indentationStack.isEmpty() && indent == indentationStack.peek().getSecond();
                        boolean isDedent = !indentationStack.isEmpty() && indent < indentationStack.peek().getSecond();
                        if (!isWhere && equalIndent) {
                            yybegin(REALLYYINITIAL);
                            yypushback(yylength());
                            return WHITESPACESEMITOK;
                        // "where" clauses can be equally indented with do blocks.  If this happens, we should close out
                        // the previous do block with a synthetic rbrace, essentially the same as a dedent.
                        // See https://github.com/carymrobbins/intellij-haskforce/issues/81
                        }
                        if (isDedent || (isWhere && equalIndent)) {
                            indentationStack.pop();
                            yypushback(yylength());
                            int lastNum = openBraces.peek().getSecond();
                            openBraces.push(Pair.create(Pair.create(yyline,yycolumn), --lastNum));
                            return WHITESPACERBRACETOK;
                        }
                        yybegin(REALLYYINITIAL);
                        yypushback(yylength());
          }
        case 221: break;
        case 41: 
          { return DOLLAR;
          }
        case 222: break;
        case 3: 
          { indent = indent + (indent + 8) % 8;
                        return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 223: break;
        case 119: 
          { indent = 0; yybegin(ININDENTATION); return CPPELSE;
          }
        case 224: break;
        case 139: 
          { return NEWTYPE;
          }
        case 225: break;
        case 137: 
          { return FOREIGN;
          }
        case 226: break;
        case 32: 
          { return AMPERSAND;
          }
        case 227: break;
        case 38: 
          { return BACKTICK;
          }
        case 228: break;
        case 115: 
          { indent = 0; return CPPELSE;
          }
        case 229: break;
        case 93: 
          { indent = 0; return HADDOCK;
          }
        case 230: break;
        case 136: 
          { indent = 0; return CPPPRAGMA;
          }
        case 231: break;
        case 134: 
          { return HIDING;
          }
        case 232: break;
        case 83: 
          { return CONSYMTOK;
          }
        case 233: break;
        case 120: 
          { return INFIX;
          }
        case 234: break;
        case 140: 
          { indent = 0; return CPPINCLUDE;
          }
        case 235: break;
        case 8: 
          { return UNDERSCORE;
          }
        case 236: break;
        case 66: 
          { commentLevel++;
                        stateStack.push(YYINITIAL);
                        yybegin(INCOMMENT);
                        return OPENCOM;
          }
        case 237: break;
        case 46: 
          { return AMPERSAT;
          }
        case 238: break;
        case 81: 
          { return IDSPLICE;
          }
        case 239: break;
        case 53: 
          { yybegin(REALLYYINITIAL);
                                        return DOUBLEQUOTE;
          }
        case 240: break;
        case 118: 
          { indent = 0; yybegin(ININDENTATION); return CPPELIF;
          }
        case 241: break;
        case 86: 
          { // DO NOT REMOVE.
                        // Workaround for {COMMENT} not affecting this rule.
                        // See Comment00004.hs for test case.
                        indent = 0;
                        return COMMENT;
          }
        case 242: break;
        case 67: 
          { return LUNBOXPAREN;
          }
        case 243: break;
        case 47: 
          { return TILDE;
          }
        case 244: break;
        case 57: 
          { yypushback(1);
                        if (emptyblockPhase == 1) {
                            emptyblockPhase = 2;
                            int lastNum = openBraces.peek().getSecond();
                            openBraces.push(Pair.create(Pair.create(yyline,yycolumn), --lastNum));
                            return WHITESPACERBRACETOK;
                        } else if (emptyblockPhase == 2) {
                            emptyblockPhase = 0;
                            yybegin(REALLYYINITIAL);
                            return WHITESPACESEMITOK;
                        } else if (!indentationStack.isEmpty() &&
                                indent == indentationStack.peek().getSecond()) {
                            emptyblockPhase = 1;
                            int lastNum = openBraces.peek().getSecond();
                            openBraces.push(Pair.create(Pair.create(yyline,yycolumn), ++lastNum));
                            return WHITESPACELBRACETOK;
                        } else {
                            indentationStack.push(Pair.create(yyline, yycolumn));
                            yybegin(REALLYYINITIAL);
                            int lastNum = openBraces.peek().getSecond();
                            openBraces.push(Pair.create(Pair.create(yyline,yycolumn), ++lastNum));
                            return WHITESPACELBRACETOK;
                        }
          }
        case 245: break;
        case 127: 
          { indent = 0; yybegin(ININDENTATION); return CPPENDIF;
          }
        case 246: break;
        case 61: 
          { yybegin(INQUASIQUOTE);
                                return PIPE;
          }
        case 247: break;
        case 114: 
          { indent = 0; return CPPELIF;
          }
        case 248: break;
        case 33: 
          { return PIPE;
          }
        case 249: break;
        case 31: 
          { return DOUBLEARROW;
          }
        case 250: break;
        case 44: 
          { return SLASH;
          }
        case 251: break;
        case 60: 
          { indent = 0;
                                return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 252: break;
        case 117: 
          { yybegin(FINDINGINDENTATIONCONTEXT);
                          indent = yycolumn;
                          return LCASETOK;
          }
        case 253: break;
        case 129: 
          { return INFIXL;
          }
        case 254: break;
        case 125: 
          { indent = 0; return CPPUNDEF;
          }
        case 255: break;
        case 131: 
          { return IMPORT;
          }
        case 256: break;
        case 51: 
          { return STRINGTOKEN;
          }
        case 257: break;
        case 130: 
          { return INFIXR;
          }
        case 258: break;
        case 109: 
          { return ELSE;
          }
        case 259: break;
        case 102: 
          { yybegin(FINDINGINDENTATIONCONTEXT);
                            indent = yycolumn;
                            return MDOTOK;
          }
        case 260: break;
        case 74: 
          { return IF;
          }
        case 261: break;
        case 59: 
          { return QQTEXT;
          }
        case 262: break;
        case 2: 
          { indent = 0;
                        return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 263: break;
        case 23: 
          { indent++;
                          return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 264: break;
        case 113: 
          { return THEN;
          }
        case 265: break;
        case 89: 
          { commentLevel++;
                        stateStack.push(FINDINGINDENTATIONCONTEXT);
                        yybegin(INCOMMENT);
                        return OPENCOM;
          }
        case 266: break;
        case 5: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 267: break;
        case 29: 
          { return RIGHTARROW;
          }
        case 268: break;
        case 76: 
          { yybegin(FINDINGINDENTATIONCONTEXT);
                            indent = yycolumn;
                            return DO;
          }
        case 269: break;
        case 96: 
          { return CHARTOKEN;
          }
        case 270: break;
        case 19: 
          { return MINUS;
          }
        case 271: break;
        case 111: 
          { return CASE;
          }
        case 272: break;
        case 13: 
          { return RPAREN;
          }
        case 273: break;
        case 88: 
          { // DO NOT REMOVE.
                        // Workaround for {COMMENT} not affecting this rule.
                        // See Module00001.hs for test case.
                        indent = 0;
                        return COMMENT;
          }
        case 274: break;
        case 79: 
          { return RTHCLOSE;
          }
        case 275: break;
        case 49: 
          { return DOUBLECOLON;
          }
        case 276: break;
        case 77: 
          { return AS;
          }
        case 277: break;
        case 69: 
          { return NULLCHARACTER;
          }
        case 278: break;
        case 24: 
          { indentationStack.push(NO_LAYOUT);
                        return LBRACE;
          }
        case 279: break;
        case 122: 
          { yybegin(FINDINGINDENTATIONCONTEXT);
                            indent = yycolumn;
                            return WHERE;
          }
        case 280: break;
        case 40: 
          { if (indentationStack.size() > 0) {
                            Pair<Integer, Integer> p = indentationStack.peek();
                            if (NO_LAYOUT.equals(p)) {
                                indentationStack.pop();
                            }
                        }
                        return RBRACE;
          }
        case 281: break;
        case 82: 
          { return PARENSPLICE;
          }
        case 282: break;
        case 133: 
          { return MODULETOKEN;
          }
        case 283: break;
        case 72: 
          { yybegin(FINDINGINDENTATIONCONTEXT);
                            indent = yycolumn;
                            return OF;
          }
        case 284: break;
        case 103: 
          { stateStack.push(REALLYYINITIAL);
                        yybegin(INPRAGMA);
                        return OPENPRAGMA;
          }
        case 285: break;
        case 97: 
          { indent = 0; yybegin(ININDENTATION); return CPPIF;
          }
        case 286: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case FINDINGINDENTATIONCONTEXT: {
              // Deal with "module Modid where \n\n\n".
                        indentationStack.push(Pair.create(yyline, yycolumn));
                        yybegin(REALLYYINITIAL);
                        int lastNum = openBraces.peek().getSecond();
                        openBraces.push(Pair.create(Pair.create(yyline,yycolumn), ++lastNum));
                        return WHITESPACELBRACETOK;
            }
            case 367: break;
            default:
              {
                if (indentationStack.size() > 0) {
                            Pair<Integer, Integer> p = indentationStack.pop();
                            if (!NO_LAYOUT.equals(p)) {
                                int lastNum = openBraces.peek().getSecond();
                                openBraces.push(Pair.create(Pair.create(yyline,yycolumn), --lastNum));
                            }
                            return NO_LAYOUT.equals(p) ? RBRACE : WHITESPACERBRACETOK;
                        }
                        openBraces.removeLast();
                        return null;
              }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
