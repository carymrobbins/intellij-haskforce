/* The following code was generated by JFlex 1.4.3 on 4/19/15 10:14 AM */

/**
 * Adapted from http://github.com/JetBrains/intellij-community
 * xml/xml-psi-impl/src/com/intellij/lexer/_HtmlLexer.flex
 */
package com.haskforce.yesod.shakespeare.hamlet.highlighting;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;
import com.haskforce.yesod.shakespeare.hamlet.psi.HamletTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/19/15 10:14 AM from the specification file
 * <tt>/home/developer/sources/intellij-haskforce-for-prs/src/com/haskforce/yesod/shakespeare/hamlet/highlighting/_HamletSyntaxHighlightingLexer.flex</tt>
 */
public class _HamletSyntaxHighlightingLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROCESSING_INSTRUCTION = 18;
  public static final int C_COMMENT_END = 28;
  public static final int END_TAG_NAME = 8;
  public static final int INTERPOLATION = 32;
  public static final int START_TAG_NAME = 6;
  public static final int ATTRIBUTE_VALUE_SQ = 16;
  public static final int DOC_TYPE = 2;
  public static final int ATTRIBUTE_VALUE_DQ = 14;
  public static final int YYINITIAL = 0;
  public static final int TAG_CHARACTERS = 24;
  public static final int START_TAG_NAME2 = 20;
  public static final int TAG_ATTRIBUTES = 10;
  public static final int LOGIC = 30;
  public static final int COMMENT = 4;
  public static final int ATTRIBUTE_VALUE_START = 12;
  public static final int C_COMMENT_START = 26;
  public static final int END_TAG_NAME2 = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\65\1\0\1\3\1\64\22\0\1\3\1\14\1\11"+
    "\1\10\1\47\1\0\1\54\1\12\1\53\1\53\1\70\2\0\1\7"+
    "\1\6\1\72\12\2\1\5\1\77\1\13\1\76\1\52\1\71\1\66"+
    "\1\102\1\43\1\21\1\15\1\31\1\102\1\1\1\33\1\45\2\1"+
    "\1\37\1\35\1\1\1\17\1\27\3\1\1\23\1\41\3\1\1\25"+
    "\1\1\1\73\1\75\1\74\1\67\1\4\1\0\1\57\1\44\1\22"+
    "\1\16\1\32\1\55\1\61\1\34\1\46\2\1\1\40\1\36\1\60"+
    "\1\20\1\30\1\100\1\62\1\56\1\24\1\42\1\1\1\63\1\101"+
    "\1\26\1\1\1\50\1\53\1\51\54\0\1\1\12\0\1\1\4\0"+
    "\1\1\5\0\27\1\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0"+
    "\5\1\7\0\1\1\1\0\1\1\201\0\5\1\1\0\2\1\2\0"+
    "\4\1\10\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0"+
    "\123\1\1\0\213\1\10\0\236\1\11\0\46\1\2\0\1\1\7\0"+
    "\47\1\110\0\33\1\5\0\3\1\55\0\53\1\43\0\2\1\1\0"+
    "\143\1\1\0\1\1\17\0\2\1\7\0\2\1\12\0\3\1\2\0"+
    "\1\1\20\0\1\1\1\0\36\1\35\0\131\1\13\0\1\1\30\0"+
    "\41\1\11\0\2\1\4\0\1\1\5\0\26\1\4\0\1\1\11\0"+
    "\1\1\3\0\1\1\27\0\31\1\107\0\1\1\1\0\13\1\127\0"+
    "\66\1\3\0\1\1\22\0\1\1\7\0\12\1\17\0\7\1\1\0"+
    "\7\1\5\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\3\0\1\1\20\0\1\1\15\0\2\1\1\0"+
    "\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1\1\0"+
    "\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0"+
    "\2\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0\3\1\17\0"+
    "\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\14\1\26\0\1\1\64\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\3\0\1\1\32\0\2\1\6\0\2\1\43\0"+
    "\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\3\0"+
    "\1\1\40\0\1\1\1\0\2\1\17\0\2\1\22\0\10\1\1\0"+
    "\3\1\1\0\51\1\2\0\1\1\20\0\1\1\21\0\2\1\30\0"+
    "\6\1\5\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"+
    "\7\1\72\0\60\1\1\0\2\1\14\0\7\1\72\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0"+
    "\4\1\40\0\1\1\77\0\10\1\1\0\44\1\33\0\5\1\163\0"+
    "\53\1\24\0\1\1\20\0\6\1\4\0\4\1\3\0\1\1\3\0"+
    "\2\1\7\0\3\1\4\0\15\1\14\0\1\1\21\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1\1\0\4\1\2\0"+
    "\7\1\1\0\1\1\1\0\4\1\2\0\51\1\1\0\4\1\2\0"+
    "\41\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\17\1\1\0\71\1\1\0\4\1\2\0\103\1\45\0\20\1\20\0"+
    "\125\1\14\0\u026c\1\2\0\21\1\1\0\32\1\5\0\113\1\25\0"+
    "\15\1\1\0\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0"+
    "\3\1\17\0\64\1\43\0\1\1\4\0\1\1\103\0\130\1\10\0"+
    "\51\1\1\0\1\1\5\0\106\1\12\0\35\1\63\0\36\1\2\0"+
    "\5\1\13\0\54\1\25\0\7\1\70\0\27\1\11\0\65\1\122\0"+
    "\1\1\135\0\57\1\21\0\7\1\67\0\36\1\15\0\2\1\12\0"+
    "\54\1\32\0\44\1\51\0\3\1\12\0\44\1\153\0\4\1\1\0"+
    "\4\1\3\0\2\1\11\0\300\1\100\0\u0116\1\2\0\6\1\2\0"+
    "\46\1\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0"+
    "\3\1\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0"+
    "\3\1\1\0\7\1\164\0\1\1\15\0\1\1\20\0\15\1\145\0"+
    "\1\1\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0"+
    "\4\1\5\0\5\1\4\0\1\1\64\0\2\1\u0a7b\0\57\1\1\0"+
    "\57\1\1\0\205\1\6\0\4\1\3\0\2\1\14\0\46\1\1\0"+
    "\1\1\5\0\1\1\2\0\70\1\7\0\1\1\20\0\27\1\11\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\120\0\1\1\u01d5\0\2\1\52\0"+
    "\5\1\5\0\2\1\4\0\126\1\6\0\3\1\1\0\132\1\1\0"+
    "\4\1\5\0\51\1\3\0\136\1\21\0\33\1\65\0\20\1\u0200\0"+
    "\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0"+
    "\20\1\12\0\2\1\24\0\57\1\20\0\31\1\10\0\106\1\61\0"+
    "\11\1\2\0\147\1\2\0\4\1\1\0\4\1\14\0\13\1\115\0"+
    "\12\1\1\0\3\1\1\0\4\1\1\0\27\1\35\0\64\1\16\0"+
    "\62\1\76\0\6\1\3\0\1\1\16\0\34\1\12\0\27\1\31\0"+
    "\35\1\7\0\57\1\34\0\1\1\60\0\51\1\27\0\3\1\1\0"+
    "\10\1\24\0\27\1\3\0\1\1\5\0\60\1\1\0\1\1\3\0"+
    "\2\1\2\0\5\1\2\0\1\1\1\0\1\1\30\0\3\1\2\0"+
    "\13\1\7\0\3\1\14\0\6\1\2\0\6\1\2\0\6\1\11\0"+
    "\7\1\1\0\7\1\221\0\43\1\35\0\u2ba4\1\14\0\27\1\4\0"+
    "\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1\5\0"+
    "\1\1\1\0\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0"+
    "\66\1\50\0\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0"+
    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
    "\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\10\0\1\2\5\0\1\3\1\4\1\1\1\5"+
    "\11\1\1\6\1\7\6\6\1\10\4\6\5\11\1\12"+
    "\4\11\1\13\1\14\2\15\1\14\1\16\5\14\2\17"+
    "\2\14\1\20\1\14\1\21\3\22\1\23\1\24\5\22"+
    "\3\25\1\26\7\25\3\2\1\27\3\2\1\6\1\30"+
    "\1\14\1\17\10\31\1\32\1\11\10\32\1\33\6\3"+
    "\3\4\1\34\3\4\1\35\1\36\1\37\1\40\1\0"+
    "\1\41\1\42\1\43\17\0\1\44\1\45\1\46\6\0"+
    "\1\42\1\47\1\50\1\51\1\22\1\35\1\36\1\22"+
    "\1\44\1\45\1\46\3\0\1\35\1\36\1\44\1\45"+
    "\1\46\1\30\1\52\1\35\1\36\1\44\1\45\1\46"+
    "\2\0\1\53\1\54\1\0\1\55\3\0\1\56\4\0"+
    "\1\57\11\0\1\60\1\61\1\35\1\36\1\0\1\62"+
    "\1\22\1\44\1\45\1\46\1\62\1\63\11\0\1\64"+
    "\3\0\1\17\2\0\1\55\11\0\1\65\3\0\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u053c"+
    "\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0754\0\u0605\0\u0929\0\u096c"+
    "\0\u09af\0\u0754\0\u07da\0\u09f2\0\u053c\0\u0a35\0\u0754\0\u0605"+
    "\0\u0929\0\u096c\0\u09af\0\u0754\0\u0754\0\u0a78\0\u0abb\0\u053c"+
    "\0\u0754\0\u0605\0\u0929\0\u096c\0\u09af\0\u0afe\0\u0b41\0\u0b84"+
    "\0\u0bc7\0\u0c0a\0\u0754\0\u0c4d\0\u0754\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u0754\0\u0754\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0754"+
    "\0\u07da\0\u053c\0\u0754\0\u0ea8\0\u0605\0\u0929\0\u096c\0\u09af"+
    "\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u0754\0\u103a\0\u107d"+
    "\0\u10c0\0\u1103\0\u1146\0\u07da\0\u1189\0\u0754\0\u07da\0\u053c"+
    "\0\u0605\0\u0929\0\u096c\0\u09af\0\u0c4d\0\u0754\0\u11cc\0\u07da"+
    "\0\u09f2\0\u053c\0\u0605\0\u0929\0\u096c\0\u09af\0\u120f\0\u0754"+
    "\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u146a\0\u0754\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"+
    "\0\u163f\0\u1682\0\u0754\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1"+
    "\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9"+
    "\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u081d"+
    "\0\u0860\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u0754\0\u1d0d\0\u1d50"+
    "\0\u0754\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25"+
    "\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\u2180\0\u0754\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u0754\0\u2461\0\u24a4\0\u24e7"+
    "\0\u0754\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u0754\0\u2636\0\u2679"+
    "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u0754"+
    "\0\u0754\0\u2891\0\u28d4\0\u2917\0\u0c90\0\u295a\0\u299d\0\u29e0"+
    "\0\u2a23\0\u0754\0\u0754\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72"+
    "\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u0754\0\u2cc1\0\u2d04\0\u2d47"+
    "\0\u0754\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u0754\0\u30ae\0\u30f1"+
    "\0\u3134\0\u0754";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\22\1\23\1\24\3\22\1\25\2\22\1\26\33\22"+
    "\1\27\4\22\1\30\7\22\2\23\1\31\1\32\1\33"+
    "\4\22\1\34\5\22\3\35\1\36\1\37\3\35\1\40"+
    "\1\41\1\42\14\35\2\43\2\35\2\44\15\35\1\45"+
    "\1\35\1\46\7\35\2\36\1\47\1\50\1\51\12\35"+
    "\4\52\1\53\2\52\1\54\1\55\2\52\1\56\36\52"+
    "\1\57\1\52\1\60\11\52\1\61\1\62\1\63\2\52"+
    "\1\64\7\52\1\65\1\66\1\65\1\36\1\67\1\66"+
    "\2\65\1\70\2\65\1\71\1\65\32\66\5\65\1\72"+
    "\7\66\2\36\1\73\1\74\1\75\7\65\3\66\1\65"+
    "\1\66\1\65\1\36\1\67\1\66\2\65\1\70\2\65"+
    "\1\76\1\65\32\66\5\65\1\72\7\66\2\36\1\73"+
    "\1\74\1\75\7\65\3\66\1\65\1\77\1\65\1\36"+
    "\1\100\1\77\1\101\1\65\1\102\4\65\32\77\3\65"+
    "\1\103\1\65\1\72\7\77\2\36\1\73\1\74\1\75"+
    "\1\65\1\104\3\65\1\105\1\65\3\77\3\106\1\36"+
    "\1\107\3\106\1\110\1\111\1\112\34\106\1\113\2\106"+
    "\1\103\11\106\2\36\1\114\1\115\1\116\1\106\1\117"+
    "\10\106\4\120\1\121\3\120\1\122\1\123\35\120\1\124"+
    "\4\120\1\125\11\120\1\126\1\127\1\130\4\120\1\131"+
    "\11\120\1\121\3\120\1\122\1\120\1\123\34\120\1\132"+
    "\4\120\1\125\11\120\1\126\1\127\1\130\4\120\1\131"+
    "\5\120\4\133\1\134\3\133\1\135\41\133\1\136\13\133"+
    "\1\137\1\140\1\141\1\142\11\133\4\35\1\37\3\35"+
    "\1\143\2\35\1\71\40\35\1\46\11\35\1\47\1\50"+
    "\1\51\12\35\3\65\1\36\1\144\3\65\1\145\2\65"+
    "\1\76\36\65\1\103\1\65\1\72\7\65\2\36\1\73"+
    "\1\74\1\75\12\65\3\146\1\36\1\147\3\146\1\150"+
    "\2\146\1\71\36\146\1\103\1\146\1\151\7\146\2\36"+
    "\1\152\1\153\1\154\1\146\1\155\10\146\1\156\1\157"+
    "\2\156\1\160\2\156\1\161\1\162\4\156\32\157\5\156"+
    "\1\163\7\157\2\156\1\164\1\165\1\166\3\156\1\167"+
    "\3\156\3\157\1\156\1\157\2\156\1\160\2\156\1\161"+
    "\1\162\4\156\32\157\5\156\1\163\7\157\2\156\1\164"+
    "\1\165\1\166\3\156\1\170\3\156\3\157\4\171\1\172"+
    "\3\171\1\173\53\171\2\35\1\174\1\175\1\176\12\171"+
    "\4\177\1\200\3\177\1\201\40\177\1\202\14\177\1\203"+
    "\1\204\1\205\12\177\3\22\1\0\4\22\1\0\2\22"+
    "\1\0\33\22\1\0\4\22\1\0\7\22\2\0\7\22"+
    "\1\34\5\22\3\0\1\23\60\0\2\23\15\0\3\22"+
    "\1\0\4\22\1\0\2\22\1\0\33\22\1\0\1\206"+
    "\3\22\1\0\7\22\2\0\7\22\1\34\5\22\50\0"+
    "\1\207\33\0\1\210\2\0\2\210\2\0\1\211\3\0"+
    "\1\212\32\210\6\0\7\210\5\0\1\213\1\214\5\0"+
    "\3\210\10\0\1\215\5\0\1\216\1\0\1\217\1\0"+
    "\1\220\7\0\1\221\3\0\1\222\7\0\1\217\1\0"+
    "\1\223\4\0\1\224\2\0\1\225\2\0\1\226\20\0"+
    "\1\227\2\0\2\227\2\0\1\230\4\0\23\227\1\231"+
    "\6\227\6\0\2\227\1\232\1\233\1\231\2\227\14\0"+
    "\1\234\2\227\3\22\1\0\4\22\1\0\2\22\1\0"+
    "\33\22\1\0\1\235\3\22\1\0\7\22\2\0\7\22"+
    "\1\34\10\22\1\0\4\22\1\0\2\22\1\0\33\22"+
    "\1\0\1\236\3\22\1\0\7\22\2\0\7\22\1\34"+
    "\10\22\1\0\4\22\1\0\2\22\1\0\33\22\1\0"+
    "\1\237\3\22\1\0\7\22\2\0\7\22\1\34\10\22"+
    "\1\0\7\22\1\0\40\22\1\0\7\22\2\0\7\22"+
    "\1\34\5\22\106\0\1\36\60\0\2\36\65\0\1\206"+
    "\32\0\11\240\1\120\71\240\12\241\1\120\70\241\41\0"+
    "\2\242\63\0\2\243\126\0\1\235\102\0\1\236\102\0"+
    "\1\237\41\0\1\244\107\0\1\245\67\0\2\66\1\0"+
    "\4\66\5\0\32\66\6\0\7\66\14\0\3\66\1\0"+
    "\2\66\1\0\4\66\5\0\32\66\1\0\1\206\4\0"+
    "\7\66\14\0\3\66\72\0\1\246\11\0\2\77\1\0"+
    "\4\77\5\0\32\77\6\0\7\77\14\0\3\77\1\0"+
    "\2\77\1\0\4\77\5\0\32\77\1\0\1\206\4\0"+
    "\7\77\14\0\3\77\1\0\1\247\2\0\2\247\7\0"+
    "\32\247\6\0\7\247\14\0\3\247\1\0\1\250\2\0"+
    "\2\250\7\0\32\250\1\0\1\207\4\0\7\250\14\0"+
    "\3\250\52\0\1\251\30\0\3\106\1\0\46\106\1\0"+
    "\11\106\2\0\4\106\1\252\13\106\1\0\44\106\1\253"+
    "\1\106\1\0\11\106\2\0\4\106\1\252\13\106\1\0"+
    "\44\106\1\254\1\106\1\0\11\106\2\0\4\106\1\252"+
    "\13\106\1\0\44\106\1\255\1\106\1\0\11\106\2\0"+
    "\4\106\1\252\13\106\1\0\44\106\1\256\1\106\1\0"+
    "\11\106\2\0\4\106\1\252\13\106\1\0\44\106\1\257"+
    "\1\106\1\0\11\106\2\0\4\106\1\252\13\106\1\0"+
    "\44\106\1\260\1\106\1\0\11\106\2\0\4\106\1\252"+
    "\13\106\1\0\46\106\1\251\11\106\2\0\4\106\1\252"+
    "\10\106\50\0\1\261\101\0\1\120\103\0\1\262\32\0"+
    "\52\133\1\0\16\133\1\263\61\133\1\264\1\133\1\0"+
    "\16\133\1\263\61\133\1\265\1\133\1\0\16\133\1\263"+
    "\61\133\1\266\1\133\1\0\16\133\1\263\61\133\1\267"+
    "\1\133\1\0\16\133\1\263\61\133\1\270\1\133\1\0"+
    "\16\133\1\263\63\133\1\136\30\133\1\0\2\271\1\0"+
    "\4\271\5\0\32\271\1\0\1\207\4\0\7\271\14\0"+
    "\3\271\1\0\2\77\1\0\4\77\5\0\32\77\1\0"+
    "\1\207\4\0\7\77\14\0\3\77\1\0\3\157\2\0"+
    "\1\157\5\0\33\157\4\0\13\157\12\0\3\157\52\0"+
    "\1\272\30\0\64\171\2\0\65\171\1\206\13\171\2\0"+
    "\65\171\1\207\13\171\2\0\65\171\1\235\13\171\2\0"+
    "\65\171\1\236\13\171\2\0\65\171\1\237\13\171\2\0"+
    "\15\171\51\177\1\0\101\177\1\273\1\0\101\177\1\274"+
    "\1\0\101\177\1\275\1\0\101\177\1\276\1\0\101\177"+
    "\1\277\1\0\31\177\65\206\1\0\15\206\65\207\1\0"+
    "\15\207\1\0\2\210\1\0\4\210\5\0\32\210\6\0"+
    "\7\210\14\0\3\210\1\0\2\211\1\0\4\211\5\0"+
    "\32\211\6\0\7\211\14\0\3\211\7\0\1\300\5\0"+
    "\2\301\65\0\1\302\2\0\2\302\2\0\1\303\4\0"+
    "\32\302\6\0\7\302\14\0\3\302\64\215\2\0\15\215"+
    "\20\0\1\304\137\0\1\305\104\0\1\306\63\0\1\307"+
    "\121\0\1\310\23\0\51\223\1\311\31\223\20\0\1\312"+
    "\102\0\1\313\11\0\1\314\116\0\1\315\35\0\2\227"+
    "\1\0\4\227\5\0\32\227\6\0\7\227\13\0\1\316"+
    "\3\227\2\0\1\317\76\0\1\320\2\0\2\227\1\0"+
    "\4\227\5\0\7\227\1\321\22\227\6\0\7\227\13\0"+
    "\1\316\3\227\1\0\2\227\1\0\4\227\5\0\13\227"+
    "\1\322\5\227\1\323\10\227\6\0\7\227\13\0\1\316"+
    "\3\227\1\0\2\227\1\0\4\227\5\0\27\227\1\324"+
    "\2\227\6\0\7\227\13\0\1\316\3\227\1\0\2\227"+
    "\1\0\4\227\5\0\25\227\1\325\4\227\6\0\7\227"+
    "\13\0\1\316\3\227\65\235\1\0\15\235\65\236\1\0"+
    "\15\236\65\237\1\0\15\237\43\0\2\326\73\0\2\327"+
    "\47\0\1\244\46\0\1\330\11\0\2\244\110\0\1\331"+
    "\10\0\2\247\1\0\4\247\5\0\32\247\6\0\7\247"+
    "\14\0\3\247\1\0\2\250\1\0\4\250\5\0\32\250"+
    "\6\0\7\250\14\0\3\250\52\106\1\0\17\106\1\252"+
    "\10\106\3\253\1\206\46\253\1\206\11\253\1\206\1\0"+
    "\4\253\1\332\10\253\3\254\1\207\46\254\1\207\11\254"+
    "\1\207\1\0\4\254\1\333\10\254\3\255\1\334\45\255"+
    "\1\335\1\334\11\255\2\334\4\255\1\336\10\255\3\256"+
    "\1\235\46\256\1\235\11\256\1\235\1\0\4\256\1\337"+
    "\10\256\3\257\1\236\46\257\1\236\11\257\1\236\1\0"+
    "\4\257\1\340\10\257\3\260\1\237\46\260\1\237\11\260"+
    "\1\237\1\0\4\260\1\341\10\260\11\261\1\0\37\261"+
    "\1\342\31\261\12\262\1\0\36\262\1\342\31\262\52\133"+
    "\1\0\30\133\52\264\1\206\12\264\1\133\15\264\52\265"+
    "\1\207\12\265\1\133\15\265\52\266\1\235\12\266\1\133"+
    "\15\266\52\267\1\236\12\267\1\133\15\267\52\270\1\237"+
    "\12\270\1\133\15\270\1\0\2\271\1\0\4\271\5\0"+
    "\32\271\6\0\7\271\14\0\3\271\51\273\1\206\13\273"+
    "\1\177\15\273\51\274\1\207\13\274\1\177\15\274\51\275"+
    "\1\235\13\275\1\177\15\275\51\276\1\236\13\276\1\177"+
    "\15\276\51\277\1\237\13\277\1\177\15\277\7\0\1\343"+
    "\112\0\2\344\63\0\2\302\1\0\4\302\5\0\32\302"+
    "\6\0\7\302\14\0\3\302\1\0\2\303\1\0\4\303"+
    "\5\0\32\303\6\0\7\303\14\0\3\303\22\0\1\345"+
    "\136\0\1\346\102\0\1\347\52\0\1\350\136\0\1\351"+
    "\44\0\1\352\141\0\1\353\43\0\1\354\60\0\1\317"+
    "\74\0\1\355\5\0\1\356\12\0\2\356\2\0\2\356"+
    "\6\0\2\356\10\0\2\356\10\0\1\356\1\0\1\356"+
    "\22\0\1\356\1\0\2\227\1\0\4\227\5\0\32\227"+
    "\6\0\7\227\13\0\1\355\3\227\1\0\2\227\1\0"+
    "\4\227\5\0\3\227\1\357\26\227\6\0\7\227\13\0"+
    "\1\316\3\227\1\0\2\227\1\0\4\227\5\0\13\227"+
    "\1\321\16\227\6\0\7\227\13\0\1\316\3\227\1\0"+
    "\2\227\1\0\4\227\5\0\32\227\6\0\1\227\1\323"+
    "\5\227\13\0\1\316\3\227\1\0\2\227\1\0\4\227"+
    "\5\0\3\227\1\231\26\227\6\0\7\227\13\0\1\316"+
    "\3\227\37\0\2\360\101\0\2\361\42\0\52\253\1\206"+
    "\12\253\1\106\4\253\1\332\10\253\52\254\1\207\12\254"+
    "\1\106\4\254\1\333\10\254\51\334\1\342\31\334\51\255"+
    "\1\335\1\334\17\255\1\336\10\255\52\256\1\235\12\256"+
    "\1\106\4\256\1\337\10\256\52\257\1\236\12\257\1\106"+
    "\4\257\1\340\10\257\52\260\1\237\12\260\1\106\4\260"+
    "\1\341\10\260\21\0\2\362\104\0\1\363\110\0\1\305"+
    "\102\0\1\364\114\0\1\346\115\0\1\365\57\0\1\366"+
    "\106\0\1\367\76\0\1\305\50\0\1\356\12\0\2\356"+
    "\2\0\2\356\6\0\2\356\10\0\2\356\10\0\1\356"+
    "\1\0\1\356\17\0\1\355\2\0\1\356\1\0\2\227"+
    "\1\0\4\227\5\0\32\227\6\0\1\227\1\321\5\227"+
    "\13\0\1\316\3\227\45\0\2\370\57\0\2\371\104\0"+
    "\1\372\122\0\1\217\74\0\1\373\110\0\1\374\102\0"+
    "\1\375\55\0\2\376\105\0\2\377\104\0\1\346\112\0"+
    "\1\305\122\0\1\u0100\102\0\1\346\51\0\2\u0101\133\0"+
    "\1\305\52\0\2\u0102\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12663];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\10\0\1\1\5\0\15\1\1\11\7\1\1\11"+
    "\4\1\1\11\4\1\1\11\4\1\2\11\3\1\1\11"+
    "\11\1\1\11\1\1\1\11\3\1\2\11\5\1\1\11"+
    "\2\1\1\11\12\1\1\11\7\1\1\11\7\1\1\11"+
    "\11\1\1\11\11\1\1\11\7\1\1\0\1\11\2\1"+
    "\17\0\3\1\6\0\1\11\2\1\1\11\7\1\3\0"+
    "\6\1\1\11\5\1\2\0\2\1\1\0\1\11\3\0"+
    "\1\11\4\0\1\11\11\0\2\11\2\1\1\0\5\1"+
    "\2\11\11\0\1\11\3\0\1\11\2\0\1\1\11\0"+
    "\1\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private IElementType elTokenType = XmlTokenType.XML_DATA_CHARACTERS;
  private IElementType elTokenType2 = XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;

  public void setElTypes(IElementType _elTokenType,IElementType _elTokenType2) {
    elTokenType = _elTokenType;
    elTokenType2 = _elTokenType2;
  }

  public _HamletSyntaxHighlightingLexer() {
    this((java.io.Reader)null);
  }

  public final int yyIndexOf(char c) {
    int i = 0;
    for (; i < yylength(); ++i) {
        if (yycharat(i) == c) {
            return i;
        }
    }
    return -1;
  }

  // You must manually set this, it will not be updated for you.
  private int oldState = -1;

  public void handleInterpolation() {
    yypushback(yylength() - 2);
    oldState = yystate();
    yybegin(INTERPOLATION);
  }

  public static final Pattern interpolateOpenRegex = Pattern.compile("(#|@|\\^)\\{");


  public _HamletSyntaxHighlightingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HamletSyntaxHighlightingLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1644) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { yybegin(YYINITIAL); return HamletTypes.HASKELL_CODE;
          }
        case 55: break;
        case 21: 
          { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 56: break;
        case 31: 
          { yybegin(START_TAG_NAME); yypushback(yylength());
          }
        case 57: break;
        case 25: 
          { return XmlTokenType.XML_TAG_CHARACTERS;
          }
        case 58: break;
        case 17: 
          { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
          }
        case 59: break;
        case 46: 
          { return elTokenType;
          }
        case 60: break;
        case 15: 
          { return XmlTokenType.XML_NAME;
          }
        case 61: break;
        case 22: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 62: break;
        case 12: 
          { yybegin(YYINITIAL); yypushback(1); break;
          }
        case 63: break;
        case 53: 
          { return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 64: break;
        case 51: 
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
          }
        case 65: break;
        case 38: 
          { handleInterpolation(); return HamletTypes.ATTR_INTERPOLATE_OPEN;
          }
        case 66: break;
        case 37: 
          { handleInterpolation(); return HamletTypes.WIDGET_INTERPOLATE_OPEN;
          }
        case 67: break;
        case 5: 
          { return XmlTokenType.XML_REAL_WHITE_SPACE;
          }
        case 68: break;
        case 10: 
          { // according to HTML spec (http://www.w3.org/html/wg/drafts/html/master/syntax.html#comments)
  // comments should start with <!-- and end with --> thus making <!--> absolutely valid comment
  // please note that it's not true for XML (http://www.w3.org/TR/REC-xml/#sec-comments)
  int loc = getTokenStart();
  char prev = zzBuffer.charAt(loc - 1);
  char prevPrev = zzBuffer.charAt(loc - 2);
  if (prev == '-' && prevPrev == '-') {
    yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
  }
  return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 69: break;
        case 43: 
          { yybegin(END_TAG_NAME); yypushback(yylength());
          }
        case 70: break;
        case 44: 
          { yybegin(END_TAG_NAME2); yypushback(yylength());
          }
        case 71: break;
        case 1: 
          { return XmlTokenType.XML_DATA_CHARACTERS;
          }
        case 72: break;
        case 30: 
          { handleInterpolation(); return HamletTypes.HASKELL_INTERPOLATE_OPEN;
          }
        case 73: break;
        case 27: 
          { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_END;
          }
        case 74: break;
        case 28: 
          { yybegin(oldState); return HamletTypes.INTERPOLATE_CLOSE;
          }
        case 75: break;
        case 36: 
          { handleInterpolation(); return HamletTypes.ROUTE_INTERPOLATE_OPEN;
          }
        case 76: break;
        case 6: 
          { return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 77: break;
        case 16: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
          }
        case 78: break;
        case 42: 
          { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_START_END;
          }
        case 79: break;
        case 34: 
          { return XmlTokenType.XML_END_TAG_START;
          }
        case 80: break;
        case 48: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
          }
        case 81: break;
        case 18: 
          { // NOTE: Specialized Hamlet Hack.
    // We need to ensure that any interpolations inside of this match are captured
    // correctly.  If any exist, we need to look around to see if the attribute is
    // done and handle the state accordingly.
    Matcher m = interpolateOpenRegex.matcher(yytext());
    if (m.find()) {
        // Find the closing bracket position of the interpolation.
        int pos = yytext().toString().indexOf('}', m.start());
        // Push back the state so the attribute doesn't cover the interpolation.
        yypushback(yylength() - m.start());
        // If there is a whitespace after the interpolation, we are done with this attribute.
        if (pos != -1 && Character.isWhitespace(yycharat(pos + 1))) {
            yybegin(TAG_ATTRIBUTES);
        }
    } else {
        // If we didn't find an interpolation, we're done with this attribute.
        yybegin(TAG_ATTRIBUTES);
    }
    return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 82: break;
        case 54: 
          { yybegin(DOC_TYPE); return XmlTokenType.XML_DOCTYPE_START;
          }
        case 83: break;
        case 45: 
          { String text = yytext().toString();
    // Only drop into the LOGIC state if we require more params.
    if (!(text.equals("$else") || text.equals("$nothing"))) {
        yybegin(LOGIC);
    }
    return HamletTypes.LOGIC;
          }
        case 84: break;
        case 2: 
          { return XmlTokenType.XML_PI_TARGET;
          }
        case 85: break;
        case 41: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
          }
        case 86: break;
        case 39: 
          { return HamletTypes.CLASS_ATTRIBUTE;
          }
        case 87: break;
        case 49: 
          { yybegin(C_COMMENT_END); return XmlTokenType.XML_CONDITIONAL_COMMENT_END_START;
          }
        case 88: break;
        case 33: 
          { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
          }
        case 89: break;
        case 35: 
          { return HamletTypes.LINE_COMMENT;
          }
        case 90: break;
        case 11: 
          { yybegin(C_COMMENT_START); return XmlTokenType.XML_CONDITIONAL_COMMENT_START;
          }
        case 91: break;
        case 24: 
          { yybegin(TAG_CHARACTERS); return XmlTokenType.XML_NAME;
          }
        case 92: break;
        case 4: 
          { return HamletTypes.HASKELL_CODE;
          }
        case 93: break;
        case 8: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
          }
        case 94: break;
        case 52: 
          { return XmlTokenType.XML_CHAR_ENTITY_REF;
          }
        case 95: break;
        case 40: 
          { return HamletTypes.ID_ATTRIBUTE;
          }
        case 96: break;
        case 14: 
          { return XmlTokenType.XML_START_TAG_START;
          }
        case 97: break;
        case 7: 
          { return XmlTokenType.XML_WHITE_SPACE;
          }
        case 98: break;
        case 47: 
          { return XmlTokenType.XML_ENTITY_REF_TOKEN;
          }
        case 99: break;
        case 29: 
          { handleInterpolation(); return HamletTypes.LANG_INTERPOLATE_OPEN;
          }
        case 100: break;
        case 26: 
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 101: break;
        case 50: 
          { return elTokenType2;
          }
        case 102: break;
        case 23: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
          }
        case 103: break;
        case 19: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 104: break;
        case 20: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 105: break;
        case 13: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
          }
        case 106: break;
        case 32: 
          { yybegin(START_TAG_NAME2); yypushback(yylength());
          }
        case 107: break;
        case 9: 
          { return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 108: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
