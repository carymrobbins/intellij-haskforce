/* The following code was generated by JFlex 1.4.3 on 4/19/15 10:14 AM */

package com.haskforce.highlighting;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.haskforce.psi.HaskellTypes.*;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.util.containers.Stack;

/**
 * Hand-written lexer used for syntax highlighting in IntelliJ.
 *
 * We currently share token names with the grammar-kit generated
 * parser.
 *
 * Derived from the lexer generated by Grammar-Kit at 29 April 2014.
 */


/*
 * To generate sources from this file -
 *   Click Tools->Run JFlex generator.
 *
 * Command-Shift-G should be the keyboard shortcut, but that is the same
 * shortcut as find previous.
 */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/19/15 10:14 AM from the specification file
 * <tt>/home/developer/sources/intellij-haskforce-for-prs/src/com/haskforce/highlighting/_HaskellSyntaxHighlightingLexer.flex</tt>
 */
public class _HaskellSyntaxHighlightingLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INCOMMENT = 2;
  public static final int INSHEBANG = 12;
  public static final int YYINITIAL = 0;
  public static final int INQUASIQUOTEHEAD = 10;
  public static final int INQUASIQUOTE = 8;
  public static final int INPRAGMA = 6;
  public static final int INSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\50\1\3\1\1\22\0\1\3\1\51\1\71"+
    "\1\14\1\74\1\47\1\61\1\5\1\62\1\63\1\47\1\27\1\65"+
    "\1\30\1\6\1\47\1\15\7\20\2\12\1\75\1\66\1\100\1\77"+
    "\1\102\1\47\1\104\4\24\1\26\1\24\10\10\1\17\10\10\1\22"+
    "\2\10\1\67\1\13\1\70\1\31\1\4\1\11\1\44\1\23\1\41"+
    "\1\37\1\25\1\33\1\45\1\56\1\32\2\7\1\34\1\46\1\36"+
    "\1\16\1\42\1\57\1\43\1\35\1\52\1\40\1\53\1\55\1\21"+
    "\1\54\1\7\1\72\1\64\1\73\1\105\u2111\0\1\101\1\0\1\103"+
    "\17\0\2\47\56\0\1\106\55\0\1\60\66\0\1\76\u03cd\0\1\47"+
    "\u0315\0\2\47\ud6e3\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\5\1\11\2\6\2\5\15\6"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\5\1\26\1\27\1\30\1\5"+
    "\1\31\1\32\1\33\1\34\1\35\4\36\1\37\2\40"+
    "\1\41\3\42\4\43\1\44\1\2\1\1\1\45\1\46"+
    "\1\47\1\50\1\6\1\0\1\51\1\0\1\52\3\0"+
    "\1\11\1\0\1\53\5\0\1\54\1\55\2\0\1\56"+
    "\2\6\1\5\1\32\1\57\1\60\5\6\1\61\5\6"+
    "\1\62\7\6\1\63\1\64\3\0\1\65\1\66\1\0"+
    "\1\67\1\0\1\70\1\71\1\27\1\35\1\31\1\72"+
    "\1\73\1\0\2\37\1\0\1\37\1\0\1\74\3\0"+
    "\2\75\1\6\1\76\1\77\1\11\1\77\3\0\1\100"+
    "\4\0\2\11\2\6\1\0\1\101\2\5\5\6\1\102"+
    "\6\6\1\103\1\6\1\104\5\6\1\0\1\105\1\0"+
    "\1\106\1\67\2\0\1\107\1\0\1\110\1\0\1\75"+
    "\1\77\7\0\1\6\1\111\1\112\11\6\1\113\1\6"+
    "\1\114\1\6\1\115\1\116\3\6\1\67\1\77\1\117"+
    "\4\0\1\6\1\120\10\6\1\121\1\6\1\122\2\6"+
    "\1\123\3\0\1\124\1\125\1\126\1\6\1\127\1\6"+
    "\1\13\1\130\3\6\1\131\1\132\2\6\1\133\1\134"+
    "\1\135\2\6\1\136\1\137\1\6\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u027f\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a"+
    "\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852"+
    "\0\u0899\0\u08e0\0\u0927\0\u096e\0\u01f1\0\u09b5\0\u01f1\0\u09fc"+
    "\0\u01f1\0\u01f1\0\u0a43\0\u01f1\0\u01f1\0\u0a8a\0\u01f1\0\u0ad1"+
    "\0\u0b18\0\u01f1\0\u0b5f\0\u0ba6\0\u01f1\0\u01f1\0\u058c\0\u058c"+
    "\0\u01f1\0\u0bed\0\u0c34\0\u0c7b\0\u01f1\0\u0cc2\0\u01f1\0\u0d09"+
    "\0\u01f1\0\u0d50\0\u0d97\0\u01f1\0\u0dde\0\u0e25\0\u0e6c\0\u01f1"+
    "\0\u0eb3\0\u0efa\0\u027f\0\u01f1\0\u01f1\0\u0f41\0\u01f1\0\u0f88"+
    "\0\u0fcf\0\u01f1\0\u1016\0\u058c\0\u105d\0\u10a4\0\u10eb\0\u1132"+
    "\0\u1179\0\u058c\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u058c"+
    "\0\u01f1\0\u1323\0\u136a\0\u0f88\0\u13b1\0\u13f8\0\u143f\0\u058c"+
    "\0\u0f88\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u0f88"+
    "\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u0f88\0\u1793\0\u17da"+
    "\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u01f1\0\u01f1\0\u1984"+
    "\0\u19cb\0\u1a12\0\u01f1\0\u1a59\0\u1aa0\0\u1aa0\0\u1ae7\0\u01f1"+
    "\0\u1b2e\0\u1b2e\0\u058c\0\u058c\0\u01f1\0\u01f1\0\u1b75\0\u1bbc"+
    "\0\u1c03\0\u1c4a\0\u01f1\0\u1c91\0\u01f1\0\u1cd8\0\u1d1f\0\u1d66"+
    "\0\u1dad\0\u1df4\0\u1e3b\0\u01f1\0\u1e82\0\u01f1\0\u1ec9\0\u1f10"+
    "\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148"+
    "\0\u218f\0\u21d6\0\u221d\0\u2264\0\u01f1\0\u22ab\0\u22f2\0\u2339"+
    "\0\u2380\0\u23c7\0\u240e\0\u2455\0\u0f88\0\u249c\0\u24e3\0\u252a"+
    "\0\u2571\0\u25b8\0\u25ff\0\u0f88\0\u2646\0\u0f88\0\u268d\0\u26d4"+
    "\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u01f1\0\u2837\0\u01f1\0\u287e"+
    "\0\u28c5\0\u1c03\0\u01f1\0\u290c\0\u01f1\0\u0e6c\0\u01f1\0\u2953"+
    "\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b"+
    "\0\u0f88\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c"+
    "\0\u2dc3\0\u2e0a\0\u2e51\0\u0f88\0\u2e98\0\u0f88\0\u2edf\0\u0f88"+
    "\0\u0f88\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u01f1\0\u1fe5\0\u3042"+
    "\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\u327a"+
    "\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u0f88\0\u3424\0\u0f88"+
    "\0\u346b\0\u34b2\0\u1fe5\0\u34f9\0\u3540\0\u3587\0\u0f88\0\u0f88"+
    "\0\u0f88\0\u35ce\0\u0f88\0\u3615\0\u0f88\0\u0f88\0\u365c\0\u36a3"+
    "\0\u36ea\0\u0f88\0\u0f88\0\u3731\0\u3778\0\u0f88\0\u0f88\0\u0f88"+
    "\0\u37bf\0\u3806\0\u0f88\0\u0f88\0\u384d\0\u0f88";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\3\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\16\1\20\1\15"+
    "\1\16\1\15\1\16\1\25\1\16\1\26\1\27\1\26"+
    "\1\30\1\31\1\32\1\15\1\33\1\34\1\15\1\35"+
    "\1\15\1\36\1\37\1\15\1\40\1\26\1\10\1\26"+
    "\1\41\2\15\1\42\1\43\1\44\1\45\1\26\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\26"+
    "\1\66\1\67\1\70\1\71\30\72\1\73\41\72\1\74"+
    "\1\75\13\72\2\76\1\77\10\76\1\100\55\76\1\101"+
    "\15\76\14\102\1\103\13\102\1\104\42\102\1\104\13\102"+
    "\64\105\1\106\2\105\1\107\1\110\16\105\1\10\2\111"+
    "\1\112\1\113\1\10\1\114\1\15\1\16\5\10\1\15"+
    "\1\16\1\10\1\15\1\16\1\15\1\16\1\15\1\16"+
    "\3\10\15\15\3\10\6\15\4\10\1\115\22\10\1\116"+
    "\2\117\104\116\110\0\3\11\107\0\2\120\1\0\2\120"+
    "\1\0\1\120\2\0\12\120\3\0\15\120\3\0\6\120"+
    "\27\0\5\121\1\122\5\121\1\123\73\121\6\0\1\124"+
    "\4\0\2\26\12\0\3\26\15\0\1\26\1\0\1\26"+
    "\7\0\1\26\2\0\1\26\7\0\2\26\1\0\2\26"+
    "\1\0\1\26\1\0\2\26\5\0\2\16\1\125\2\16"+
    "\1\0\1\16\2\0\12\16\3\0\15\16\3\0\6\16"+
    "\33\0\1\126\2\0\2\126\1\0\1\126\2\0\12\126"+
    "\3\0\15\126\3\0\6\126\35\0\1\127\3\0\1\20"+
    "\1\0\1\130\1\20\2\0\1\20\4\0\2\131\66\0"+
    "\1\26\4\0\2\26\12\0\3\26\15\0\1\26\1\0"+
    "\1\26\7\0\1\132\2\0\1\26\7\0\2\26\1\0"+
    "\2\26\1\0\1\26\1\0\2\26\7\0\1\26\4\0"+
    "\2\26\10\0\1\133\1\0\3\26\1\134\4\0\1\135"+
    "\1\136\1\0\1\137\4\0\1\26\1\0\1\140\7\0"+
    "\1\26\1\0\1\141\1\26\7\0\2\26\1\0\2\26"+
    "\1\0\1\26\1\0\2\26\7\0\1\127\3\0\1\20"+
    "\1\0\1\130\1\20\2\142\1\20\2\143\2\0\2\131"+
    "\64\0\2\120\1\0\2\120\1\0\1\120\2\0\12\120"+
    "\3\0\1\120\1\144\13\120\3\0\6\120\33\0\2\120"+
    "\1\0\2\120\1\0\1\120\2\0\4\120\1\145\5\120"+
    "\3\0\2\120\1\146\12\120\3\0\6\120\35\0\1\26"+
    "\4\0\2\26\12\0\3\26\15\0\1\26\1\0\1\26"+
    "\7\0\1\26\2\0\1\26\7\0\2\26\1\0\2\26"+
    "\1\0\1\26\1\0\2\26\7\0\1\26\4\0\2\26"+
    "\12\0\1\26\1\147\1\26\15\0\1\26\1\0\1\26"+
    "\7\0\1\26\2\0\1\26\7\0\2\26\1\0\2\26"+
    "\1\0\1\150\1\0\2\26\5\0\2\120\1\0\2\120"+
    "\1\0\1\120\2\0\12\120\3\0\1\120\1\151\2\120"+
    "\1\152\7\120\1\153\3\0\6\120\33\0\2\120\1\0"+
    "\2\120\1\0\1\120\2\0\1\120\1\154\10\120\3\0"+
    "\12\120\1\155\2\120\3\0\6\120\33\0\2\120\1\0"+
    "\2\120\1\0\1\120\2\0\10\120\1\156\1\120\3\0"+
    "\15\120\3\0\6\120\33\0\2\120\1\0\2\120\1\0"+
    "\1\120\2\0\10\120\1\157\1\120\3\0\15\120\3\0"+
    "\6\120\33\0\2\120\1\0\2\120\1\0\1\120\2\0"+
    "\1\120\1\160\6\120\1\161\1\120\3\0\12\120\1\162"+
    "\2\120\3\0\6\120\33\0\2\120\1\0\2\120\1\0"+
    "\1\120\2\0\12\120\3\0\2\120\1\163\7\120\1\164"+
    "\2\120\3\0\6\120\33\0\2\120\1\0\2\120\1\0"+
    "\1\120\2\0\10\120\1\165\1\120\3\0\15\120\3\0"+
    "\6\120\33\0\2\120\1\0\2\120\1\0\1\120\2\0"+
    "\12\120\3\0\3\120\1\166\11\120\3\0\6\120\33\0"+
    "\2\120\1\0\2\120\1\0\1\120\2\0\1\120\1\167"+
    "\10\120\3\0\5\120\1\170\7\120\3\0\6\120\33\0"+
    "\2\120\1\0\2\120\1\0\1\120\2\0\12\120\3\0"+
    "\15\120\3\0\2\120\1\171\1\120\1\172\1\120\33\0"+
    "\2\120\1\0\2\120\1\0\1\120\2\0\12\120\3\0"+
    "\15\120\3\0\4\120\1\173\1\120\33\0\2\120\1\0"+
    "\2\120\1\0\1\120\2\0\12\120\3\0\1\174\14\120"+
    "\3\0\6\120\33\0\2\120\1\0\2\120\1\0\1\120"+
    "\2\0\12\120\3\0\6\120\1\175\6\120\3\0\6\120"+
    "\43\0\1\176\100\0\1\26\4\0\2\26\12\0\3\26"+
    "\15\0\1\26\1\0\1\26\7\0\1\26\2\0\1\26"+
    "\3\0\1\177\3\0\2\26\1\0\2\26\1\0\1\26"+
    "\1\0\2\26\5\0\1\200\2\0\1\201\1\202\5\0"+
    "\1\201\1\202\1\0\1\201\1\202\1\201\1\202\1\201"+
    "\1\202\3\0\15\201\3\0\6\201\4\0\1\203\52\0"+
    "\1\204\62\0\1\205\1\0\1\26\1\206\1\207\2\0"+
    "\2\26\1\0\1\206\1\207\1\0\1\206\1\207\1\206"+
    "\1\207\1\206\1\207\3\26\15\206\1\26\1\0\1\26"+
    "\6\206\1\0\1\26\1\210\1\0\1\26\7\0\2\26"+
    "\1\0\2\26\1\0\1\26\1\0\2\26\7\0\1\211"+
    "\4\0\2\211\12\0\3\211\15\0\1\211\1\0\1\211"+
    "\7\0\1\211\2\0\1\211\7\0\1\211\1\212\1\0"+
    "\2\211\1\0\1\211\1\0\2\211\7\0\1\26\4\0"+
    "\2\26\12\0\3\26\15\0\1\26\1\0\1\26\7\0"+
    "\1\26\2\0\1\26\7\0\2\26\1\0\2\26\1\0"+
    "\1\213\1\0\2\26\7\0\1\26\4\0\2\26\12\0"+
    "\1\26\1\214\1\26\15\0\1\26\1\0\1\26\7\0"+
    "\1\26\2\0\1\26\7\0\2\26\1\0\2\26\1\0"+
    "\1\26\1\0\2\26\1\0\30\72\1\0\41\72\2\0"+
    "\13\72\73\0\1\215\43\0\1\216\56\0\2\76\1\0"+
    "\10\76\1\217\55\76\1\0\15\76\1\0\1\220\1\221"+
    "\1\222\3\0\1\223\3\0\1\223\2\0\1\223\2\0"+
    "\1\223\1\0\1\223\1\0\1\223\4\0\15\223\1\0"+
    "\1\222\1\0\6\223\11\0\1\76\15\0\14\102\1\0"+
    "\13\102\1\0\42\102\1\0\13\102\30\0\1\224\56\0"+
    "\64\105\1\0\2\105\2\0\16\105\70\0\1\225\22\0"+
    "\1\226\2\0\1\227\1\230\5\0\1\227\1\230\1\0"+
    "\1\227\1\230\1\227\1\230\1\227\1\230\3\0\15\227"+
    "\3\0\6\227\30\0\2\111\107\0\1\112\103\0\1\116"+
    "\2\0\104\116\4\0\5\120\1\0\1\120\2\0\12\120"+
    "\3\0\15\120\3\0\6\120\34\0\1\231\101\0\2\121"+
    "\1\0\2\121\1\232\101\121\7\0\1\233\1\16\5\0"+
    "\1\233\1\16\1\0\1\233\1\16\1\233\1\16\1\233"+
    "\1\16\3\0\15\233\3\0\6\233\33\0\5\126\1\234"+
    "\1\126\2\0\12\126\3\0\15\126\3\0\6\126\41\0"+
    "\1\235\2\0\1\235\2\0\1\235\102\0\1\236\104\0"+
    "\1\237\2\0\1\237\2\0\1\237\6\0\2\240\112\0"+
    "\1\241\1\0\1\242\103\0\1\243\2\0\1\244\75\0"+
    "\1\245\117\0\1\246\113\0\1\247\60\0\1\250\2\0"+
    "\1\250\100\0\1\251\2\0\1\251\2\0\1\251\2\0"+
    "\4\251\4\0\1\251\3\0\1\251\1\0\1\251\2\0"+
    "\1\251\46\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\10\120\1\252\4\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\3\120\1\253\11\120\3\0"+
    "\6\120\27\0\1\254\2\255\3\254\1\256\4\254\2\256"+
    "\12\254\2\256\1\257\15\254\1\256\1\254\1\256\7\254"+
    "\1\256\2\254\1\256\7\254\2\256\1\254\2\256\1\254"+
    "\1\256\1\254\2\256\1\254\4\0\5\120\1\0\1\120"+
    "\2\0\12\120\3\0\1\120\1\260\1\120\1\261\11\120"+
    "\3\0\6\120\33\0\5\120\1\0\1\120\2\0\12\120"+
    "\3\0\10\120\1\262\4\120\3\0\6\120\33\0\5\120"+
    "\1\0\1\120\2\0\12\120\3\0\11\120\1\263\3\120"+
    "\3\0\6\120\33\0\5\120\1\0\1\120\2\0\12\120"+
    "\3\0\14\120\1\264\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\15\120\3\0\1\265\5\120"+
    "\33\0\5\120\1\0\1\120\2\0\12\120\3\0\15\120"+
    "\3\0\3\120\1\266\2\120\33\0\5\120\1\0\1\120"+
    "\2\0\12\120\3\0\1\120\1\267\7\120\1\270\3\120"+
    "\3\0\6\120\33\0\5\120\1\0\1\120\2\0\12\120"+
    "\3\0\15\120\3\0\1\271\5\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\12\120\1\272\2\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\3\120\1\273\11\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\7\120\1\274\5\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\5\120\1\275\7\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\1\120\1\276\10\120\3\0\15\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\10\120\1\277\4\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\10\120\1\300\1\120\3\0\15\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\10\120\1\301"+
    "\1\120\3\0\15\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\5\120\1\302\7\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\12\120\1\303\2\120\3\0\6\120\33\0\2\304\1\0"+
    "\2\304\1\0\1\304\2\0\12\304\3\0\15\304\3\0"+
    "\6\304\33\0\2\304\1\0\2\304\1\0\1\304\2\0"+
    "\12\304\3\0\15\304\3\0\6\304\4\0\1\305\26\0"+
    "\2\202\1\306\2\202\1\0\1\202\2\0\12\202\3\0"+
    "\15\202\3\0\6\202\43\0\1\307\76\0\2\310\1\0"+
    "\2\310\1\0\1\310\2\0\12\310\3\0\15\310\3\0"+
    "\6\310\33\0\2\207\1\311\2\207\1\0\1\207\2\0"+
    "\12\207\3\0\15\207\3\0\6\207\35\0\1\211\4\0"+
    "\2\211\12\0\3\211\15\0\1\211\1\0\1\211\7\0"+
    "\1\211\2\0\1\211\7\0\2\211\1\0\2\211\1\0"+
    "\1\211\1\0\2\211\2\0\1\222\1\312\1\222\44\0"+
    "\1\222\20\0\1\76\16\0\1\222\1\221\1\222\44\0"+
    "\1\222\37\0\3\312\7\0\1\76\34\0\1\312\37\0"+
    "\1\222\1\312\1\222\44\0\1\222\131\0\1\313\17\0"+
    "\2\314\1\0\2\314\1\0\1\314\2\0\12\314\3\0"+
    "\15\314\3\0\6\314\33\0\2\314\1\0\2\314\1\0"+
    "\1\314\2\0\12\314\3\0\15\314\3\0\6\314\4\0"+
    "\1\315\26\0\2\230\1\316\2\230\1\0\1\230\2\0"+
    "\12\230\3\0\15\230\3\0\6\230\43\0\1\317\77\0"+
    "\1\231\6\0\1\317\76\0\2\233\1\0\2\233\1\0"+
    "\1\233\2\0\12\233\3\0\15\233\3\0\6\233\41\0"+
    "\1\235\1\0\1\320\1\235\2\0\1\235\4\0\2\131"+
    "\72\0\1\237\1\0\1\320\1\237\2\0\1\237\100\0"+
    "\1\237\2\0\1\237\2\0\1\237\120\0\1\321\2\0"+
    "\1\322\110\0\1\323\47\0\1\243\2\0\104\243\41\0"+
    "\1\324\100\0\1\325\112\0\1\326\113\0\1\327\56\0"+
    "\1\130\1\250\2\0\1\250\100\0\1\251\1\0\1\130"+
    "\1\251\2\0\1\251\2\0\4\251\4\0\1\251\3\0"+
    "\1\251\1\0\1\251\2\0\1\251\46\0\5\120\1\0"+
    "\1\120\2\0\1\120\1\330\10\120\3\0\15\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\10\120\1\331"+
    "\1\120\3\0\15\120\3\0\6\120\27\0\1\254\1\0"+
    "\1\255\105\254\1\0\1\255\3\254\1\256\4\254\2\256"+
    "\12\254\3\256\15\254\1\256\1\254\1\256\7\254\1\256"+
    "\2\254\1\256\7\254\2\256\1\254\2\256\1\254\1\256"+
    "\1\254\2\256\1\254\1\332\2\0\3\332\1\257\4\332"+
    "\2\257\12\332\3\257\15\332\1\257\1\332\1\257\7\332"+
    "\1\257\2\332\1\257\7\332\2\257\1\332\2\257\1\332"+
    "\1\257\1\332\2\257\1\332\4\0\5\120\1\0\1\120"+
    "\2\0\12\120\3\0\1\333\14\120\3\0\6\120\33\0"+
    "\5\120\1\0\1\120\2\0\12\120\3\0\15\120\3\0"+
    "\1\334\5\120\33\0\5\120\1\0\1\120\2\0\1\120"+
    "\1\335\10\120\3\0\15\120\3\0\6\120\33\0\5\120"+
    "\1\0\1\120\2\0\10\120\1\336\1\120\3\0\12\120"+
    "\1\337\2\120\3\0\6\120\33\0\5\120\1\0\1\120"+
    "\2\0\12\120\3\0\1\340\14\120\3\0\6\120\33\0"+
    "\5\120\1\0\1\120\2\0\12\120\3\0\15\120\3\0"+
    "\1\341\5\120\33\0\5\120\1\0\1\120\2\0\12\120"+
    "\3\0\12\120\1\342\2\120\3\0\6\120\33\0\5\120"+
    "\1\0\1\120\2\0\12\120\3\0\1\343\14\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\12\120\1\344\2\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\3\120\1\345\11\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\10\120\1\346"+
    "\1\120\3\0\15\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\6\120\1\347\6\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\10\120\1\350"+
    "\1\120\3\0\15\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\4\120\1\351\10\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\11\120\1\352\3\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\1\353\14\120\3\0\6\120"+
    "\33\0\5\120\1\0\1\120\2\0\12\120\3\0\2\120"+
    "\1\354\12\120\3\0\6\120\33\0\5\304\1\0\1\304"+
    "\2\0\12\304\3\0\15\304\3\0\6\304\4\0\1\305"+
    "\26\0\1\200\2\0\1\201\1\202\5\0\1\201\1\202"+
    "\1\0\1\201\1\202\1\201\1\202\1\201\1\202\3\0"+
    "\15\201\3\0\6\201\33\0\5\310\1\0\1\310\2\0"+
    "\12\310\3\0\15\310\3\0\6\310\36\0\1\355\1\207"+
    "\5\0\1\355\1\207\1\0\1\355\1\207\1\355\1\207"+
    "\1\355\1\207\3\0\15\355\3\0\6\355\33\0\5\314"+
    "\1\0\1\314\2\0\12\314\3\0\15\314\3\0\6\314"+
    "\4\0\1\315\36\0\1\356\125\0\1\243\100\0\1\357"+
    "\113\0\1\360\110\0\1\361\104\0\1\362\101\0\1\321"+
    "\126\0\1\363\45\0\5\120\1\0\1\120\2\0\12\120"+
    "\3\0\11\120\1\364\3\120\3\0\6\120\27\0\1\332"+
    "\2\0\104\332\4\0\5\120\1\0\1\120\2\0\4\120"+
    "\1\365\5\120\3\0\15\120\3\0\6\120\33\0\5\120"+
    "\1\0\1\120\2\0\12\120\3\0\12\120\1\366\2\120"+
    "\3\0\6\120\33\0\5\120\1\0\1\120\2\0\12\120"+
    "\3\0\11\120\1\367\3\120\3\0\6\120\33\0\5\120"+
    "\1\0\1\120\2\0\12\120\3\0\1\370\14\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\2\120\1\371\12\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\2\120\1\372\12\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\15\120\3\0\2\120\1\373\3\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\6\120\1\374\6\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\15\120\3\0\1\120\1\375\4\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\3\120\1\376\11\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\2\120\1\377\12\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\10\120\1\u0100\1\120\3\0\15\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\4\120\1\u0101\10\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\1\u0102\14\120\3\0\6\120"+
    "\33\0\2\355\1\0\2\355\1\0\1\355\2\0\12\355"+
    "\3\0\15\355\3\0\6\355\62\0\1\u0103\113\0\1\u0104"+
    "\104\0\1\u0105\116\0\1\u0106\44\0\5\120\1\0\1\120"+
    "\2\0\12\120\3\0\15\120\3\0\1\u0107\5\120\33\0"+
    "\5\120\1\0\1\120\2\0\12\120\3\0\2\120\1\u0108"+
    "\6\120\1\u0109\3\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\4\120\1\u010a\10\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\15\120\3\0\1\u010b\5\120\33\0\5\120\1\0\1\120"+
    "\2\0\12\120\3\0\13\120\1\u010c\1\120\3\0\6\120"+
    "\33\0\5\120\1\0\1\120\2\0\12\120\3\0\2\120"+
    "\1\u010d\12\120\3\0\6\120\33\0\5\120\1\0\1\120"+
    "\2\0\12\120\3\0\15\120\3\0\2\120\1\u010e\3\120"+
    "\33\0\5\120\1\0\1\120\2\0\12\120\3\0\10\120"+
    "\1\u010f\4\120\3\0\6\120\33\0\5\120\1\0\1\120"+
    "\2\0\12\120\3\0\2\120\1\u0110\12\120\3\0\6\120"+
    "\33\0\5\120\1\0\1\120\2\0\12\120\3\0\1\u0111"+
    "\14\120\3\0\6\120\33\0\5\120\1\0\1\120\2\0"+
    "\10\120\1\u0112\1\120\3\0\15\120\3\0\6\120\33\0"+
    "\5\120\1\0\1\120\2\0\12\120\3\0\13\120\1\u0113"+
    "\1\120\3\0\6\120\33\0\5\120\1\0\1\120\2\0"+
    "\12\120\3\0\1\120\1\u0114\13\120\3\0\6\120\66\0"+
    "\1\u0105\74\0\1\243\125\0\1\243\46\0\5\120\1\0"+
    "\1\120\2\0\12\120\3\0\7\120\1\u0115\5\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\4\120\1\u0116\10\120\3\0\6\120\33\0\5\120\1\0"+
    "\1\120\2\0\10\120\1\u0117\1\120\3\0\15\120\3\0"+
    "\6\120\33\0\5\120\1\0\1\120\2\0\12\120\3\0"+
    "\15\120\3\0\1\u0118\5\120\33\0\5\120\1\0\1\120"+
    "\2\0\12\120\3\0\4\120\1\u0119\10\120\3\0\6\120"+
    "\33\0\5\120\1\0\1\120\2\0\12\120\3\0\1\u011a"+
    "\14\120\3\0\6\120\33\0\5\120\1\0\1\120\2\0"+
    "\10\120\1\u011b\1\120\3\0\15\120\3\0\6\120\33\0"+
    "\5\120\1\0\1\120\2\0\12\120\3\0\13\120\1\u011c"+
    "\1\120\3\0\6\120\33\0\5\120\1\0\1\120\2\0"+
    "\10\120\1\u011d\1\120\3\0\15\120\3\0\6\120\33\0"+
    "\5\120\1\0\1\120\2\0\12\120\3\0\5\120\1\u011e"+
    "\7\120\3\0\6\120\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\34\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\2\11\1\1\1\11\2\1\1\11\2\1\2\11"+
    "\2\1\1\11\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\3\1\1\11\3\1\2\11\1\1\1\11"+
    "\1\1\1\0\1\11\1\0\1\1\3\0\1\1\1\0"+
    "\1\1\5\0\1\1\1\11\2\0\32\1\2\11\3\0"+
    "\1\11\1\1\1\0\1\1\1\0\1\11\4\1\2\11"+
    "\1\0\2\1\1\0\1\11\1\0\1\11\3\0\3\1"+
    "\1\11\1\1\1\11\1\1\3\0\1\1\4\0\4\1"+
    "\1\0\1\11\26\1\1\0\1\11\1\0\1\11\1\1"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\1\1\7\0"+
    "\26\1\1\11\1\1\4\0\20\1\3\0\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[286];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int commentLevel;
  private int qqLevel;
  private int indent;
  private Stack<Integer> stateStack = ContainerUtil.newStack();
  private int yychar;
  // Shared varsym token to ensure that shebang lex failures return the same
  // token as normal varsyms.
  public static final IElementType SHARED_VARSYM_TOKEN = VARSYMTOK;
  public _HaskellSyntaxHighlightingLexer() {
    this((java.io.Reader)null);
  }


  public _HaskellSyntaxHighlightingLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HaskellSyntaxHighlightingLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return BACKSLASH;
          }
        case 97: break;
        case 96: 
          { return QUALIFIED;
          }
        case 98: break;
        case 67: 
          { return RECTOK;
          }
        case 99: break;
        case 66: 
          { return LET;
          }
        case 100: break;
        case 12: 
          { return LPAREN;
          }
        case 101: break;
        case 62: 
          { return INFIXVARID;
          }
        case 102: break;
        case 11: 
          { return FORALLTOKEN;
          }
        case 103: break;
        case 24: 
          { return EQUALS;
          }
        case 104: break;
        case 45: 
          { return RUNBOXPAREN;
          }
        case 105: break;
        case 72: 
          { yypushback(yytext().length() - 1);
                                qqLevel++;
                                stateStack.push(INQUASIQUOTE);
                                yybegin(INQUASIQUOTEHEAD);
                                return QQTEXT;
          }
        case 106: break;
        case 30: 
          { return COMMENTTEXT;
          }
        case 107: break;
        case 18: 
          { return RBRACKET;
          }
        case 108: break;
        case 33: 
          { yybegin(YYINITIAL);
                                        return DOUBLEQUOTE;
          }
        case 109: break;
        case 22: 
          { return COLON;
          }
        case 110: break;
        case 25: 
          { return LEFTARROW;
          }
        case 111: break;
        case 81: 
          { return CLASSTOKEN;
          }
        case 112: break;
        case 34: 
          { return PRAGMA;
          }
        case 113: break;
        case 94: 
          { return INSTANCE;
          }
        case 114: break;
        case 9: 
          { return INTEGERTOKEN;
          }
        case 115: break;
        case 42: 
          { return DOUBLEPERIOD;
          }
        case 116: break;
        case 70: 
          { yybegin(INPRAGMA);
                        return OPENPRAGMA;
          }
        case 117: break;
        case 53: 
          { return LTHOPEN;
          }
        case 118: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 119: break;
        case 84: 
          { return EXPORTTOKEN;
          }
        case 120: break;
        case 40: 
          { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 121: break;
        case 19: 
          { yybegin(INSTRING);
                        return DOUBLEQUOTE;
          }
        case 122: break;
        case 17: 
          { return LBRACKET;
          }
        case 123: break;
        case 54: 
          { commentLevel = 1;
                        yybegin(INCOMMENT);
                        return OPENCOM;
          }
        case 124: break;
        case 4: 
          { return SINGLEQUOTE;
          }
        case 125: break;
        case 95: 
          { return DERIVING;
          }
        case 126: break;
        case 16: 
          { return SEMICOLON;
          }
        case 127: break;
        case 15: 
          { return COMMA;
          }
        case 128: break;
        case 88: 
          { return FAMILYTOKEN;
          }
        case 129: break;
        case 75: 
          { return DATA;
          }
        case 130: break;
        case 7: 
          { return CONIDREGEXP;
          }
        case 131: break;
        case 39: 
          { yybegin(YYINITIAL); return SHEBANGPATH;
          }
        case 132: break;
        case 41: 
          { return THQUOTE;
          }
        case 133: break;
        case 59: 
          { commentLevel++;
                        return COMMENTTEXT;
          }
        case 134: break;
        case 63: 
          { return FLOATTOKEN;
          }
        case 135: break;
        case 6: 
          { return VARIDREGEXP;
          }
        case 136: break;
        case 32: 
          { return BADSTRINGTOKEN;
          }
        case 137: break;
        case 77: 
          { return TYPE;
          }
        case 138: break;
        case 37: 
          { return PERIOD;
          }
        case 139: break;
        case 60: 
          { qqLevel--;
                                yybegin(stateStack.pop());
                                if (qqLevel == 0) {
                                    return RTHCLOSE;
                                }
                                return QQTEXT;
          }
        case 140: break;
        case 58: 
          { commentLevel--;
                        if (commentLevel == 0) {
                            yybegin(YYINITIAL);
                            return CLOSECOM;
                        }
                        return COMMENTTEXT;
          }
        case 141: break;
        case 5: 
          { return SHARED_VARSYM_TOKEN;
          }
        case 142: break;
        case 68: 
          { return MDOTOK;
          }
        case 143: break;
        case 83: 
          { return CPPENDIF;
          }
        case 144: break;
        case 44: 
          { if (yychar == 0) {
                            yybegin(INSHEBANG);
                            return SHEBANGSTART;
                        }
                        return SHARED_VARSYM_TOKEN;
          }
        case 145: break;
        case 93: 
          { return DEFAULT;
          }
        case 146: break;
        case 49: 
          { return DO;
          }
        case 147: break;
        case 48: 
          { return IN;
          }
        case 148: break;
        case 64: 
          { return CPPIF;
          }
        case 149: break;
        case 65: 
          { return COMMENT;
          }
        case 150: break;
        case 92: 
          { return NEWTYPE;
          }
        case 151: break;
        case 91: 
          { return FOREIGN;
          }
        case 152: break;
        case 21: 
          { return RBRACE;
          }
        case 153: break;
        case 8: 
          { return BACKTICK;
          }
        case 154: break;
        case 90: 
          { return HIDING;
          }
        case 155: break;
        case 57: 
          { return CONSYMTOK;
          }
        case 156: break;
        case 46: 
          { return OF;
          }
        case 157: break;
        case 80: 
          { return INFIX;
          }
        case 158: break;
        case 3: 
          { return UNDERSCORE;
          }
        case 159: break;
        case 27: 
          { return AMPERSAT;
          }
        case 160: break;
        case 55: 
          { return IDSPLICE;
          }
        case 161: break;
        case 20: 
          { return LBRACE;
          }
        case 162: break;
        case 51: 
          { return LUNBOXPAREN;
          }
        case 163: break;
        case 28: 
          { return TILDE;
          }
        case 164: break;
        case 38: 
          { yybegin(INQUASIQUOTE);
                                return PIPE;
          }
        case 165: break;
        case 74: 
          { return HADDOCK;
          }
        case 166: break;
        case 14: 
          { return PIPE;
          }
        case 167: break;
        case 29: 
          { return DOUBLEARROW;
          }
        case 168: break;
        case 36: 
          { indent = 0;
                                return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 169: break;
        case 82: 
          { return WHERE;
          }
        case 170: break;
        case 85: 
          { return INFIXL;
          }
        case 171: break;
        case 87: 
          { return IMPORT;
          }
        case 172: break;
        case 69: 
          { yypushback(yytext().length() - 1);
                            qqLevel++;
                            stateStack.push(YYINITIAL);
                            yybegin(INQUASIQUOTEHEAD);
                            return QQOPEN;
          }
        case 173: break;
        case 31: 
          { return STRINGTOKEN;
          }
        case 174: break;
        case 86: 
          { return INFIXR;
          }
        case 175: break;
        case 73: 
          { return ELSE;
          }
        case 176: break;
        case 35: 
          { return QQTEXT;
          }
        case 177: break;
        case 47: 
          { return IF;
          }
        case 178: break;
        case 79: 
          { return CPPELSE;
          }
        case 179: break;
        case 78: 
          { return THEN;
          }
        case 180: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 181: break;
        case 26: 
          { return RIGHTARROW;
          }
        case 182: break;
        case 61: 
          { return CHARTOKEN;
          }
        case 183: break;
        case 71: 
          { yybegin(YYINITIAL);
                        return CLOSEPRAGMA;
          }
        case 184: break;
        case 76: 
          { return CASE;
          }
        case 185: break;
        case 13: 
          { return RPAREN;
          }
        case 186: break;
        case 23: 
          { return DOUBLECOLON;
          }
        case 187: break;
        case 52: 
          { return RTHCLOSE;
          }
        case 188: break;
        case 50: 
          { return AS;
          }
        case 189: break;
        case 43: 
          { return NULLCHARACTER;
          }
        case 190: break;
        case 56: 
          { return PARENSPLICE;
          }
        case 191: break;
        case 89: 
          { return MODULETOKEN;
          }
        case 192: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
