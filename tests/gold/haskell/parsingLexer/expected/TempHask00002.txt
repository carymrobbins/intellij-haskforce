HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('FlexibleInstances')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('QuasiQuotes')
WHITE_SPACE ('       ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('TemplateHaskell')
WHITE_SPACE ('   ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TempHask00002')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.Quasi-[ ('[')
HaskellTokenType.varidRegexp ('undefined')
HaskellTokenType.| ('|')
HaskellTokenType.Quasi-stuff ('\nsomething here "hello world"\n')
HaskellTokenType.|] ('|]')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.[| ('[|')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('7')
WHITE_SPACE (' ')
HaskellTokenType.|] ('|]')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.Quasi-[ ('[')
HaskellTokenType.varidRegexp ('d')
HaskellTokenType.| ('|')
HaskellTokenType.Quasi-stuff (' 7 ')
HaskellTokenType.|] ('|]')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.Quasi-[ ('[')
HaskellTokenType.varidRegexp ('t')
HaskellTokenType.| ('|')
HaskellTokenType.Quasi-stuff (' Int ')
HaskellTokenType.|] ('|]')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.Quasi-[ ('[')
HaskellTokenType.varidRegexp ('p')
HaskellTokenType.| ('|')
HaskellTokenType.Quasi-stuff (' 7 ')
HaskellTokenType.|] ('|]')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.$( ('$(')
HaskellTokenType.varidRegexp ('deriveStuff')
WHITE_SPACE (' ')
HaskellTokenType.' (''')
HaskellTokenType.varidRegexp ('f')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.idsplice ('$x')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.'' ('''')
HaskellTokenType.conidRegexp ('T')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
WHITE_SPACE (' ')
HaskellTokenType.Quasi-[ ('[')
HaskellTokenType.varidRegexp ('haskell')
HaskellTokenType.| ('|')
HaskellTokenType.Quasi-stuff ('y')
HaskellTokenType.|] ('|]')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.+ ('+')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType.Synthetic rightbrace ('')