HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('RecordWildCards')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('NamedFieldPuns')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Fun00010')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe')
HaskellTokenType.( ('(')
HaskellTokenType... ('..')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Permissions')
HaskellTokenType.( ('(')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Permissions')
HaskellTokenType., (',')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('readable')
HaskellTokenType., (',')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- :: Permissions -> Bool\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('writable')
HaskellTokenType., (',')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- :: Permissions -> Bool\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('executable')
HaskellTokenType., (',')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- :: Permissions -> Bool\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('searchable')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- :: Permissions -> Bool\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data')
HaskellTokenType.. ('.')
HaskellTokenType.conidRegexp ('GraphViz')
HaskellTokenType.. ('.')
HaskellTokenType.conidRegexp ('Attributes')
HaskellTokenType.. ('.')
HaskellTokenType.conidRegexp ('Colors')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Roc')
HaskellTokenType.{ ('{')
HaskellTokenType.varidRegexp ('url')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('url')
HaskellTokenType.} ('}')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Rac')
HaskellTokenType.{ ('{')
HaskellTokenType... ('..')
HaskellTokenType.} ('}')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fun')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Ruc')
HaskellTokenType.{ ('{')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.} ('}')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.Synthetic rightbrace ('')