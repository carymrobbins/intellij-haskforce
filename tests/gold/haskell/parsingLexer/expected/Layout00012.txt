HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Layout00012')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.type ('type')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('BoundedInt')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('BoundedSuper')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('BoundedSuper')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('UnsignedRep')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.haddock ('-- | Super class to 'BoundedInt'\n')
HaskellTokenType.CPPIF ('#if defined(__GLASGOW_HASKELL__) && __GLASGOW_HASKELL__ >= 708')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.class ('class')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Ord')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Num')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bounded')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Integral')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FiniteBits')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('BoundedSuper')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.#endif ('#endif')
HaskellTokenType.Synthetic rightbrace ('')