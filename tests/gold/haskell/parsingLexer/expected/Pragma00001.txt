HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('OPTIONS_GHC')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('-fglasgow-exts')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('ANN')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('module')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('(Just')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('"A')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('`Maybe')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('String'')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('annotation")')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pragma00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('ANN')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('type')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('(Just')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('"A')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('`Maybe')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('String'')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('annotation")')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Push')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DIM1')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.type ('type')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Vector')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pull')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DIM1')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('DEPRECATED')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('Vector')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('"Use')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('Pull')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('instead"')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('unsafeVector')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('WARNING')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('unsafeVector')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('"This')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('is')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('unsafe;')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('I')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('hope')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('you')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('know')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('what')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('you're')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('doing"')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('INLINE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('unsafeVector')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('safeVector')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('NOINLINE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('[2]')
WHITE_SPACE ('  ')
HaskellTokenType.PRAGMA ('safeVector')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('safeVector2')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('NOINLINE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('[~2]')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('safeVector2')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Eq')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('0')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.- ('-')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('SPECIALISE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('f')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('::')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('Int')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('->')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('b')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('->')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('b')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('-- FIXME: Waiting for https://github.com/haskell-suite/haskell-src-exts/pull/112\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('g')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('INLINE_CONLIKE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('[1]')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('g')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('SPECIALISE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('INLINE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('[~2]')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('h')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('::')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('Int')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('->')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('Int')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('i')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('ANN')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('i')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('(Just')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('"Hello")')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('map2')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('RULES')
WHITE_SPACE ('\n')
HaskellTokenType.PRAGMA ('"map2/map2"')
WHITE_SPACE ('    ')
HaskellTokenType.PRAGMA ('forall')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('f')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('g')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('xs.')
WHITE_SPACE ('  ')
HaskellTokenType.PRAGMA ('map2')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('f')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('(map2')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('g')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('xs)')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('=')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('map2')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('(f.g)')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('xs')
WHITE_SPACE ('\n ')
HaskellTokenType.#-} ('#-}')
HaskellTokenType.Synthetic rightbrace ('')