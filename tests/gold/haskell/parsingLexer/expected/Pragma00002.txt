HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pragma00002')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Vector')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pull')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DIM1')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('UNPACK')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE (' ')
HaskellTokenType.! ('!')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('CORE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('"foo"')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('CORE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('"bar"')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('g')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('SCC')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('"X"')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.integertoken ('1')
HaskellTokenType... ('..')
HaskellTokenType.integertoken ('1000000')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.Synthetic rightbrace ('')
HaskellTokenType.in ('in')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.Synthetic rightbrace ('')