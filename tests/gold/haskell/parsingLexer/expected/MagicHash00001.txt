HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('MagicHash')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MagicHash00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('-- Ripped from Data.List, verify I# constructor is valid.\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.varidRegexp ('findIndices')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Int')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.CPPIFDEF ('#ifdef USE_REPORT_PRELUDE')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('findIndices')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('p')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('i')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('zip')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.integertoken ('0')
HaskellTokenType... ('..')
HaskellTokenType.] (']')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('p')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.#else ('#else')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('-- Efficient definition\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('findIndices')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('p')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ls')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('0#')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ls')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('p')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('I')
HaskellTokenType.# ('#')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.VarsymPlus ('+#')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1#')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('otherwise')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.VarsymPlus ('+#')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1#')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE ('\n')
HaskellTokenType.#endif ('#endif  /* USE_REPORT_PRELUDE */')
HaskellTokenType.Synthetic rightbrace ('')
HaskellTokenType.Synthetic rightbrace ('')