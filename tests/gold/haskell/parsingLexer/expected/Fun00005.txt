HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('MultiParamTypeClasses')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('FlexibleContexts')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('TypeOperators')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('LANGUAGE')
WHITE_SPACE (' ')
HaskellTokenType.PRAGMA ('TypeFamilies')
WHITE_SPACE (' ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Fun00005')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.varidRegexp ('prjF')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Project')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('sub')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Type')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sup')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sup')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sig')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('sub')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Type')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sig')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('prjF')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('prj')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.class ('class')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('AlphaEq')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typeable')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('VarId')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VarId')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('AlphaEq')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Decor')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Info')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typeable')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('VarId')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VarId')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('EvalBind')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Literal')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Type')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':<:')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typed')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Render')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- For debug\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Constrained')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Optimize')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('OptimizeSuper')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('optimizeM')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('OptimizeSuper')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FeldOpts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ASTF')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typeable')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Opt')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('ASTF')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Decor')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Info')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typeable')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('optimizeM')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('opts')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Dict')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exprDict')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('constFold')
WHITE_SPACE (' ')
HaskellTokenType.VarsymPlus ('<$>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('matchTrans')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.\ ('\')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('C'')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('optimizeFeat')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('opts')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('optimizeN')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('OptimizeSuper')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t1')
WHITE_SPACE (' ')
HaskellTokenType.~ ('~')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t2')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FeldOpts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ASTF')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typeable')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Opt')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('ASTF')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Decor')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Info')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typeable')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('optimizeO')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('()')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FeldOpts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ASTF')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typeable')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Opt')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('ASTF')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Decor')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Info')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typeable')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bounded')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.Synthetic rightbrace ('')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.class ('class')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('GMapKey')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('k')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('GMap')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('k')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.* ('*')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.* ('*')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic rightbrace ('')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('GMapKey')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('GMapKey')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('GMapKey')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Either')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('GMap')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Either')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('v')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('GMapEither')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('GMap')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('v')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('GMap')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('v')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic rightbrace ('')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Eq')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Collects')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('e')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.type ('type')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Elem')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('e')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('empty')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
HaskellTokenType.Synthetic rightbrace ('')
HaskellTokenType.Synthetic rightbrace ('')