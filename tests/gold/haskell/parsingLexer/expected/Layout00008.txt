HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Layout00008')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.haddock ('-- | Calculate the normal form CRC using a table\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.varidRegexp ('crcNormal')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Bits')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pull1')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pull1')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Word8')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('crcNormal')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('table')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('initial')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fromZero')
WHITE_SPACE (' ')
HaskellTokenType.$ ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fold')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('step')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('initial')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.varidRegexp ('sz')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bitSize')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('initial')
WHITE_SPACE ('\n')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
WHITE_SPACE (' ')
HaskellTokenType.Synthetic semicolon ('')
HaskellTokenType.varidRegexp ('step')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('crc')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('table')
WHITE_SPACE (' ')
HaskellTokenType.! ('!')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Z')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':.')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i2n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('i2n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('crc')
WHITE_SPACE (' ')
HaskellTokenType.VarsymPlus ('.>>.')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('sz')
WHITE_SPACE (' ')
HaskellTokenType.- ('-')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('8')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.VarsymPlus ('.&.')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('0xFF')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.` ('`')
HaskellTokenType.varidRegexp ('xor')
HaskellTokenType.` ('`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.` ('`')
HaskellTokenType.varidRegexp ('xor')
HaskellTokenType.` ('`')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('crc')
WHITE_SPACE (' ')
HaskellTokenType.VarsymPlus ('.<<.')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('8')
HaskellTokenType.) (')')
HaskellTokenType.Synthetic rightbrace ('')
HaskellTokenType.Synthetic rightbrace ('')