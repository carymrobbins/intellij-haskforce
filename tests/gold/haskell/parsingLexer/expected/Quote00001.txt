HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Quote00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n')
WHITE_SPACE ('\n')
HaskellTokenType.Synthetic leftbrace ('')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.` ('`')
HaskellTokenType.conidRegexp ('Declaration')
HaskellTokenType.` ('`')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
HaskellTokenType.Synthetic rightbrace ('')