HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' OPTIONS_HADDOCK hide ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('-----------------------------------------------------------------------------\n')
HaskellTokenType.haddock ('-- |\n')
HaskellTokenType.comment ('-- Module      :  Language.Haskell.Exts.Annotated.InternalLexer\n')
HaskellTokenType.comment ('-- Copyright   :  (c) The GHC Team, 1997-2000\n')
HaskellTokenType.comment ('--                (c) Niklas Broberg, 2004-2009\n')
HaskellTokenType.comment ('-- License     :  BSD-style (see the file LICENSE.txt)\n')
HaskellTokenType.comment ('--\n')
HaskellTokenType.comment ('-- Maintainer  :  Niklas Broberg, d00nibro@chalmers.se\n')
HaskellTokenType.comment ('-- Stability   :  stable\n')
HaskellTokenType.comment ('-- Portability :  portable\n')
HaskellTokenType.comment ('--\n')
HaskellTokenType.comment ('-- Lexer for Haskell, with some extensions.\n')
HaskellTokenType.comment ('--\n')
HaskellTokenType.comment ('-----------------------------------------------------------------------------\n')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('-- ToDo: Introduce different tokens for decimal, octal and hexadecimal (?)\n')
HaskellTokenType.comment ('-- ToDo: FloatTok should have three parts (integer part, fraction, exponent) (?)\n')
HaskellTokenType.comment ('-- ToDo: Use a lexical analyser generator (lx?)\n')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Language.Haskell.Exts.InternalLexer')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType.( ('(')
HaskellTokenType... ('..')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('showToken')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexer')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('topLexer')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Language.Haskell.Exts.ParseMonad')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Language.Haskell.Exts.SrcLoc')
WHITE_SPACE (' ')
HaskellTokenType.hiding ('hiding')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('loc')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Language.Haskell.Exts.Comments')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Language.Haskell.Exts.Extension')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Language.Haskell.Exts.ExtScheme')
WHITE_SPACE ('\n\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Prelude')
WHITE_SPACE (' ')
HaskellTokenType.hiding ('hiding')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('id')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exponent')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data.Char')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data.Ratio')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data.List')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('intercalate')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isPrefixOf')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Control.Monad')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('when')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- import Debug.Trace (trace)\n')
WHITE_SPACE ('\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n        ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VarId')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QVarId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IDupVarId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('        ')
HaskellTokenType.comment ('-- duplicable implicit parameter\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ILinVarId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('        ')
HaskellTokenType.comment ('-- linear implicit parameter\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ConId')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QConId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DVarId')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.] (']')
WHITE_SPACE ('       ')
HaskellTokenType.comment ('-- to enable varid's with '-' in them\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VarSym')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ConSym')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QVarSym')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QConSym')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IntTok')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Integer')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FloatTok')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Rational')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Character')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Char')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('StringTok')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IntTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Integer')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('        ')
HaskellTokenType.comment ('-- 1#\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('WordTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Integer')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('       ')
HaskellTokenType.comment ('-- 1##\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FloatTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Rational')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('     ')
HaskellTokenType.comment ('-- 1.0#\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DoubleTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Rational')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('    ')
HaskellTokenType.comment ('-- 1.0##\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('CharacterHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Char')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('        ')
HaskellTokenType.comment ('-- c#\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('StringHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('         ')
HaskellTokenType.comment ('-- "Hello world!"#\n')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('-- Symbols\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftParen')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightParen')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftHashParen')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightHashParen')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SemiColon')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftCurly')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightCurly')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VRightCurly')
WHITE_SPACE ('           ')
HaskellTokenType.comment ('-- a virtual close brace\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftSquare')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightSquare')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ParArrayLeftSquare')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- [:\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ParArrayRightSquare')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- :]\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Comma')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Underscore')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('BackQuote')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- Reserved operators\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Dot')
WHITE_SPACE ('           ')
HaskellTokenType.comment ('-- reserved for use with 'forall x . x'\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DotDot')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Colon')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QuoteColon')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DoubleColon')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Equals')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Backslash')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bar')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftArrow')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightArrow')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('At')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Tilde')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DoubleArrow')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Minus')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Exclamation')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Star')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftArrowTail')
WHITE_SPACE ('         ')
HaskellTokenType.comment ('-- >-\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightArrowTail')
WHITE_SPACE ('        ')
HaskellTokenType.comment ('-- -<\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftDblArrowTail')
WHITE_SPACE ('      ')
HaskellTokenType.comment ('-- >>-\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightDblArrowTail')
WHITE_SPACE ('     ')
HaskellTokenType.comment ('-- -<<\n')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('-- Template Haskell\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THExpQuote')
WHITE_SPACE ('            ')
HaskellTokenType.comment ('-- [| or [e|\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THPatQuote')
WHITE_SPACE ('            ')
HaskellTokenType.comment ('-- [p|\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THDecQuote')
WHITE_SPACE ('            ')
HaskellTokenType.comment ('-- [d|\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THTypQuote')
WHITE_SPACE ('            ')
HaskellTokenType.comment ('-- [t|\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THCloseQuote')
WHITE_SPACE ('          ')
HaskellTokenType.haddock ('-- |]\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THIdEscape')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('   ')
HaskellTokenType.comment ('-- dollar x\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THParenEscape')
WHITE_SPACE ('         ')
HaskellTokenType.comment ('-- dollar (\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THVarQuote')
WHITE_SPACE ('            ')
HaskellTokenType.comment ('-- 'x (but without the x)\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THTyQuote')
WHITE_SPACE ('             ')
HaskellTokenType.comment ('-- ''T (but without the T)\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THQuasiQuote')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('  ')
HaskellTokenType.comment ('-- [$...|...]\n')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('-- HaRP\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RPGuardOpen')
WHITE_SPACE ('       ')
HaskellTokenType.comment ('-- (|\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RPGuardClose')
WHITE_SPACE ('      ')
HaskellTokenType.haddock ('-- |)\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RPCAt')
WHITE_SPACE ('             ')
HaskellTokenType.comment ('-- @:\n')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('-- Hsx\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XCodeTagOpen')
WHITE_SPACE ('      ')
HaskellTokenType.comment ('-- <%\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XCodeTagClose')
WHITE_SPACE ('     ')
HaskellTokenType.comment ('-- %>\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XStdTagOpen')
WHITE_SPACE ('       ')
HaskellTokenType.comment ('-- <\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XStdTagClose')
WHITE_SPACE ('      ')
HaskellTokenType.comment ('-- >\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XCloseTagOpen')
WHITE_SPACE ('     ')
HaskellTokenType.comment ('-- </\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XEmptyTagClose')
WHITE_SPACE ('    ')
HaskellTokenType.comment ('-- />\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XChildTagOpen')
WHITE_SPACE ('     ')
HaskellTokenType.comment ('-- <%> (note that close doesn't exist, it's XCloseTagOpen followed by XCodeTagClose)\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XPCDATA')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XRPatOpen')
WHITE_SPACE ('             ')
HaskellTokenType.comment ('-- <[\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XRPatClose')
WHITE_SPACE ('            ')
HaskellTokenType.comment ('-- ]>\n')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('-- Pragmas\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('PragmaEnd')
WHITE_SPACE ('                     ')
HaskellTokenType.comment ('-- #-}\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RULES')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('INLINE')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('INLINE_CONLIKE')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SPECIALISE')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SPECIALISE_INLINE')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SOURCE')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DEPRECATED')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('WARNING')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SCC')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('GENERATED')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('CORE')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('UNPACK')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('OPTIONS')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('--        | CFILES  String\n')
HaskellTokenType.comment ('--        | INCLUDE String\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LANGUAGE')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ANN')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MINIMAL')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('NO_OVERLAP')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('OVERLAP')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('INCOHERENT')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- Reserved Ids\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_As')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_By')
WHITE_SPACE ('         ')
HaskellTokenType.comment ('-- transform list comprehensions\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Case')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Class')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Data')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Default')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Deriving')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Do')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_MDo')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Else')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Family')
WHITE_SPACE ('     ')
HaskellTokenType.comment ('-- indexed type families\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Forall')
WHITE_SPACE ('     ')
HaskellTokenType.comment ('-- universal/existential types\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Group')
WHITE_SPACE ('      ')
HaskellTokenType.comment ('-- transform list comprehensions\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Hiding')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_If')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Import')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_In')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Infix')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_InfixL')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_InfixR')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Instance')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Let')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Module')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_NewType')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Of')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Proc')
WHITE_SPACE ('       ')
HaskellTokenType.comment ('-- arrows\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Rec')
WHITE_SPACE ('        ')
HaskellTokenType.comment ('-- arrows\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Then')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Type')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Using')
WHITE_SPACE ('      ')
HaskellTokenType.comment ('-- transform list comprehensions\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Where')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Qualified')
WHITE_SPACE ('\n\n                ')
HaskellTokenType.comment ('-- FFI\n')
WHITE_SPACE ('        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Foreign')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Export')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Safe')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Unsafe')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Threadsafe')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Interruptible')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_StdCall')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_CCall')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_CPlusPlus')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_DotNet')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Jvm')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_Js')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_CApi')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('EOF')
WHITE_SPACE ('\n        ')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Eq')
HaskellTokenType., (',')
HaskellTokenType.conidRegexp ('Show')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('reserved_ops')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ExtScheme')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('reserved_ops')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('..')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('DotDot')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (':')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Colon')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('::')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('DoubleColon')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('=')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Equals')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\\')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Backslash')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('|')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Bar')
HaskellTokenType., (',')
WHITE_SPACE ('          ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('<-')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('LeftArrow')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('->')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('RightArrow')
HaskellTokenType., (',')
WHITE_SPACE ('   ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('@')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('At')
HaskellTokenType., (',')
WHITE_SPACE ('           ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('@:')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('RPCAt')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('RegularPatterns')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('~')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Tilde')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('=>')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('DoubleArrow')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('*')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Star')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('KindSignatures')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.comment ('-- Parallel arrays\n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('[:')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('ParArrayLeftSquare')
HaskellTokenType., (',')
WHITE_SPACE ('   ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ParallelArrays')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (':]')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('ParArrayRightSquare')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ParallelArrays')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.comment ('-- Arrows notation\n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('-<')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('LeftArrowTail')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Arrows')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('>-')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('RightArrowTail')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Arrows')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('-<<')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('LeftDblArrowTail')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Arrows')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('>>-')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('RightDblArrowTail')
HaskellTokenType., (',')
WHITE_SPACE ('   ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Arrows')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.comment ('-- Unicode notation\n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\x')
HaskellTokenType.STRINGTOKEN ('2190')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('LeftArrow')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE ('  ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('UnicodeSyntax')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\x')
HaskellTokenType.STRINGTOKEN ('2192')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('RightArrow')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE ('  ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('UnicodeSyntax')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\x')
HaskellTokenType.STRINGTOKEN ('21d2')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('DoubleArrow')
HaskellTokenType., (',')
WHITE_SPACE ('   ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE ('  ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('UnicodeSyntax')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\x')
HaskellTokenType.STRINGTOKEN ('2237')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('DoubleColon')
HaskellTokenType., (',')
WHITE_SPACE ('   ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE ('  ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('UnicodeSyntax')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\x')
HaskellTokenType.STRINGTOKEN ('2919')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('LeftArrowTail')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('All')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('UnicodeSyntax')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Arrows')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\x')
HaskellTokenType.STRINGTOKEN ('291a')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('RightArrowTail')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('All')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('UnicodeSyntax')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Arrows')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\x')
HaskellTokenType.STRINGTOKEN ('291b')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('LeftDblArrowTail')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('All')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('UnicodeSyntax')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Arrows')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\x')
HaskellTokenType.STRINGTOKEN ('291c')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('RightDblArrowTail')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('All')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('UnicodeSyntax')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Arrows')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\x')
HaskellTokenType.STRINGTOKEN ('2605')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Star')
HaskellTokenType., (',')
WHITE_SPACE ('              ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('All')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('UnicodeSyntax')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KindSignatures')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\x')
HaskellTokenType.STRINGTOKEN ('2200')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Forall')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('All')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('UnicodeSyntax')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ExplicitForAll')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
WHITE_SPACE ('\n ')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('special_varops')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ExtScheme')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('special_varops')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE ('\n ')
HaskellTokenType.comment ('-- the dot is only a special symbol together with forall, but can still be used as function composition\n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('.')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Dot')
HaskellTokenType., (',')
WHITE_SPACE ('          ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ExplicitForAll')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ExistentialQuantification')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('-')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Minus')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('!')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Exclamation')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
WHITE_SPACE ('\n ')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('reserved_ids')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ExtScheme')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('reserved_ids')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('_')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Underscore')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('by')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_By')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('TransformListComp')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('case')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Case')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('class')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Class')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('data')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Data')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('default')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('   ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Default')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('deriving')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Deriving')
HaskellTokenType., (',')
WHITE_SPACE ('   ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('do')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Do')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('else')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Else')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('family')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Family')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('TypeFamilies')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.comment ('-- indexed type families\n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('forall')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Forall')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ExplicitForAll')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ExistentialQuantification')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.comment ('-- universal/existential quantification\n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('group')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Group')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('TransformListComp')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('if')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_If')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('import')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Import')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('in')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_In')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('infix')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Infix')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('infixl')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_InfixL')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('infixr')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_InfixR')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('instance')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Instance')
HaskellTokenType., (',')
WHITE_SPACE ('   ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('let')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Let')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('mdo')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_MDo')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('RecursiveDo')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('module')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Module')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('newtype')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('   ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_NewType')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('of')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Of')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('proc')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Proc')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Arrows')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('rec')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Rec')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Arrows')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RecursiveDo')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DoRec')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('then')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Then')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('type')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Type')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('using')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Using')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('TransformListComp')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('where')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Where')
HaskellTokenType., (',')
WHITE_SPACE ('      ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- FFI\n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('foreign')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('   ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Foreign')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
WHITE_SPACE ('\n ')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n\n')
HaskellTokenType.varidRegexp ('special_varids')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ExtScheme')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('special_varids')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('as')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_As')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('qualified')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Qualified')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('hiding')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Hiding')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- FFI\n')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('export')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Export')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('safe')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('          ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Safe')
HaskellTokenType., (',')
WHITE_SPACE ('          ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SafeImports')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Safe')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Trustworthy')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('unsafe')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Unsafe')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('threadsafe')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Threadsafe')
HaskellTokenType., (',')
WHITE_SPACE ('    ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('interruptible')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Interruptible')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('InterruptibleFFI')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('stdcall')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_StdCall')
HaskellTokenType., (',')
WHITE_SPACE ('       ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('ccall')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_CCall')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('cplusplus')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_CPlusPlus')
HaskellTokenType., (',')
WHITE_SPACE ('     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('dotnet')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_DotNet')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('jvm')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('           ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Jvm')
HaskellTokenType., (',')
WHITE_SPACE ('           ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('js')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('            ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_Js')
HaskellTokenType., (',')
WHITE_SPACE ('            ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('ForeignFunctionInterface')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('capi')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('          ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('KW_CApi')
HaskellTokenType., (',')
WHITE_SPACE ('          ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Any')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('CApiFFI')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
WHITE_SPACE ('\n ')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('pragmas')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType., (',')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('pragmas')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('rules')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('             ')
HaskellTokenType.conidRegexp ('RULES')
WHITE_SPACE ('           ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('inline')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('            ')
HaskellTokenType.conidRegexp ('INLINE')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE ('     ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('noinline')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('          ')
HaskellTokenType.conidRegexp ('INLINE')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('False')
WHITE_SPACE ('    ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('notinline')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('INLINE')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('False')
WHITE_SPACE ('    ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('specialise')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('SPECIALISE')
WHITE_SPACE ('      ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('specialize')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('SPECIALISE')
WHITE_SPACE ('      ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('source')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('            ')
HaskellTokenType.conidRegexp ('SOURCE')
WHITE_SPACE ('          ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('deprecated')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('DEPRECATED')
WHITE_SPACE ('      ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('warning')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('           ')
HaskellTokenType.conidRegexp ('WARNING')
WHITE_SPACE ('         ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('ann')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('               ')
HaskellTokenType.conidRegexp ('ANN')
WHITE_SPACE ('             ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('scc')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('               ')
HaskellTokenType.conidRegexp ('SCC')
WHITE_SPACE ('             ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('generated')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('GENERATED')
WHITE_SPACE ('       ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('core')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('              ')
HaskellTokenType.conidRegexp ('CORE')
WHITE_SPACE ('            ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('unpack')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('            ')
HaskellTokenType.conidRegexp ('UNPACK')
WHITE_SPACE ('          ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('language')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('          ')
HaskellTokenType.conidRegexp ('LANGUAGE')
WHITE_SPACE ('        ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('minimal')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('           ')
HaskellTokenType.conidRegexp ('MINIMAL')
WHITE_SPACE ('         ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('no_overlap')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('NO_OVERLAP')
WHITE_SPACE ('      ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('overlap')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('           ')
HaskellTokenType.conidRegexp ('OVERLAP')
WHITE_SPACE ('         ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('incoherent')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('        ')
HaskellTokenType.conidRegexp ('INCOHERENT')
WHITE_SPACE ('      ')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE ('\n ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('options')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE ('           ')
HaskellTokenType.conidRegexp ('OPTIONS')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- we'll tweak it before use - promise!\n')
HaskellTokenType.comment ('-- ( "cfiles",            CFILES  undefined ), -- same here...\n')
HaskellTokenType.comment ('-- ( "include",           INCLUDE undefined )  -- ...and here!\n')
WHITE_SPACE (' ')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('isIdent')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isHSymbol')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isPragmaChar')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('isIdent')
WHITE_SPACE ('   ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isAlpha')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('||')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('||')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\''')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('||')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''_'')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('isHSymbol')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (':!#%&*./?@')
HaskellTokenType.STRINGTOKEN ('\\')
HaskellTokenType.STRINGTOKEN ('-')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('||')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('isSymbol')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('||')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isPunctuation')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('not')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('(),;[]`{}_\"'')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('isPragmaChar')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isAlphaNum')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('||')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''_'')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('matchChar')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('matchChar')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('msg')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('null')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('||')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('head')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('/=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('msg')
WHITE_SPACE (' ')
HaskellTokenType.else ('else')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- The top-level lexer.\n')
HaskellTokenType.comment ('-- We need to know whether we are at the beginning of the line to decide\n')
HaskellTokenType.comment ('-- whether to insert layout tokens.\n')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexer')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Loc')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('P')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('P')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexer')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('runL')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('topLexer')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('topLexer')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Loc')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('topLexer')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pullCtxtFlag')
WHITE_SPACE ('\n    ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- trace (show cf ++ ": " ++ show VRightCurly) $\n')
WHITE_SPACE ('              ')
HaskellTokenType.comment ('-- the lex context state flags that we must do an empty {} - UGLY\n')
WHITE_SPACE ('              ')
HaskellTokenType.varidRegexp ('setBOL')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getSrcLocL')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>=')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('l')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Loc')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('mkSrcSpan')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('l')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('l')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VRightCurly')
HaskellTokenType.) (')')
WHITE_SPACE ('\n     ')
HaskellTokenType.else ('else')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('checkBOL')
WHITE_SPACE ('\n        ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ws')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhiteSpace')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE ('\n        ')
HaskellTokenType.comment ('-- take care of whitespace in PCDATA\n')
WHITE_SPACE ('        ')
HaskellTokenType.varidRegexp ('ec')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtContext')
WHITE_SPACE ('\n        ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ec')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n         ')
HaskellTokenType.comment ('-- if there was no linebreak, and we are lexing PCDATA,\n')
WHITE_SPACE ('         ')
HaskellTokenType.comment ('-- then we want to care about the whitespace.\n')
WHITE_SPACE ('         ')
HaskellTokenType.comment ('-- We don't bother to test for XmlSyntax, since we\n')
WHITE_SPACE ('         ')
HaskellTokenType.comment ('-- couldn't end up in ChildCtxt otherwise.\n')
WHITE_SPACE ('         ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ChildCtxt')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('not')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ws')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getSrcLocL')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>=')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('l')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Loc')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('mkSrcSpan')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('l')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('l')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XPCDATA')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (' ')
HaskellTokenType." ('"')
WHITE_SPACE ('\n         ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('startToken')
WHITE_SPACE ('\n                 ')
HaskellTokenType.varidRegexp ('sl')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getSrcLocL')
WHITE_SPACE ('\n                 ')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol'')
WHITE_SPACE (' ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexBOL')
WHITE_SPACE ('    ')
HaskellTokenType.comment ('-- >>= \t -> trace ("BOL: " ++ show t) (return t)\n')
WHITE_SPACE ('                              ')
HaskellTokenType.else ('else')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexToken')
WHITE_SPACE ('  ')
HaskellTokenType.comment ('-- >>= \t -> trace (show t) (return t)\n')
WHITE_SPACE ('                 ')
HaskellTokenType.varidRegexp ('el')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getSrcLocL')
WHITE_SPACE ('\n                 ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Loc')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('mkSrcSpan')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sl')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('el')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexWhiteSpace')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Bool')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexWhiteSpace')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('ignL')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ignoreLinePragmasL')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.comment ('-- If we find a recognised pragma, we don't want to treat it as a comment.\n')
WHITE_SPACE ('        ')
HaskellTokenType.chartoken (''{'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isRecognisedPragma')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('False')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                         ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isLinePragma')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('not')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ignL')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                            ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('l')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fn')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexLinePragma')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('setSrcLineL')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('l')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('setLineFilenameL')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fn')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('lexWhiteSpace')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''{'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('loc')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getSrcLocL')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n            ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol1')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexNestedComment')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('loc2')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getSrcLocL')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('pushComment')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Comment')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('mkSrcSpan')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('loc')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('loc2')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('reverse')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.) (')')
WHITE_SPACE ('\n            ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol2')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhiteSpace')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol1')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol2')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s1')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('all')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('takeWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isHSymbol')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s1')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('loc')
WHITE_SPACE ('    ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getSrcLocL')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('dashes')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.) (')')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE ('   ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('/=')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType.) (')')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('s'')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('loc2')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getSrcLocL')
WHITE_SPACE ('\n            ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('com')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Comment')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('False')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('mkSrcSpan')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('loc')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('loc2')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dashes')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE ('\n            ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s'')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pushComment')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('com')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('False')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('pushComment')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('com')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('lexNewline')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('lexWhiteSpace_')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('lexNewline')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('lexWhiteSpace_')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''\t'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('lexTab')
WHITE_SPACE ('\n            ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhiteSpace')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n            ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhiteSpace')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('False')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.haddock ('-- | lexWhiteSpace without the return value.\n')
HaskellTokenType.varidRegexp ('lexWhiteSpace_')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexWhiteSpace_')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE ('  ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhiteSpace')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE ('\n                         ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('isRecognisedPragma')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isLinePragma')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('isRecognisedPragma')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pragma')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('takeWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isPragmaChar')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dropWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE ('\n                          ')
HaskellTokenType.in ('in')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lookupKnownPragma')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pragma')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                              ')
HaskellTokenType.conidRegexp ('Nothing')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('False')
WHITE_SPACE ('\n                              ')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('isLinePragma')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pragma')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('toLower')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('takeWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isAlphaNum')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dropWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE ('\n                    ')
HaskellTokenType.in ('in')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pragma')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                        ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('line')
HaskellTokenType." ('"')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE ('\n                        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('False')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexLinePragma')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Int')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexLinePragma')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE ('   ')
HaskellTokenType.comment ('-- {-#\n')
WHITE_SPACE ('    ')
HaskellTokenType.varidRegexp ('lexWhile_')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('4')
WHITE_SPACE ('   ')
HaskellTokenType.comment ('-- LINE\n')
WHITE_SPACE ('    ')
HaskellTokenType.varidRegexp ('lexWhile_')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('i')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('when')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('null')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Improperly formatted LINE pragma')
HaskellTokenType." ('"')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('lexWhile_')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('matchChar')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''"'')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Improperly formatted LINE pragma')
HaskellTokenType." ('"')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('fn')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('/=')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''"'')
HaskellTokenType.) (')')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('matchChar')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''"'')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Impossible - lexLinePragma')
HaskellTokenType." ('"')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('lexWhile_')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('mapM_')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('flip')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('matchChar')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Improperly formatted LINE pragma')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('#-}')
HaskellTokenType." ('"')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('lexNewline')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('read')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fn')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexNestedComment')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Bool')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexNestedComment')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''}'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''{'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n            ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('bol'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexNestedComment')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('-{')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- rest of the subcomment\n')
WHITE_SPACE ('            ')
HaskellTokenType.varidRegexp ('lexNestedComment')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol'')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('}-')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE ('  ')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- rest of this comment\n')
WHITE_SPACE ('        ')
HaskellTokenType.chartoken (''\t'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexTab')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexNestedComment')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\t'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexNewline')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexNestedComment')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexNestedComment')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bol')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Unterminated nested comment')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- When we are lexing the first token of a line, check whether we need to\n')
HaskellTokenType.comment ('-- insert virtual semicolons or close braces due to layout.\n')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexBOL')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexBOL')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('pos')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getOffside')
WHITE_SPACE ('\n    ')
HaskellTokenType.comment ('-- trace ("Off: " ++ (show pos)) $ do\n')
WHITE_SPACE ('    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pos')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.conidRegexp ('LT')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.comment ('-- trace "layout: inserting '}'\n" $\n')
WHITE_SPACE ('            ')
HaskellTokenType.comment ('-- Set col to 0, indicating that we're still at the\n')
WHITE_SPACE ('            ')
HaskellTokenType.comment ('-- beginning of the line, in case we need a semi-colon too.\n')
WHITE_SPACE ('            ')
HaskellTokenType.comment ('-- Also pop the context here, so that we don't insert\n')
WHITE_SPACE ('            ')
HaskellTokenType.comment ('-- another close brace before the parser can pop it.\n')
WHITE_SPACE ('            ')
HaskellTokenType.varidRegexp ('setBOL')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('popContextL')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexBOL')
HaskellTokenType." ('"')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VRightCurly')
WHITE_SPACE ('\n        ')
HaskellTokenType.conidRegexp ('EQ')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('\n            ')
HaskellTokenType.comment ('-- trace "layout: inserting ';'\n" $\n')
WHITE_SPACE ('            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SemiColon')
WHITE_SPACE ('\n        ')
HaskellTokenType.conidRegexp ('GT')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexToken')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexToken')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexToken')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('ec')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtContext')
WHITE_SPACE ('\n    ')
HaskellTokenType.comment ('-- we don't bother to check XmlSyntax since we couldn't\n')
WHITE_SPACE ('    ')
HaskellTokenType.comment ('-- have ended up in a non-Nothing context if it wasn't\n')
WHITE_SPACE ('    ')
HaskellTokenType.comment ('-- enabled.\n')
WHITE_SPACE ('    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ec')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('HarpCtxt')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexHarpToken')
WHITE_SPACE ('\n     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TagCtxt')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexTagCtxt')
WHITE_SPACE ('\n     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('CloseTagCtxt')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexCloseTagCtxt')
WHITE_SPACE ('\n     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ChildCtxt')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexChildCtxt')
WHITE_SPACE ('\n     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('CodeTagCtxt')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexCodeTagCtxt')
WHITE_SPACE ('\n     ')
HaskellTokenType._ ('_')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexStdToken')
WHITE_SPACE ('\n\n\n')
HaskellTokenType.varidRegexp ('lexChildCtxt')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexChildCtxt')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.comment ('-- if we ever end up here, then XmlSyntax must be on.\n')
WHITE_SPACE ('    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''<'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''%'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''>'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('pushExtContextL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ChildCtxt')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XChildTagOpen')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''<'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''%'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('pushExtContextL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('CodeTagCtxt')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XCodeTagOpen')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''<'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''/'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('popExtContextL')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexChildCtxt')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('pushExtContextL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('CloseTagCtxt')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XCloseTagOpen')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''<'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''['')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('pushExtContextL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('HarpCtxt')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XRPatOpen')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''<'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('pushExtContextL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TagCtxt')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XStdTagOpen')
WHITE_SPACE ('\n        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexPCDATA')
WHITE_SPACE ('\n\n\n')
HaskellTokenType.varidRegexp ('lexPCDATA')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexPCDATA')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.comment ('-- if we ever end up here, then XmlSyntax must be on.\n')
WHITE_SPACE ('    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('EOF')
WHITE_SPACE ('\n        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n            ')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexNewline')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexPCDATA')
WHITE_SPACE ('\n                ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                 ')
HaskellTokenType.conidRegexp ('XPCDATA')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('p')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XPCDATA')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('p')
WHITE_SPACE ('\n                 ')
HaskellTokenType.conidRegexp ('EOF')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('EOF')
WHITE_SPACE ('\n                 ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexPCDATA: unexpected token: ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n            ')
HaskellTokenType.chartoken (''<'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XPCDATA')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n            ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pcd')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('takeWhile')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`notElem`')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('<')
HaskellTokenType.STRINGTOKEN ('\n')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('l')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('length')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pcd')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('l')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexPCDATA')
WHITE_SPACE ('\n                    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                     ')
HaskellTokenType.conidRegexp ('XPCDATA')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pcd'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XPCDATA')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pcd')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pcd'')
WHITE_SPACE ('\n                     ')
HaskellTokenType.conidRegexp ('EOF')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('EOF')
WHITE_SPACE ('\n                     ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexPCDATA: unexpected token: ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n\n\n')
HaskellTokenType.varidRegexp ('lexCodeTagCtxt')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexCodeTagCtxt')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.comment ('-- if we ever end up here, then XmlSyntax must be on.\n')
WHITE_SPACE ('    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''%'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''>'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('popExtContextL')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexCodeTagContext')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XCodeTagClose')
WHITE_SPACE ('\n        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexStdToken')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexCloseTagCtxt')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexCloseTagCtxt')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.comment ('-- if we ever end up here, then XmlSyntax must be on.\n')
WHITE_SPACE ('    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''%'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''>'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('popExtContextL')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexCloseTagCtxt')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XCodeTagClose')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''>'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('popExtContextL')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexCloseTagCtxt')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XStdTagClose')
WHITE_SPACE ('\n        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexStdToken')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexTagCtxt')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexTagCtxt')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.comment ('-- if we ever end up here, then XmlSyntax must be on.\n')
WHITE_SPACE ('    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''/'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''>'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('popExtContextL')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexTagCtxt: Empty tag')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XEmptyTagClose')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''>'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('popExtContextL')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexTagCtxt: Standard tag')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('pushExtContextL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ChildCtxt')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XStdTagClose')
WHITE_SPACE ('\n        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexStdToken')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexHarpToken')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexHarpToken')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.comment ('-- if we ever end up here, then RegularPatterns must be on.\n')
WHITE_SPACE ('    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken ('']'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''>'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('popExtContextL')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexHarpToken')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XRPatClose')
WHITE_SPACE ('\n        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexStdToken')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexStdToken')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexStdToken')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtensionsL')
WHITE_SPACE ('\n    ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('intHash')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexHash')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IntTok')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IntTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Right')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('WordTokHash')
HaskellTokenType.) (')')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('EOF')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.chartoken (''0'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('d')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('toLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''o'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isOctDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexOctal')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('intHash')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''0'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                  ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('toLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''b'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isBinDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('BinaryLiterals')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexBinary')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('intHash')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''0'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                  ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('toLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''x'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isHexDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexHexadecimal')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('intHash')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''0'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.comment ('-- implicit parameters\n')
WHITE_SPACE ('        ')
HaskellTokenType.chartoken (''?'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ImplicitParams')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isIdent')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IDupVarId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.chartoken (''%'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ImplicitParams')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isIdent')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ILinVarId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n        ')
HaskellTokenType.comment ('-- end implicit parameters\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.comment ('-- harp\n')
HaskellTokenType.comment ('--        '(':'|':c:_  | isHSymbol c -> discard 1 >> return LeftParen\n')
WHITE_SPACE ('        ')
HaskellTokenType.chartoken (''('')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RegularPatterns')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('not')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('isHSymbol')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('\n                     ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RPGuardOpen')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken ('')'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RegularPatterns')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('\n                     ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RPGuardClose')
WHITE_SPACE ('\n        ')
HaskellTokenType.{- ('{-')
HaskellTokenType.commenttext (' This is handled by the reserved_ops above.\n        '@':':':_ | RegularPatterns `elem` exts ')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('>\n                     do discard 2\n                        return RPCAt ')
HaskellTokenType.-} ('-}')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.comment ('-- template haskell\n')
WHITE_SPACE ('        ')
HaskellTokenType.chartoken (''['')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TemplateHaskell')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THExpQuote')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.chartoken (''['')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''e'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TemplateHaskell')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THExpQuote')
WHITE_SPACE ('\n                    ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''p'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TemplateHaskell')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THPatQuote')
WHITE_SPACE ('\n                    ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''d'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TemplateHaskell')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THDecQuote')
WHITE_SPACE ('\n                    ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''t'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TemplateHaskell')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THTypQuote')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''['')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''$'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QuasiQuotes')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQuasiQuote')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.chartoken (''['')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s'')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QuasiQuotes')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dropWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isIdent')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s'')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType.; (';')
HaskellTokenType._ ('_')
HaskellTokenType.-> ('->')
HaskellTokenType.conidRegexp ('False')
HaskellTokenType.} ('}')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQuasiQuote')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE ('\n                 ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isUpper')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QuasiQuotes')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQuasiQuote')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken ('']'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TemplateHaskell')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THCloseQuote')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.chartoken (''$'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TemplateHaskell')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isIdent')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THIdEscape')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n                ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''('')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TemplateHaskell')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THParenEscape')
WHITE_SPACE ('\n        ')
HaskellTokenType.comment ('-- end template haskell\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.comment ('-- hsx\n')
WHITE_SPACE ('        ')
HaskellTokenType.chartoken (''<'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''%'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XmlSyntax')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('\n                        ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                         ')
HaskellTokenType.chartoken (''>'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE ('\n                                   ')
HaskellTokenType.varidRegexp ('pushExtContextL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ChildCtxt')
WHITE_SPACE ('\n                                   ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XChildTagOpen')
WHITE_SPACE ('\n                         ')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                                   ')
HaskellTokenType.varidRegexp ('pushExtContextL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('CodeTagCtxt')
WHITE_SPACE ('\n                                   ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XCodeTagOpen')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''<'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isAlpha')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XmlSyntax')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('pushExtContextL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TagCtxt')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XStdTagOpen')
WHITE_SPACE ('\n        ')
HaskellTokenType.comment ('-- end hsx\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''('')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('UnboxedTuples')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('not')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('isHSymbol')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftHashParen')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken ('')'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('UnboxedTuples')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightHashParen')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.comment ('-- pragmas\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''{'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('saveExtensionsL')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexPragmaStart')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''}'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('restoreExtensionsL')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('PragmaEnd')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.comment ('-- Parallel arrays\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''['')
HaskellTokenType.: (':')
HaskellTokenType.chartoken ('':'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ParallelArrays')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ParArrayLeftSquare')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.chartoken ('':'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken ('']'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ParallelArrays')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ParArrayRightSquare')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexDecimalOrFloat')
WHITE_SPACE ('\n\n            ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isUpper')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexConIdOrQual')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n            ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('||')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''_'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('idents')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexIdents')
WHITE_SPACE ('\n                    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('idents')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                     ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('ident')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lookup')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('reserved_ids')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('special_varids')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                                 ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('keyword')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('scheme')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('\n                                    ')
HaskellTokenType.comment ('-- check if an extension keyword is enabled\n')
WHITE_SPACE ('                                    ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isEnabled')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('scheme')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE ('\n                                     ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('flagKW')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('keyword')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('keyword')
WHITE_SPACE ('\n                                     ')
HaskellTokenType.else ('else')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VarId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE ('\n                                 ')
HaskellTokenType.conidRegexp ('Nothing')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VarId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE ('\n                     ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DVarId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('idents')
WHITE_SPACE ('\n\n            ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isHSymbol')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('sym')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isHSymbol')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lookup')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sym')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('reserved_ops')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('special_varops')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                              ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE (' ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('scheme')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('\n                                ')
HaskellTokenType.comment ('-- check if an extension op is enabled\n')
WHITE_SPACE ('                                ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isEnabled')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('scheme')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE ('\n                                 ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE ('\n                                 ')
HaskellTokenType.else ('else')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                                        ')
HaskellTokenType.chartoken ('':'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ConSym')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sym')
WHITE_SPACE ('\n                                        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VarSym')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sym')
WHITE_SPACE ('\n                              ')
HaskellTokenType.conidRegexp ('Nothing')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                                          ')
HaskellTokenType.chartoken ('':'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ConSym')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sym')
WHITE_SPACE ('\n                                          ')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VarSym')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sym')
WHITE_SPACE ('\n\n            ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('otherwise')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n\n                        ')
HaskellTokenType.comment ('-- First the special symbols\n')
WHITE_SPACE ('                        ')
HaskellTokenType.chartoken (''('')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftParen')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken ('')'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightParen')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken ('','')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Comma')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken ('';'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SemiColon')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken (''['')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftSquare')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken ('']'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightSquare')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken (''`'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('BackQuote')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken (''{'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('pushContextL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('NoLayout')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('LeftCurly')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken (''}'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('popContextL')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexStdToken')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RightCurly')
WHITE_SPACE ('\n\n                        ')
HaskellTokenType.chartoken (''\''')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexCharacter')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken (''"'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('lexString')
WHITE_SPACE ('\n\n                        ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('    ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Illegal character ')
HaskellTokenType.badstringtoken ('\')
HaskellTokenType.STRINGTOKEN (''')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.badstringtoken ('\')
HaskellTokenType.STRINGTOKEN (''')
HaskellTokenType.STRINGTOKEN ('\n')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n      ')
HaskellTokenType.where ('where')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexIdents')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.] (']')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('lexIdents')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isIdent')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtensionsL')
WHITE_SPACE ('\n                ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                 ')
HaskellTokenType.comment ('-- This is the only way we can get more than one ident in the list\n')
WHITE_SPACE ('                 ')
HaskellTokenType.comment ('-- and it requires XmlSyntax to be on.\n')
WHITE_SPACE ('                 ')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XmlSyntax')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isAlpha')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('idents')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexIdents')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('idents')
WHITE_SPACE ('\n                 ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MagicHash')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('#')
HaskellTokenType." ('"')
HaskellTokenType.] (']')
WHITE_SPACE ('\n                 ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('ident')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n            ')
HaskellTokenType.varidRegexp ('lexQuasiQuote')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('lexQuasiQuote')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.comment ('-- We've seen and dropped [$ already\n')
WHITE_SPACE ('                ')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQuoter')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('matchChar')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''|'')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Malformed quasi-quote quoter')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('body')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQQBody')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THQuasiQuote')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('ident')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('body')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                  ')
HaskellTokenType.where ('where')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQuoter')
WHITE_SPACE ('\n                         ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isIdent')
WHITE_SPACE ('\n                         ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('otherwise')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('qualThing')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexConIdOrQual')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                            ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('qualThing')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                                ')
HaskellTokenType.conidRegexp ('QVarId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('s1')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('s2')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''.'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s2')
WHITE_SPACE ('\n                                ')
HaskellTokenType.conidRegexp ('QVarSym')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('s1')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s2')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''.'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s2')
WHITE_SPACE ('\n                                ')
HaskellTokenType._ ('_')
WHITE_SPACE ('                ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Malformed quasi-quote quoter')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n            ')
HaskellTokenType.varidRegexp ('lexQQBody')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('lexQQBody')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n                ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                  ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken ('']'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                                   ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQQBody')
WHITE_SPACE ('\n                                   ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken ('']'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                  ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                                   ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQQBody')
WHITE_SPACE ('\n                                   ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                  ')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken ('']'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                  ')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                              ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQQBody')
WHITE_SPACE ('\n                              ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''|'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                  ')
HaskellTokenType.chartoken ('']'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                              ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQQBody')
WHITE_SPACE ('\n                              ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken ('']'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                  ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                               ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQQBody')
WHITE_SPACE ('\n                               ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                  ')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexNewline')
WHITE_SPACE ('\n                               ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQQBody')
WHITE_SPACE ('\n                               ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                  ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Unexpected end of input while lexing quasi-quoter')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                  ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('not')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\\')
HaskellTokenType.STRINGTOKEN ('|')
HaskellTokenType.STRINGTOKEN ('\n')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                          ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexQQBody')
WHITE_SPACE ('\n                          ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.Varsym ('++')
HaskellTokenType.varidRegexp ('rest')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- Underscores are used in some pragmas. Options pragmas are a special case\n')
HaskellTokenType.comment ('-- with our representation: the thing after the underscore is a parameter.\n')
HaskellTokenType.comment ('-- Strip off the parameters to option pragmas by hand here, everything else\n')
HaskellTokenType.comment ('-- sits in the pragmas map.\n')
HaskellTokenType.varidRegexp ('lookupKnownPragma')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lookupKnownPragma')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('toLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n      ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('options_')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`isPrefixOf`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('OPTIONS')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('drop')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('8')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('options')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('            ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('OPTIONS')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('otherwise')
WHITE_SPACE ('                 ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lookup')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pragmas')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexPragmaStart')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexPragmaStart')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('lexWhile_')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('pr')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isPragmaChar')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lookupKnownPragma')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('pr')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('INLINE')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n            ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('toLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n             ')
HaskellTokenType.chartoken ('' '')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''c'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''o'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''n'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''l'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''i'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''k'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''e'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                      ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('8')
WHITE_SPACE ('\n                      ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('INLINE_CONLIKE')
WHITE_SPACE ('\n             ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('INLINE')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE ('\n     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SPECIALISE')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n            ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dropWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('toLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n             ')
HaskellTokenType.chartoken (''i'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''n'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''l'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''i'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''n'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''e'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                      ')
HaskellTokenType.varidRegexp ('lexWhile_')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE ('\n                      ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('6')
WHITE_SPACE ('\n                      ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SPECIALISE_INLINE')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE ('\n             ')
HaskellTokenType.chartoken (''n'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''o'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''i'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''n'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''l'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''i'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''n'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''e'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('lexWhile_')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('8')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SPECIALISE_INLINE')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('False')
WHITE_SPACE ('\n             ')
HaskellTokenType.chartoken (''n'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''o'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''t'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''i'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''n'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''l'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''i'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''n'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''e'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('lexWhile_')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('9')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SPECIALISE_INLINE')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('False')
WHITE_SPACE ('\n             ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SPECIALISE')
WHITE_SPACE ('\n\n     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('OPTIONS')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('opt')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('     ')
HaskellTokenType.comment ('-- see, I promised we'd mask out the 'undefined'\n')
WHITE_SPACE ('            ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fst')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('opt')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n             ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('opt'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexRawPragma')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('OPTIONS')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('opt'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rest')
HaskellTokenType.) (')')
WHITE_SPACE ('\n             ')
HaskellTokenType.conidRegexp ('Nothing')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                            ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n                            ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                                ')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                                    ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexRawPragma')
WHITE_SPACE ('\n                                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('OPTIONS')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Nothing')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rest')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                                ')
HaskellTokenType._ ('_')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Malformed Options pragma')
HaskellTokenType." ('"')
WHITE_SPACE ('\n     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RULES')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- Rules enable ScopedTypeVariables locally.\n')
WHITE_SPACE ('            ')
HaskellTokenType.varidRegexp ('addExtensionL')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ScopedTypeVariables')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('RULES')
WHITE_SPACE ('\n')
HaskellTokenType.{- ('{-')
HaskellTokenType.commenttext ('     Just (CFILES _) ')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('> do\n            rest <')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext (' lexRawPragma\n            return $ CFILES rest\n     Just (INCLUDE _) ')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('> do\n            rest <')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext (' lexRawPragma\n            return $ INCLUDE rest ')
HaskellTokenType.-} ('-}')
WHITE_SPACE ('\n     ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('p')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('p')
WHITE_SPACE ('\n\n     ')
HaskellTokenType._ ('_')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Internal error: Unrecognised recognised pragma')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                  ')
HaskellTokenType.comment ('-- do rawStr <- lexRawPragma\n')
WHITE_SPACE ('                  ')
HaskellTokenType.comment ('-- return $ PragmaUnknown (pr, rawStr) -- no support for unrecognized pragmas, treat as comment\n')
WHITE_SPACE ('                  ')
HaskellTokenType.comment ('-- discard 3 -- #-}\n')
WHITE_SPACE ('                  ')
HaskellTokenType.comment ('-- topLexer -- we just discard it as a comment for now and restart -}\n')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexRawPragma')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexRawPragma')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexRawPragmaAux')
WHITE_SPACE ('\n ')
HaskellTokenType.where ('where')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexRawPragmaAux')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('rpr')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('/=')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n        ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n         ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''}'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rpr')
WHITE_SPACE ('\n         ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('End-of-file inside pragma')
HaskellTokenType." ('"')
WHITE_SPACE ('\n         ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('rpr'')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexRawPragma')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rpr')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('rpr'')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexDecimalOrFloat')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexDecimalOrFloat')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('ds')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtensionsL')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n        ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''.'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('d')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('frac')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE ('\n                ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('num')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('10')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('ds')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('frac')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('decimals')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('toInteger')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('length')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('frac')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('exponent')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('estr')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('rest2')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n                    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rest2')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken (''e'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexExponent')
WHITE_SPACE ('\n                        ')
HaskellTokenType.chartoken (''E'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexExponent')
WHITE_SPACE ('\n                        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.integertoken ('0')
HaskellTokenType., (',')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexHash')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FloatTok')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FloatTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Right')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DoubleTokHash')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('num')
HaskellTokenType.Varsym ('%')
HaskellTokenType.integertoken ('1')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('*')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('10')
HaskellTokenType.Varsym ('^^')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('exponent')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('decimals')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''.'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('frac')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('estr')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('e')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('toLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''e'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('exponent')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('estr')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexExponent')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexHash')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FloatTok')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FloatTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Right')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DoubleTokHash')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('10')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType.Varsym ('%')
HaskellTokenType.integertoken ('1')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('*')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('10')
HaskellTokenType.Varsym ('^^')
HaskellTokenType.varidRegexp ('exponent')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('estr')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MagicHash')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('WordTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('10')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MagicHash')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('IntTokHash')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('10')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('              ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('IntTok')
WHITE_SPACE ('      ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('10')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n    ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('lexExponent')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Integer')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('lexExponent')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n        ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('e')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('r')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('   ')
HaskellTokenType.comment ('-- 'e' or 'E'\n')
WHITE_SPACE ('        ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n         ')
HaskellTokenType.chartoken (''+'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('d')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n            ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexDecimal')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''+'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n         ')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('d')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n            ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexDecimal')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('negate')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''-'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n         ')
HaskellTokenType.varidRegexp ('d')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexDecimal')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>=')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE ('\n         ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Float with missing exponent')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexHash')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Either')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexHash')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtensionsL')
WHITE_SPACE ('\n    ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MagicHash')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE ('\n     ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n        ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n         ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                       ')
HaskellTokenType.conidRegexp ('Right')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c'')
WHITE_SPACE ('\n                       ')
HaskellTokenType.conidRegexp ('Left')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n         ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('\n         ')
HaskellTokenType._ ('_')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('              ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n     ')
HaskellTokenType.else ('else')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexConIdOrQual')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexConIdOrQual')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('qual')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isIdent')
WHITE_SPACE ('\n        ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('conid')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('null')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('qual')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ConId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE ('\n                  ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('otherwise')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QConId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('qual')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('con')
HaskellTokenType.) (')')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('qual'')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('null')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('qual')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE ('\n                  ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('otherwise')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('qual')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''.'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('just_a_conid')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('alternative')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('conid')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtensionsL')
WHITE_SPACE ('\n        ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rest')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n          ')
HaskellTokenType.chartoken (''.'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('\n             ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isLower')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('||')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('==')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''_'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('  ')
HaskellTokenType.comment ('-- qualified varid?\n')
WHITE_SPACE ('                    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isIdent')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('exts'')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtensionsL')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('ident'')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                               ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MagicHash')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('#')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                               ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE ('\n                    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lookup')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ident'')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('reserved_ids')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                       ')
HaskellTokenType.comment ('-- cannot qualify a reserved word\n')
WHITE_SPACE ('                       ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('scheme')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isEnabled')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('scheme')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts'')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('just_a_conid')
WHITE_SPACE ('\n                       ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('QVarId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('qual'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ident'')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n             ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isUpper')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('      ')
HaskellTokenType.comment ('-- qualified conid?\n')
WHITE_SPACE ('                    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('lexConIdOrQual')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('qual'')
WHITE_SPACE ('\n\n             ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isHSymbol')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('    ')
HaskellTokenType.comment ('-- qualified symbol?\n')
WHITE_SPACE ('                    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('sym')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isHSymbol')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('exts'')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtensionsL')
WHITE_SPACE ('\n                    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lookup')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sym')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('reserved_ops')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                        ')
HaskellTokenType.comment ('-- cannot qualify a reserved operator\n')
WHITE_SPACE ('                        ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('scheme')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isEnabled')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('scheme')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('just_a_conid')
WHITE_SPACE ('\n                        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                                              ')
HaskellTokenType.chartoken ('':'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QConSym')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('qual'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sym')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                                              ')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QVarSym')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('qual'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sym')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n          ')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('cs')
WHITE_SPACE ('\n            ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('null')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cs')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('||')
WHITE_SPACE ('\n              ')
HaskellTokenType.varidRegexp ('not')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('isHSymbol')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('head')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cs')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE ('\n              ')
HaskellTokenType.varidRegexp ('not')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('isIdent')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('head')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cs')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MagicHash')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('conid')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                 ')
HaskellTokenType.conidRegexp ('ConId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('con'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ConId')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('con'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('#')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                 ')
HaskellTokenType.conidRegexp ('QConId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('q')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('con'')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('QConId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('q')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('con'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('#')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                 ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('lexConIdOrQual: unexpected token: ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('conid')
WHITE_SPACE ('\n          ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('conid')
WHITE_SPACE (' ')
HaskellTokenType.comment ('-- not a qualified thing\n')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexCharacter')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexCharacter')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('   ')
HaskellTokenType.comment ('-- We need to keep track of not only character constants but also TH 'x and ''T\n')
WHITE_SPACE ('        ')
HaskellTokenType.comment ('-- We've seen ' so far\n')
WHITE_SPACE ('        ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtensionsL')
WHITE_SPACE ('\n        ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n         ')
HaskellTokenType.chartoken (''\''')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('TemplateHaskell')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THTyQuote')
WHITE_SPACE ('\n         ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexEscape')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('matchQuote')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexHash')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Character')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('CharacterHash')
WHITE_SPACE ('\n                            ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Left')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Double hash not available for character literals')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n         ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''\''')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexHash')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Character')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('CharacterHash')
WHITE_SPACE ('\n                            ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Left')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Double hash not available for character literals')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('con')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n         ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('any')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('TemplateHaskell')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DataKinds')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('THVarQuote')
WHITE_SPACE ('\n         ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Improper character constant or misplaced ')
HaskellTokenType.badstringtoken ('\')
HaskellTokenType.STRINGTOKEN (''')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n    ')
HaskellTokenType.where ('where')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('matchQuote')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('matchChar')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\''')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Improperly terminated character constant')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n\n')
HaskellTokenType.varidRegexp ('lexString')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexString')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
HaskellTokenType., (',')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n    ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtensionsL')
WHITE_SPACE ('\n        ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n            ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''&'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''&'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE ('\n            ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('wcs')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhiteChars')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('matchChar')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\\'')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Illegal character in string gap')
HaskellTokenType." ('"')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('reverse')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('wcs')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE ('\n                     ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('otherwise')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('ce')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexEscape')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('ce')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('reverse')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE ('\n            ')
HaskellTokenType.chartoken (''"'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''#'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MagicHash')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('StringHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('reverse')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('reverse')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n            ')
HaskellTokenType.chartoken (''"'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('StringTok')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('reverse')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('reverse')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('/=')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\n'')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                ')
HaskellTokenType.varidRegexp ('loop')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE ('\n            ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE ('   ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Improperly terminated string')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n    ')
HaskellTokenType.varidRegexp ('lexWhiteChars')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('lexWhiteChars')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n        ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n            ')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('lexNewline')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('wcs')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhiteChars')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('wcs')
WHITE_SPACE ('\n            ')
HaskellTokenType.chartoken (''\t'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('lexTab')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('wcs')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhiteChars')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\t'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('wcs')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isSpace')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('wcs')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhiteChars')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('wcs')
WHITE_SPACE ('\n            ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexEscape')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Char')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexEscape')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getInput')
WHITE_SPACE ('\n    ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- Production charesc from section B.2 (Note: \& is handled by caller)\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''a'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\a'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('a')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''b'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\b'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('b')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''f'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\f'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('f')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''n'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\n'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('n')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''r'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\r'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('r')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''t'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\t'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('t')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''v'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\v'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('v')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('          ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\\'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\\')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''"'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\"'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\"')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''\''')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('          ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken (''\''')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.badstringtoken ('\')
HaskellTokenType.STRINGTOKEN (''')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- Production ascii from section B.2\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''^'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cntrl')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''N'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''U'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''L'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('NUL'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('NUL')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''O'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''H'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('SOH'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('SOH')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''T'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''X'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('STX'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('STX')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''E'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''T'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''X'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('ETX'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('ETX')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''E'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''O'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''T'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('EOT'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('EOT')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''E'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''N'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''Q'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('ENQ'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('ENQ')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''A'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''C'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''K'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('ACK'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('ACK')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''B'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''E'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''L'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('BEL'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('BEL')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''B'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('BS'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('BS')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''H'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''T'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('HT'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('HT')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''L'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''F'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('LF'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('LF')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''V'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''T'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('VT'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('VT')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''F'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''F'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('FF'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('FF')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''C'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''R'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('CR'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('CR')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''O'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('SO'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('SO')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''I'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('SI'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('SI')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''D'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''L'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''E'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('DLE'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('DLE')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''D'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''C'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''1'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('DC1'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('DC1')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''D'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''C'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''2'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('DC2'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('DC2')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''D'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''C'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''3'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('DC3'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('DC3')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''D'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''C'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''4'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('DC4'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('DC4')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''N'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''A'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''K'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('NAK'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('NAK')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''Y'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''N'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('SYN'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('SYN')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''E'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''T'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''B'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('ETB'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('ETB')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''C'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''A'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''N'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('CAN'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('CAN')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''E'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''M'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('EM'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('EM')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''U'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''B'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('SUB'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('SUB')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''E'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''C'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('ESC'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('ESC')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''F'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('FS'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('FS')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''G'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('GS'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('GS')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''R'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('RS'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('RS')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''U'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('US'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('US')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''S'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''P'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('SP'')
HaskellTokenType., (',')
WHITE_SPACE ('  ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('SP')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''D'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''E'')
HaskellTokenType.: (':')
HaskellTokenType.chartoken (''L'')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.' (''')
HaskellTokenType.\ ('\')
HaskellTokenType.conidRegexp ('DEL'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('DEL')
HaskellTokenType." ('"')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- Escaped numbers\n')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''o'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isOctDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                    ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexOctal')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('n'')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('checkChar')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''o'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.chartoken (''x'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isHexDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('discard')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n                    ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexHexadecimal')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('n'')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('checkChar')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''x'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                    ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexDecimal')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('n'')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('checkChar')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE ('\n                    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('raw')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n        ')
HaskellTokenType._ ('_')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Illegal escape sequence')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n    ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('checkChar')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('<=')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('0x10FFFF')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('chr')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('fromInteger')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('checkChar')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
WHITE_SPACE ('                 ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Character constant out of range')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- Production cntrl from section B.2\n')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('cntrl')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Char')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('cntrl')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>=')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''@'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('<=')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''_'')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('chr')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('ord')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ord')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''@'')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''^'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.: (':')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('cntrl')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
WHITE_SPACE ('                        ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fail')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('Illegal control character')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- assumes at least one octal digit\n')
HaskellTokenType.varidRegexp ('lexOctal')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Integer')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexOctal')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('ds')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isOctDigit')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('8')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- assumes at least one binary digit\n')
HaskellTokenType.varidRegexp ('lexBinary')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Integer')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexBinary')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('ds')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isBinDigit')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- assumes at least one hexadecimal digit\n')
HaskellTokenType.varidRegexp ('lexHexadecimal')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Integer')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexHexadecimal')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('ds')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isHexDigit')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('16')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- assumes at least one decimal digit\n')
HaskellTokenType.varidRegexp ('lexDecimal')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Integer')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('lexDecimal')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('ds')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexWhile')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isDigit')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('10')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- Stolen from Hugs's Prelude\n')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Integer')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Integer')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('parseInteger')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('radix')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('foldl1')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('*')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('radix')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('+')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('toInteger')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('digitToInt')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ds')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('flagKW')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Lex')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('flagKW')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE ('\n  ')
HaskellTokenType.varidRegexp ('when')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('KW_Do')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('KW_MDo')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n       ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('getExtensionsL')
WHITE_SPACE ('\n       ')
HaskellTokenType.varidRegexp ('when')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('NondecreasingIndentation')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('flagDo')
WHITE_SPACE ('\n\n')
HaskellTokenType.haddock ('-- | Selects ASCII binary digits, i.e. @\'0\'@..@\'1\'@.\n')
HaskellTokenType.varidRegexp ('isBinDigit')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('isBinDigit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>=')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''0'')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('<=')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''1'')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('------------------------------------------------------------------\n')
HaskellTokenType.comment ('-- "Pretty" printing for tokens\n')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('showToken')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Token')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('showToken')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('VarId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('QVarId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('q')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('q')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''.'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('IDupVarId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''?'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('ILinVarId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''%'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('ConId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('QConId')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('q')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('q')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''.'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('DVarId')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ss')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('intercalate')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('-')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ss')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('VarSym')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('          ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('ConSym')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('          ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('QVarSym')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('q')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('q')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''.'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('QConSym')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('q')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('q')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''.'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('IntTok')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('FloatTok')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Character')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\''')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (''')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('StringTok')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''"'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('IntTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('#')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('WordTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('##')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('FloatTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('#')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('DoubleTokHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('##')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('CharacterHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''\''')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (''#')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('StringHash')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.) (')')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''"'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\"#')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('LeftParen')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('(')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RightParen')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (')')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('LeftHashParen')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('(#')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RightHashParen')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('#)')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('SemiColon')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (';')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('LeftCurly')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RightCurly')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('}')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('VRightCurly')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('virtual }')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('LeftSquare')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('[')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RightSquare')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (']')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('ParArrayLeftSquare')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('[:')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('ParArrayRightSquare')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (':]')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Comma')
WHITE_SPACE ('             ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (',')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Underscore')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('_')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('BackQuote')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('`')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('QuoteColon')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('':')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Dot')
WHITE_SPACE ('               ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('.')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('DotDot')
WHITE_SPACE ('            ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('..')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Colon')
WHITE_SPACE ('             ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (':')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('DoubleColon')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('::')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Equals')
WHITE_SPACE ('            ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('=')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Backslash')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('\\')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Bar')
WHITE_SPACE ('               ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('|')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('LeftArrow')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('<-')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RightArrow')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('->')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('At')
WHITE_SPACE ('                ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('@')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Tilde')
WHITE_SPACE ('             ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('~')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('DoubleArrow')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('=>')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Minus')
WHITE_SPACE ('             ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('-')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Exclamation')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('!')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Star')
WHITE_SPACE ('              ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('*')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('LeftArrowTail')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('>-')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RightArrowTail')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('-<')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('LeftDblArrowTail')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('>>-')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RightDblArrowTail')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('-<<')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('THExpQuote')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('[|')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('THPatQuote')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('[p|')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('THDecQuote')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('[d|')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('THTypQuote')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('[t|')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('THCloseQuote')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('|]')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('THIdEscape')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''$'')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('THParenEscape')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('$(')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('THVarQuote')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (''')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('THTyQuote')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('''')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('THQuasiQuote')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('q')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('[$')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('|')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('q')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (']')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RPGuardOpen')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('(|')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RPGuardClose')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('|)')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RPCAt')
WHITE_SPACE ('             ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('@:')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('XCodeTagOpen')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('<%')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('XCodeTagClose')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('%>')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('XStdTagOpen')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('<')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('XStdTagClose')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('>')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('XCloseTagOpen')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('</')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('XEmptyTagClose')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('/>')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('XPCDATA')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('PCDATA ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('XRPatOpen')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('<[')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('XRPatClose')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (']>')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('PragmaEnd')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('#-}')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('RULES')
WHITE_SPACE ('             ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# RULES')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('INLINE')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('          ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('INLINE')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.else ('else')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('NOINLINE')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('INLINE_CONLIKE')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('INLINE CONLIKE')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('SPECIALISE')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# SPECIALISE')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('SPECIALISE_INLINE')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# SPECIALISE ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('INLINE')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.else ('else')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('NOINLINE')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('SOURCE')
WHITE_SPACE ('            ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# SOURCE')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('DEPRECATED')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# DEPRECATED')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('WARNING')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# WARNING')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('SCC')
WHITE_SPACE ('               ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# SCC')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('GENERATED')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# GENERATED')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('CORE')
WHITE_SPACE ('              ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# CORE')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('UNPACK')
WHITE_SPACE ('            ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# UNPACK')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('OPTIONS')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('mt')
HaskellTokenType., (',')
HaskellTokenType._ ('_')
HaskellTokenType.) (')')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# OPTIONS')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('maybe')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.chartoken ('':'')
HaskellTokenType.: (':')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('mt')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (' ...')
HaskellTokenType." ('"')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('--  CFILES  s         -> "{-# CFILES ..."\n')
HaskellTokenType.comment ('--  INCLUDE s         -> "{-# INCLUDE ..."\n')
WHITE_SPACE ('  ')
HaskellTokenType.conidRegexp ('LANGUAGE')
WHITE_SPACE ('          ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# LANGUAGE')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('ANN')
WHITE_SPACE ('               ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# ANN')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('MINIMAL')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# MINIMAL')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('NO_OVERLAP')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# NO_OVERLAP')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('OVERLAP')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# OVERLAP')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('INCOHERENT')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('{-# INCOHERENT')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_As')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('as')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_By')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('by')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Case')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('case')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Class')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('class')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Data')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('data')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Default')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('default')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Deriving')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('deriving')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Do')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('do')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_MDo')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('mdo')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Else')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('else')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Family')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('family')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Forall')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('forall')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Group')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('group')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Hiding')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('hiding')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_If')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('if')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Import')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('import')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_In')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('in')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Infix')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('infix')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_InfixL')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('infixl')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_InfixR')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('infixr')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Instance')
WHITE_SPACE ('   ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('instance')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Let')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('let')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Module')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('module')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_NewType')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('newtype')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Of')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('of')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Proc')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('proc')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Rec')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('rec')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Then')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('then')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Type')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('type')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Using')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('using')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Where')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('where')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Qualified')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('qualified')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Foreign')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('foreign')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Export')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('export')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Safe')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('safe')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Unsafe')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('unsafe')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Threadsafe')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('threadsafe')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Interruptible')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('interruptible')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_StdCall')
WHITE_SPACE ('    ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('stdcall')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_CCall')
WHITE_SPACE ('      ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('ccall')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('XChildTagOpen')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('<%>')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_CPlusPlus')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('cplusplus')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_DotNet')
WHITE_SPACE ('     ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('dotnet')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Jvm')
WHITE_SPACE ('        ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('jvm')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_Js')
WHITE_SPACE ('         ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('js')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('KW_CApi')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('capi')
HaskellTokenType." ('"')
WHITE_SPACE ('\n\n  ')
HaskellTokenType.conidRegexp ('EOF')
WHITE_SPACE ('           ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('EOF')
HaskellTokenType." ('"')