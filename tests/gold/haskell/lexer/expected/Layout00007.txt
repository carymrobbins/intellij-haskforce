HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Layout00007')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lexStdToken')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n      ')
HaskellTokenType.where ('where')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('lexIdents')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                 ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('XmlSyntax')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ident')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('idents')
WHITE_SPACE ('\n                 ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('MagicHash')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`elem`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('exts')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n                        ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('#')
HaskellTokenType." ('"')