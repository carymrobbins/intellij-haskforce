HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' OPTIONS_GHC ')
HaskellTokenType.PRAGMA ('-')
HaskellTokenType.PRAGMA ('fglasgow')
HaskellTokenType.PRAGMA ('-')
HaskellTokenType.PRAGMA ('exts ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' ANN module (Just "A `Maybe String' annotation") ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pragma00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' ANN type Foo (Just "A `Maybe String' annotation") ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Push')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DIM1')
WHITE_SPACE ('\n\n')
HaskellTokenType.type ('type')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Vector')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pull')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DIM1')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' DEPRECATED Vector "Use Pull instead" ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('unsafeVector')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' WARNING unsafeVector "This is unsafe; I hope you know what you're doing" ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' INLINE unsafeVector ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('safeVector')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' NOINLINE [2]  safeVector ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('safeVector2')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' NOINLINE [~2] safeVector2 ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Eq')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('0')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('-')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' SPECIALISE f :: Int ')
HaskellTokenType.PRAGMA ('-')
HaskellTokenType.PRAGMA ('> b ')
HaskellTokenType.PRAGMA ('-')
HaskellTokenType.PRAGMA ('> b ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- FIXME: Waiting for https://github.com/haskell-suite/haskell-src-exts/pull/112\n')
HaskellTokenType.varidRegexp ('g')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' INLINE_CONLIKE [1] g ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' SPECIALISE INLINE [~2] h :: Int ')
HaskellTokenType.PRAGMA ('-')
HaskellTokenType.PRAGMA ('> Int ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('i')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' ANN i (Just "Hello") ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('map2')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' RULES\n"map2/map2"    forall f g xs.  map2 f (map2 g xs) = map2 (f.g) xs\n ')
HaskellTokenType.#-} ('#-}')