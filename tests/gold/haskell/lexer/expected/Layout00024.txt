HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE RecursiveDo ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Layout00024')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- https://downloads.haskell.org/~ghc/7.2.2/docs/html/users_guide/syntax-extns.html\n')
HaskellTokenType.varidRegexp ('justOnes')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.rec ('rec')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.integertoken ('1')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n              ')
HaskellTokenType.; (';')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('negate')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- Indentation-based variant of above.\n')
HaskellTokenType.varidRegexp ('justOnes'')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n  ')
HaskellTokenType.rec ('rec')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.integertoken ('1')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType.) (')')
WHITE_SPACE ('\n  ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('negate')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- https://github.com/carymrobbins/intellij-haskforce/issues/264\n')
HaskellTokenType.varidRegexp ('grammar')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.forall ('forall')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Grammar')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Prod')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Sentence')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('grammar')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n  ')
HaskellTokenType.rec ('rec')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('nounPhrase')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rule')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE ('  ')
HaskellTokenType.conidRegexp ('A_NP')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('<$>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('adjective')
WHITE_SPACE ('  ')
HaskellTokenType.Varsym ('<*>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('nounPhrase')
WHITE_SPACE ('\n                      ')
HaskellTokenType.Varsym ('<|>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('N')
WHITE_SPACE ('    ')
HaskellTokenType.Varsym ('<$>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('noun')
WHITE_SPACE ('\n                      ')
HaskellTokenType.Varsym ('<|>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('D_N')
WHITE_SPACE ('  ')
HaskellTokenType.Varsym ('<$>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('determiner')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('<*>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('noun')
WHITE_SPACE ('\n                      ')
HaskellTokenType.Varsym ('<|>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('A_N')
WHITE_SPACE ('  ')
HaskellTokenType.Varsym ('<$>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('adjective')
WHITE_SPACE ('  ')
HaskellTokenType.Varsym ('<*>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('noun')
WHITE_SPACE ('\n                      ')
HaskellTokenType.Varsym ('<?>')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('noun phrase')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('prepPhrase')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Prod')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('r')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('PrepPhrase')
WHITE_SPACE ('\n      ')
HaskellTokenType.varidRegexp ('prepPhrase')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('P_NP')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('<$>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('preposition')
WHITE_SPACE ('   ')
HaskellTokenType.Varsym ('<*>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('nounPhrase')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('<?>')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('prepositional phrase')
HaskellTokenType." ('"')
WHITE_SPACE ('\n  ')
HaskellTokenType.rec ('rec')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('verbPhrase')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rule')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE ('  ')
HaskellTokenType.conidRegexp ('V_NP')
WHITE_SPACE ('  ')
HaskellTokenType.Varsym ('<$>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('verb')
WHITE_SPACE ('       ')
HaskellTokenType.Varsym ('<*>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('nounPhrase')
WHITE_SPACE ('\n                      ')
HaskellTokenType.Varsym ('<|>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VP_PP')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('<$>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('verbPhrase')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('<*>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('prepPhrase')
WHITE_SPACE ('\n                      ')
HaskellTokenType.Varsym ('<|>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('V')
WHITE_SPACE ('     ')
HaskellTokenType.Varsym ('<$>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('verb')
WHITE_SPACE ('\n                      ')
HaskellTokenType.Varsym ('<?>')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('verb phrase')
HaskellTokenType." ('"')