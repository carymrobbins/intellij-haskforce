HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Layout00016')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('decodeLen')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
WHITE_SPACE ('\n    ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('p')
HaskellTokenType.@ ('@')
HaskellTokenType.( ('(')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
HaskellTokenType._ ('_')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('reads')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('e')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Int')
HaskellTokenType., (',')
HaskellTokenType.conidRegexp ('String')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n    ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('p')