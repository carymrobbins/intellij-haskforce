HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE TypeFamilies ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE GADTs ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE TransformListComp ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Fun00012')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('A')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('M')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('unA')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('T')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('A')
WHITE_SPACE (' ')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('B')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n   ')
HaskellTokenType.conidRegexp ('K')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('D')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('B')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType., (',')
WHITE_SPACE ('\n               ')
HaskellTokenType.varidRegexp ('y')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ys')
HaskellTokenType., (',')
WHITE_SPACE ('\n               ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sortWith')
WHITE_SPACE (' ')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('g')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType., (',')
WHITE_SPACE ('\n               ')
HaskellTokenType.varidRegexp ('y')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ys')
HaskellTokenType., (',')
WHITE_SPACE ('\n               ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('sortWith')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('by')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('+')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType., (',')
WHITE_SPACE ('\n               ')
HaskellTokenType.varidRegexp ('y')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ys')
HaskellTokenType., (',')
WHITE_SPACE ('\n               ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('group')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('using')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('permutations')
WHITE_SPACE (' ')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('i')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType., (',')
WHITE_SPACE ('\n               ')
HaskellTokenType.varidRegexp ('y')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ys')
HaskellTokenType., (',')
WHITE_SPACE ('\n               ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('group')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('by')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('+')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('using')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('groupWith')
WHITE_SPACE (' ')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' RULES "f" f True = False ')
HaskellTokenType.#-} ('#-}')