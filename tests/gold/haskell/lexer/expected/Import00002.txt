HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Import00002')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.qualified ('qualified')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Prelude')
WHITE_SPACE (' ')
HaskellTokenType.hiding ('hiding')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('zipWith')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('head')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data.Maybe')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('fromMaybe')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('isJust')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.qualified ('qualified')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data.Maybe')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Maybe')
HaskellTokenType.( ('(')
HaskellTokenType... ('..')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.qualified ('qualified')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Prelude')
WHITE_SPACE (' ')
HaskellTokenType.as ('as')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('P')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe2')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just2')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Nothing2')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('dropBitMask')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('B.ByteString')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('B.ByteString')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('dropBitMask')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE ('  ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('go')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('B.breakSubstring')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('here')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE ('\n  ')
HaskellTokenType.where ('where')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('comma')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('B.pack')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (',')
HaskellTokenType." ('"')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('rparen')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('B.pack')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (')')
HaskellTokenType." ('"')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('go')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('h')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc')
WHITE_SPACE ('\n          ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('B.null')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('B.append')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('B.concat')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('reverse')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE ('\n          ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('otherwise')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('go')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('B.breakSubstring')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('wrd')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rest')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('rparen')
HaskellTokenType.: (':')
HaskellTokenType.as ('as')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('wrd')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('h')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('acc')
HaskellTokenType.) (')')
WHITE_SPACE ('\n             ')
HaskellTokenType.where ('where')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.as ('as')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rest')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fixArg')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('B.span')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('/=')
WHITE_SPACE (' ')
HaskellTokenType.chartoken ('';'')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('B.drop')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('B.length')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('wrd')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
HaskellTokenType.) (')')