HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Case00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.comment ('-- Ensure broken case expressions don't break the parser.\n')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('connect')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('IO')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pool')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('connect')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ehost')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('etcd')
WHITE_SPACE ('  ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ehost')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n                    ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('createClient')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('h')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('connect'')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ehost')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('etcd')
WHITE_SPACE ('  ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ehost')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n              ')
HaskellTokenType.conidRegexp ('Just')