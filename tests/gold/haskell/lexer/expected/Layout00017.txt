HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Layout00017')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('foo')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE (' ')
HaskellTokenType.then ('then')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('putStrLn')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('yep')
HaskellTokenType." ('"')
WHITE_SPACE ('\n    ')
HaskellTokenType.else ('else')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('putStrLn')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('nope')
HaskellTokenType." ('"')