HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Layout00003')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('pretty')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE ('\n   ')
HaskellTokenType.varidRegexp ('myVcat')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE ('\n       ')
HaskellTokenType.( ('(')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('mbHead')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n           ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('h')
HaskellTokenType.) (')')