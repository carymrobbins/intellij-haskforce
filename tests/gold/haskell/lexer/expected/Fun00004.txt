HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE ViewPatterns ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE TypeOperators')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE RankNTypes ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE FlexibleContexts ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE UnboxedTuples ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Fun00004')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.haddock ('-- | A record with options for explicit passing in rewrite rules.\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FeldOpts')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FeldOpts')
WHITE_SPACE ('\n    ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('targets')
WHITE_SPACE ('    ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Target')
HaskellTokenType.] (']')
WHITE_SPACE ('\n    ')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n\n')
HaskellTokenType.haddock ('-- | Default options.\n')
HaskellTokenType.varidRegexp ('defaultFeldOpts')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FeldOpts')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('defaultFeldOpts')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('FeldOpts')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('targets')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n\n')
HaskellTokenType.haddock ('-- | Insert a variable into the environment\n')
HaskellTokenType.varidRegexp ('localVar')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typeable')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('VarId')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Info')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Opt')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Opt')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('localVar')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('v')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('info')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('local')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('env')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('env')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
HaskellTokenType.varidRegexp ('varEnv')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('v')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('SomeInfo')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('info')
HaskellTokenType.) (')')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('varEnv')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('env')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n\n')
HaskellTokenType.haddock ('-- | It the expression is a literal, its value is returned, otherwise 'Nothing'\n')
HaskellTokenType.varidRegexp ('viewLiteral')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.forall ('forall')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('info')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Literal')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Type')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':<:')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dom')
HaskellTokenType.) (')')
WHITE_SPACE ('\n            ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('ASTF')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Decor')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('info')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('dom')
WHITE_SPACE (' ')
HaskellTokenType.Consym (':||')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Typeable')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Maybe')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('viewLiteral')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('prjF')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('C'')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Literal')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('viewLiteral')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Nothing')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('g')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.(# ('(#')
WHITE_SPACE (' ')
HaskellTokenType.#) ('#)')