HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE Arrows ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE RankNTypes ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE UnicodeSyntax ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Unicode00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Control.Arrow')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Control.Monad')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.qualified ('qualified')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Control.Category')
WHITE_SPACE (' ')
HaskellTokenType.as ('as')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Cat')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data.List')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data.Maybe')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('System.Random')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('map'')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.forall ('∀')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('map'')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('map')
WHITE_SPACE ('\n\n')
HaskellTokenType.newtype ('newtype')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('unCircuit')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.} ('}')
WHITE_SPACE ('\n\n')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Cat.Category')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('id')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('Cat.id')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE ('\n    ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('.')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dot')
WHITE_SPACE ('\n      ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n        ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir2')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`dot`')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir1')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE ('\n            ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('cir1'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir1')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n                ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('cir2'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir2')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('\n            ')
HaskellTokenType.in ('in')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('cir2'')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`dot`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir1'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Arrow')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('arr')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('arr')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('first')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE ('\n        ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('cir'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('\n        ')
HaskellTokenType.in ('in')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('first')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('c')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('d')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('runCircuit')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('runCircuit')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
WHITE_SPACE ('   ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE ('     ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('runCircuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.: (':')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE ('\n    ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('cir'')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('x'')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('unCircuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n    ')
HaskellTokenType.in ('in')
WHITE_SPACE ('  ')
HaskellTokenType.varidRegexp ('x'')
WHITE_SPACE (' ')
HaskellTokenType.: (':')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('runCircuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir'')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('runCircuit')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('runCircuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('inputs')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('snd')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('mapAccumL')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('cir')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('unCircuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('inputs')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('runCircuit')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('runCircuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('inputs')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('snd')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('mapAccumL')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('unCircuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('cir')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('inputs')
WHITE_SPACE ('\n\n')
HaskellTokenType.haddock ('-- | Accumulator that outputs a value determined by the supplied function.\n')
HaskellTokenType.varidRegexp ('accum')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('accum')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('input')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE ('\n    ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('output')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc'')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('input')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`f`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc')
WHITE_SPACE ('\n    ')
HaskellTokenType.in ('in')
WHITE_SPACE ('  ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('accum')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc'')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('output')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.haddock ('-- | Accumulator that outputs the accumulator value.\n')
HaskellTokenType.varidRegexp ('accum'')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('accum'')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('accum')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('acc')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.\ ('\')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b'')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`f`')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b')
WHITE_SPACE (' ')
HaskellTokenType.in ('in')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('b'')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('b'')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('total')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Num')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.=> ('⇒')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('total')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('accum'')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('0')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('+')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('mean1')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Fractional')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.=> ('⇒')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('mean1')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('total')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('&&&')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('const')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('^>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('total')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('>>>')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('arr')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('uncurry')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('/')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('mean2')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Fractional')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.=> ('⇒')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('mean2')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('proc')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('value')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE (' ')
HaskellTokenType.<- ('←')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('total')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('↢')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('value')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE (' ')
HaskellTokenType.<- ('←')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('total')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('↢')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('returnA')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('↢')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('t')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('/')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('generator')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Random')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.=> ('⇒')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('StdGen')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('generator')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('range')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rng')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('accum')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rng')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('$')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rng')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('randomR')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('range')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rng')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('dictionary')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('dog')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('cat')
HaskellTokenType." ('"')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('bird')
HaskellTokenType." ('"')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('pickWord')
WHITE_SPACE (' ')
HaskellTokenType.:: ('∷')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('StdGen')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Circuit')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('String')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('pickWord')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rng')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('proc')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('→')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('idx')
WHITE_SPACE (' ')
HaskellTokenType.<- ('←')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('generator')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.integertoken ('0')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('length')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dictionary')
HaskellTokenType.Varsym ('-')
HaskellTokenType.integertoken ('1')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('rng')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('↢')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('returnA')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('↢')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('dictionary')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('!!')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('idx')