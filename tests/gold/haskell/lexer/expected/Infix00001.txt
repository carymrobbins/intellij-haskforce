HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Infix00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('val')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('1')
WHITE_SPACE (' ')
HaskellTokenType.Infix varid ('`Prelude.elem`')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.integertoken ('1')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('2')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
HaskellTokenType.] (']')