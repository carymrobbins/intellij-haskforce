HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Layout00011')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('compileProg')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('env')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('loc')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('In')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('App')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Ut.Switch')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('tree')
HaskellTokenType.@ ('@')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('In')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('App')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Ut.Condition')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('In')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('App')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Ut.Equal')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType._ ('_')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('scrutinee')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('compileExpr')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('env')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('alts')
WHITE_SPACE ('      ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('chaseTree')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('env')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('loc')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('s')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('tree')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('tellProg')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Switch')
HaskellTokenType.{ ('{')
HaskellTokenType... ('..')
HaskellTokenType.} ('}')
HaskellTokenType.] (']')