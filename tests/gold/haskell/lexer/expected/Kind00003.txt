HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE DataKinds ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE KindSignatures ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE GADTs ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE TypeOperators ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Kind00003')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n\n')
HaskellTokenType.{- ('{-')
HaskellTokenType.commenttext ('\n')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext (' FIXME: Waiting on https://github.com/haskell')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('suite/haskell')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('src')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('exts/issues/125\ndata HList :: [*] ')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('> * where\n  HNil  :: HList '[]\n  HCons :: a ')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('> HList t ')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('> HList (a ': t)\n\n')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext (' FIXME: Waiting on https://github.com/haskell')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('suite/haskell')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('src')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('exts/issues/124\ndata Tuple :: (*,*) ')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('> * where\n  Tuple :: a ')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('> b ')
HaskellTokenType.commenttext ('-')
HaskellTokenType.commenttext ('> Tuple '(a,b)\n')
HaskellTokenType.-} ('-}')
WHITE_SPACE ('\n\n\n')
HaskellTokenType.class ('class')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('C1')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
WHITE_SPACE (' ')
HaskellTokenType.{- ('{-')
HaskellTokenType.commenttext (' 1 ')
HaskellTokenType.-} ('-}')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('c')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('proxy')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Int')
WHITE_SPACE ('\n\n')
HaskellTokenType.class ('class')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('C2')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('*')
WHITE_SPACE (' ')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.class ('class')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('C3')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Int')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Double')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.class ('class')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('C4')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('*')
WHITE_SPACE (' ')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('X')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.Varsym ('*')
HaskellTokenType.] (']')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('x1')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('X')
WHITE_SPACE (' ')
HaskellTokenType.' (''')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Int')
HaskellTokenType.] (']')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('x2')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('X')
WHITE_SPACE (' ')
HaskellTokenType.' (''')
HaskellTokenType.[ ('[')
HaskellTokenType.conidRegexp ('Int')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Double')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Y')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('*')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('y1')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Y')
WHITE_SPACE (' ')
HaskellTokenType.' (''')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Double')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('y2')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Y')
WHITE_SPACE (' ')
HaskellTokenType.' (''')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Double')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.' (''')
HaskellTokenType.conidRegexp ('False')
WHITE_SPACE (' ')
HaskellTokenType.{- ('{-')
HaskellTokenType.commenttext ('comment')
HaskellTokenType.-} ('-}')
HaskellTokenType.) (')')