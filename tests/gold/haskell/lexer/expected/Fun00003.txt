HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE GADTs ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE KindSignatures ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE RankNTypes ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE ScopedTypeVariables ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE NPlusKPatterns ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE BangPatterns ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE ViewPatterns ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE PatternGuards ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Fun00003')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.instance ('instance')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Show')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Info')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE ('\n  ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n    ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
HaskellTokenType.@ ('@')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Info')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
HaskellTokenType.} ('}')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('infoType')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('szStr')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('srcStr')
WHITE_SPACE ('\n      ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('szStr')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('infoSize')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n          ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN ('AnySize')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n          ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE ('       ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (' | ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('str')
WHITE_SPACE ('\n\n        ')
HaskellTokenType.varidRegexp ('srcStr')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.case ('case')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('infoSource')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('i')
WHITE_SPACE (' ')
HaskellTokenType.of ('of')
WHITE_SPACE ('\n          ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('  ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType." ('"')
WHITE_SPACE ('\n          ')
HaskellTokenType.varidRegexp ('src')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType." ('"')
HaskellTokenType.STRINGTOKEN (' | ')
HaskellTokenType." ('"')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('src')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Set')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('cxt')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('*')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('*')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('*')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Set')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('g2')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.forall ('forall')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Eq')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Int')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Int')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('g2')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
WHITE_SPACE ('\n       ')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')
WHITE_SPACE ('\n       ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('g3')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.forall ('forall')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Eq')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.=> ('=>')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bool')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('*')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Int')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Int')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('g3')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('undefined')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.\ ('\')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.:: ('::')
HaskellTokenType.conidRegexp ('Int')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.:: ('::')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('g')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.:: ('::')
HaskellTokenType.varidRegexp ('a')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Int')
HaskellTokenType., (',')
HaskellTokenType.conidRegexp ('Bool')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType., (',')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('fac')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType.Varsym ('+')
HaskellTokenType.integertoken ('1')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('n')
HaskellTokenType.Varsym ('+')
HaskellTokenType.integertoken ('1')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('*')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('fac')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('n')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('foc')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('-')
HaskellTokenType.integertoken ('1')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('3')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lazyFunc')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('strictFunc')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('lazyFunc')
WHITE_SPACE (' ')
HaskellTokenType.~ ('~')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('strictFunc')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('!')
HaskellTokenType.varidRegexp ('v')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('firstZero')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('head')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.integertoken ('0')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('True')