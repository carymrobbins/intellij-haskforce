HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pragma00002')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Vector')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pull')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('DIM1')
WHITE_SPACE ('  ')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' UNPACK ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('!')
HaskellTokenType.varidRegexp ('a')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' CORE "foo" ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('show')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' CORE "bar" ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('g')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' SCC "X" ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.integertoken ('1')
HaskellTokenType... ('..')
HaskellTokenType.integertoken ('1000000')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.in ('in')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')