HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE TupleSections ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Fun00008')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('z')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.if ('if')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.then ('then')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.integertoken ('3')
HaskellTokenType.Varsym ('^')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.else ('else')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('^')
HaskellTokenType.integertoken ('8')
HaskellTokenType.) (')')
WHITE_SPACE ('\n      ')
HaskellTokenType.in ('in')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('-')
HaskellTokenType.integertoken ('1')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('main2')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.do ('do')
WHITE_SPACE ('\n            ')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ask')
WHITE_SPACE ('\n            ')
HaskellTokenType.let ('let')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('f')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE ('\n            ')
HaskellTokenType.integertoken ('13')
WHITE_SPACE ('\n')
HaskellTokenType.comment ('--            (,,3) FIXME: Add support for tuple sections.\n')
WHITE_SPACE ('            ')
HaskellTokenType.varidRegexp ('return')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('m')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('g')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('ys')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('zs')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('zs'')
WHITE_SPACE ('\n  ')
HaskellTokenType.where ('where')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.integertoken ('1')
HaskellTokenType... ('..')
HaskellTokenType.] (']')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('ys')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.integertoken ('1')
HaskellTokenType... ('..')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.] (']')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('zs')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.integertoken ('1')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType... ('..')
HaskellTokenType.] (']')
WHITE_SPACE ('\n        ')
HaskellTokenType.varidRegexp ('zs'')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.integertoken ('1')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('x')
WHITE_SPACE (' ')
HaskellTokenType... ('..')
HaskellTokenType.( ('(')
HaskellTokenType.integertoken ('30')
HaskellTokenType.Varsym ('*')
HaskellTokenType.varidRegexp ('x')
HaskellTokenType.) (')')
HaskellTokenType.] (']')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('h')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.varidRegexp ('y')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
HaskellTokenType.] (']')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('++')
WHITE_SPACE (' ')
HaskellTokenType.[ ('[')
HaskellTokenType.( ('(')
HaskellTokenType.varidRegexp ('y')
HaskellTokenType., (',')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('z')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Just')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('y')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.| ('|')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('z')
WHITE_SPACE (' ')
HaskellTokenType.<- ('<-')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('xs')
WHITE_SPACE (' ')
HaskellTokenType.] (']')