Haskell File
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('TypeOperators')
    PsiElement(HaskellTokenType.#-})('#-}')
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('MagicHash')
    PsiElement(HaskellTokenType.#-})('#-}')
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Fun00009')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    INSTANCEDECL
      PsiElement(HaskellTokenType.instance)('instance')
      CTYPE
        CLSCONTEXT
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Sized')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.=>)('=>')
        CTYPE
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Sized')
            ATYPE
              PsiElement(HaskellTokenType.()('(')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Digit')
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('a')
              PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.where)('where')
      PPRAGMA
        PsiElement(HaskellTokenType.{-#)('{-#')
        PsiElement(HaskellTokenType.PRAGMA)('SPECIALIZE')
        PsiElement(HaskellTokenType.PRAGMA)('instance')
        PsiElement(HaskellTokenType.PRAGMA)('Sized')
        PsiElement(HaskellTokenType.PRAGMA)('(Digit')
        PsiElement(HaskellTokenType.PRAGMA)('(Elem')
        PsiElement(HaskellTokenType.PRAGMA)('a))')
        PsiElement(HaskellTokenType.#-})('#-}')
      PPRAGMA
        PsiElement(HaskellTokenType.{-#)('{-#')
        PsiElement(HaskellTokenType.PRAGMA)('SPECIALIZE')
        PsiElement(HaskellTokenType.PRAGMA)('instance')
        PsiElement(HaskellTokenType.PRAGMA)('Sized')
        PsiElement(HaskellTokenType.PRAGMA)('(Digit')
        PsiElement(HaskellTokenType.PRAGMA)('(Node')
        PsiElement(HaskellTokenType.PRAGMA)('a))')
        PsiElement(HaskellTokenType.#-})('#-}')
      IDECL
        FUNORPATDECL
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('size')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('xs')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('foldl')
              PsiElement(HaskellTokenType.()('(')
              EXP
                PsiElement(HaskellTokenType.\)('\')
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('i')
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('i')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.+)('+')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('size')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('x')
              PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.integertoken)('0')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('xs')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('f')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.case)('case')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
          PsiElement(HaskellTokenType.of)('of')
          ALT
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Just')
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
            PsiElement(HaskellTokenType.|)('|')
            GUARD
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('null')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              PsiElement(HaskellTokenType.floattoken)('9.3')
          ALT
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Nothing')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              PsiElement(HaskellTokenType.floattoken)('7.1')
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('a1')
              QTYCONOP
                QTYCONSYM
                  QCONSYM
                    CONSYM
                      PsiElement(HaskellTokenType.Consym)(':<')
              TYPEE
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('a2')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Foo')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('f1')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          LETEXP
            PsiElement(HaskellTokenType.let)('let')
            GENDECL
              VARS
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
              PsiElement(HaskellTokenType.::)('::')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Float')
                    PsiElement(HaskellTokenType.#)('#')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  PsiElement(HaskellTokenType.floattoken)('10.2#')
            GENDECL
              VARS
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('y')
              PsiElement(HaskellTokenType.::)('::')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Double')
                    PsiElement(HaskellTokenType.#)('#')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('y')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  PsiElement(HaskellTokenType.floattoken)('10.7##')
            GENDECL
              VARS
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('z')
              PsiElement(HaskellTokenType.::)('::')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Int')
                    PsiElement(HaskellTokenType.#)('#')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('z')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  PsiElement(HaskellTokenType.integertoken)('1#')
            GENDECL
              VARS
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
              PsiElement(HaskellTokenType.::)('::')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Word')
                    PsiElement(HaskellTokenType.#)('#')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  PsiElement(HaskellTokenType.integertoken)('9##')
            GENDECL
              VARS
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('b')
              PsiElement(HaskellTokenType.::)('::')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Char')
                    PsiElement(HaskellTokenType.#)('#')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('b')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  PsiElement(HaskellTokenType.chartoken)(''B'#')
            GENDECL
              VARS
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('c')
              PsiElement(HaskellTokenType.::)('::')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('String')
                    PsiElement(HaskellTokenType.#)('#')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('c')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  PSTRINGTOKEN
                    PsiElement(HaskellTokenType.")('"')
                    PsiElement(HaskellTokenType.STRINGTOKEN)('Hello, world!')
                    PsiElement(HaskellTokenType.")('"')
                  PsiElement(HaskellTokenType.#)('#')
            PsiElement(HaskellTokenType.in)('in')
            EXP
              PsiElement(HaskellTokenType.integertoken)('19')
