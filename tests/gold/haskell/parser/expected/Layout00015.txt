Haskell File
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Layout00015')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('decodeType')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              PsiElement(HaskellTokenType.[)('[')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Type')
              PsiElement(HaskellTokenType.])(']')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('decodeType')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('s')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('goL')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
          PsiElement(HaskellTokenType.[)('[')
          PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.where)('where')
        FUNORPATDECL
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('goL')
          PsiElement(HaskellTokenType.[)('[')
          PsiElement(HaskellTokenType.])(']')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('acc')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('reverse')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('acc')
        FUNORPATDECL
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('goL')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('s')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('acc')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('goL')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('rest'')
              PsiElement(HaskellTokenType.()('(')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('out')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType.:)(':')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('acc')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.where)('where')
            FUNORPATDECL
              PAT
                PsiElement(HaskellTokenType.()('(')
                PAT
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('out')
                PsiElement(HaskellTokenType.,)(',')
                PAT
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('rest')
                PsiElement(HaskellTokenType.))(')')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('go')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('s')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('rest'')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  PsiElement(HaskellTokenType.case)('case')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('rest')
                  PsiElement(HaskellTokenType.of)('of')
                  ALT
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''_'')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('t')
                    PsiElement(HaskellTokenType.->)('->')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('t')
                  ALT
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('rest')
        FUNORPATDECL
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('go')
          PsiElement(HaskellTokenType.()('(')
          PAT
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('stripPrefix')
          PSTRINGTOKEN
            PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.STRINGTOKEN)('void')
            PsiElement(HaskellTokenType.")('"')
          PsiElement(HaskellTokenType.->)('->')
          PAT
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Just')
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('t')
          PsiElement(HaskellTokenType.))(')')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('VoidType')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('t')
              PsiElement(HaskellTokenType.))(')')
        FUNORPATDECL
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('go')
          PsiElement(HaskellTokenType.()('(')
          PAT
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('stripPrefix')
          PSTRINGTOKEN
            PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.STRINGTOKEN)('bool')
            PsiElement(HaskellTokenType.")('"')
          PsiElement(HaskellTokenType.->)('->')
          PAT
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Just')
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('t')
          PsiElement(HaskellTokenType.))(')')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('MachineVector')
                PsiElement(HaskellTokenType.integertoken)('1')
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('BoolType')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('t')
              PsiElement(HaskellTokenType.))(')')