Haskell File
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Case00001')
    PsiElement(HaskellTokenType.where)('where')
  PsiComment(HaskellTokenType.comment)('-- Ensure broken case expressions don't break the parser.\n')
  BODY
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('connect')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Maybe')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('IO')
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Pool')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('connect')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('ehost')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('etcd')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('ehost')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('h')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('createClient')
                  LISTLIKE
                    PsiElement(HaskellTokenType.[)('[')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('h')
                    PsiElement(HaskellTokenType.])(']')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('connect'')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('ehost')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('etcd')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('ehost')
              PsiElement(HaskellTokenType.of)('of')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')