Haskell File
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('ViewPatterns')
    PsiElement(HaskellTokenType.#-})('#-}')
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('TypeOperators')
    PsiElement(HaskellTokenType.#-})('#-}')
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('RankNTypes')
    PsiElement(HaskellTokenType.#-})('#-}')
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('FlexibleContexts')
    PsiElement(HaskellTokenType.#-})('#-}')
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('UnboxedTuples')
    PsiElement(HaskellTokenType.#-})('#-}')
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Fun00004')
    PsiElement(HaskellTokenType.where)('where')
  PsiComment(HaskellTokenType.haddock)('-- | A record with options for explicit passing in rewrite rules.\n')
  BODY
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('FeldOpts')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('FeldOpts')
        PsiElement(HaskellTokenType.{)('{')
        VARS
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('targets')
        PsiElement(HaskellTokenType.::)('::')
        TYPEE
          ATYPE
            PsiElement(HaskellTokenType.[)('[')
            CTYPE
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Target')
            PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.})('}')
    PsiComment(HaskellTokenType.haddock)('-- | Default options.\n')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('defaultFeldOpts')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('FeldOpts')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('defaultFeldOpts')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('FeldOpts')
          PsiElement(HaskellTokenType.{)('{')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('targets')
          PsiElement(HaskellTokenType.=)('=')
          EXP
            PsiElement(HaskellTokenType.[)('[')
            PsiElement(HaskellTokenType.])(']')
          PsiElement(HaskellTokenType.})('}')
    PsiComment(HaskellTokenType.haddock)('-- | Insert a variable into the environment\n')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('localVar')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        CLSCONTEXT
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Typeable')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('b')
        PsiElement(HaskellTokenType.=>)('=>')
        CTYPE
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('VarId')
            PsiElement(HaskellTokenType.->)('->')
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Info')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('b')
              PsiElement(HaskellTokenType.->)('->')
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Opt')
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('a')
                PsiElement(HaskellTokenType.->)('->')
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Opt')
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('a')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('localVar')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('v')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('info')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('local')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.$)('$')
          PsiElement(HaskellTokenType.\)('\')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('env')
          PsiElement(HaskellTokenType.->)('->')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('env')
            PsiElement(HaskellTokenType.{)('{')
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('varEnv')
            PsiElement(HaskellTokenType.=)('=')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('v')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('SomeInfo')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('info')
              PsiElement(HaskellTokenType.))(')')
              QOP
                QVAROP
                  QVARSYM
                    VARSYM
                      PsiElement(HaskellTokenType.:)(':')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('varEnv')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('env')
            PsiElement(HaskellTokenType.})('}')
    PsiComment(HaskellTokenType.haddock)('-- | It the expression is a literal, its value is returned, otherwise 'Nothing'\n')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('viewLiteral')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        PsiElement(HaskellTokenType.forall)('forall')
        TV_BNDR
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('info')
        TV_BNDR
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('dom')
        TV_BNDR
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType..)('.')
        CTYPE
          CLSCONTEXT
            ATYPE
              PsiElement(HaskellTokenType.()('(')
              CTYPE
                TYPEE
                  ATYPE
                    PsiElement(HaskellTokenType.()('(')
                    CTYPE
                      TYPEE
                        ATYPE
                          OQTYCON
                            QTYCON
                              TYCON
                                CONID
                                  PsiElement(HaskellTokenType.conidRegexp)('Literal')
                        QTYCONOP
                          QTYCONSYM
                            QCONSYM
                              CONSYM
                                PsiElement(HaskellTokenType.Consym)(':||')
                        TYPEE
                          ATYPE
                            OQTYCON
                              QTYCON
                                TYCON
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('Type')
                    PsiElement(HaskellTokenType.))(')')
                  QTYCONOP
                    QTYCONSYM
                      QCONSYM
                        CONSYM
                          PsiElement(HaskellTokenType.Consym)(':<:')
                  TYPEE
                    ATYPE
                      TYVAR
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('dom')
              PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.=>)('=>')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('ASTF')
              ATYPE
                PsiElement(HaskellTokenType.()('(')
                CTYPE
                  TYPEE
                    ATYPE
                      OQTYCON
                        QTYCON
                          TYCON
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('Decor')
                    ATYPE
                      TYVAR
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('info')
                    ATYPE
                      PsiElement(HaskellTokenType.()('(')
                      CTYPE
                        TYPEE
                          ATYPE
                            TYVAR
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('dom')
                          QTYCONOP
                            QTYCONSYM
                              QCONSYM
                                CONSYM
                                  PsiElement(HaskellTokenType.Consym)(':||')
                          TYPEE
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('Typeable')
                      PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.))(')')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('a')
              PsiElement(HaskellTokenType.->)('->')
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Maybe')
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('a')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('viewLiteral')
      PsiElement(HaskellTokenType.()('(')
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('prjF')
      PsiElement(HaskellTokenType.->)('->')
      PAT
        QCON
          QCONID
            CONID
              PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.()('(')
        PAT
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('C'')
          PsiElement(HaskellTokenType.()('(')
          PAT
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Literal')
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
          PsiElement(HaskellTokenType.))(')')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('Just')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('viewLiteral')
      PsiElement(HaskellTokenType._)('_')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('Nothing')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('g')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.(#)('(#')
          PsiElement(HaskellTokenType.#))('#)')
