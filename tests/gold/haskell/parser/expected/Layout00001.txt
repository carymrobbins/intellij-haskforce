Haskell File
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Layout00001')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('topLexer')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            PsiElement(HaskellTokenType.()('(')
            CTYPE
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Loc')
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Token')
            PsiElement(HaskellTokenType.))(')')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('topLexer')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('t')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              PsiElement(HaskellTokenType.if)('if')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('bol'')
              PsiElement(HaskellTokenType.then)('then')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('lexBOL')
              PsiElement(HaskellTokenType.else)('else')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('lexToken')
            PsiComment(HaskellTokenType.comment)('-- t\n')
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('el')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('return')
              PsiElement(HaskellTokenType.integertoken)('2')