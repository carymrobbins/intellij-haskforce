Haskell File
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('AStack00001')
    EXPORTS
      PsiElement(HaskellTokenType.()('(')
      EXPORT
        QTYCON
          TYCON
            CONID
              PsiElement(HaskellTokenType.conidRegexp)('Stack')
      PsiElement(HaskellTokenType.,)(',')
      EXPORT
        QVAR
          QVARID
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('push')
      PsiElement(HaskellTokenType.,)(',')
      EXPORT
        QVAR
          QVARID
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('pop')
      PsiElement(HaskellTokenType.,)(',')
      EXPORT
        QVAR
          QVARID
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('top')
      PsiElement(HaskellTokenType.,)(',')
      EXPORT
        QVAR
          QVARID
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('size')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Stack')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Empty')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('MkStack')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Stack')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('a')
          PsiElement(HaskellTokenType.))(')')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('push')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Stack')
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
            PsiElement(HaskellTokenType.->)('->')
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Stack')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('a')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('push')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('s')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('MkStack')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('size')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Stack')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Int')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('size')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('s')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('length')
          PsiElement(HaskellTokenType.()('(')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('stkToLst')
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('s')
          PsiElement(HaskellTokenType.))(')')
        PsiElement(HaskellTokenType.where)('where')
        FUNORPATDECL
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('stkToLst')
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('Empty')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              PsiElement(HaskellTokenType.[)('[')
              PsiElement(HaskellTokenType.])(']')
        FUNORPATDECL
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('stkToLst')
          PsiElement(HaskellTokenType.()('(')
          PAT
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('MkStack')
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('x')
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('s')
          PsiElement(HaskellTokenType.))(')')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')
              QOP
                QVAROP
                  QVARSYM
                    VARSYM
                      PsiElement(HaskellTokenType.:)(':')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('xs')
            PsiElement(HaskellTokenType.where)('where')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('xs')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('stkToLst')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('s')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('pop')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Stack')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              PsiElement(HaskellTokenType.()('(')
              CTYPE
                TYPEE
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('a')
              PsiElement(HaskellTokenType.,)(',')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Stack')
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('a')
              PsiElement(HaskellTokenType.))(')')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('pop')
      PsiElement(HaskellTokenType.()('(')
      PAT
        QCON
          QCONID
            CONID
              PsiElement(HaskellTokenType.conidRegexp)('MkStack')
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('x')
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.))(')')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.()('(')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.case)('case')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.of)('of')
            ALT
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('r')
              PsiElement(HaskellTokenType.->)('->')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('i')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('r')
              PsiElement(HaskellTokenType.where)('where')
              FUNORPATDECL
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('i')
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
                RHS
                  PsiElement(HaskellTokenType.=)('=')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('x')
          PsiElement(HaskellTokenType.))(')')
    PsiComment(HaskellTokenType.comment)('-- (pop Empty) is an error  \n')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('top')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Stack')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('top')
      PsiElement(HaskellTokenType.()('(')
      PAT
        QCON
          QCONID
            CONID
              PsiElement(HaskellTokenType.conidRegexp)('MkStack')
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('x')
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.))(')')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
    PsiComment(HaskellTokenType.comment)('-- (top Empty) is an error')