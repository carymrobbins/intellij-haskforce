Haskell File
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('OPTIONS_GHC')
    PsiElement(HaskellTokenType.PRAGMA)('-fglasgow-exts')
    PsiElement(HaskellTokenType.#-})('#-}')
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('ANN')
    PsiElement(HaskellTokenType.PRAGMA)('module')
    PsiElement(HaskellTokenType.PRAGMA)('(Just')
    PsiElement(HaskellTokenType.PRAGMA)('"A')
    PsiElement(HaskellTokenType.PRAGMA)('`Maybe')
    PsiElement(HaskellTokenType.PRAGMA)('String'')
    PsiElement(HaskellTokenType.PRAGMA)('annotation")')
    PsiElement(HaskellTokenType.#-})('#-}')
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Pragma00001')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('ANN')
      PsiElement(HaskellTokenType.PRAGMA)('type')
      PsiElement(HaskellTokenType.PRAGMA)('Foo')
      PsiElement(HaskellTokenType.PRAGMA)('(Just')
      PsiElement(HaskellTokenType.PRAGMA)('"A')
      PsiElement(HaskellTokenType.PRAGMA)('`Maybe')
      PsiElement(HaskellTokenType.PRAGMA)('String'')
      PsiElement(HaskellTokenType.PRAGMA)('annotation")')
      PsiElement(HaskellTokenType.#-})('#-}')
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Foo')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Push')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('DIM1')
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Vector')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.=)('=')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Pull')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('DIM1')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('DEPRECATED')
      PsiElement(HaskellTokenType.PRAGMA)('Vector')
      PsiElement(HaskellTokenType.PRAGMA)('"Use')
      PsiElement(HaskellTokenType.PRAGMA)('Pull')
      PsiElement(HaskellTokenType.PRAGMA)('instead"')
      PsiElement(HaskellTokenType.#-})('#-}')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('unsafeVector')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('id')
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('WARNING')
      PsiElement(HaskellTokenType.PRAGMA)('unsafeVector')
      PsiElement(HaskellTokenType.PRAGMA)('"This')
      PsiElement(HaskellTokenType.PRAGMA)('is')
      PsiElement(HaskellTokenType.PRAGMA)('unsafe;')
      PsiElement(HaskellTokenType.PRAGMA)('I')
      PsiElement(HaskellTokenType.PRAGMA)('hope')
      PsiElement(HaskellTokenType.PRAGMA)('you')
      PsiElement(HaskellTokenType.PRAGMA)('know')
      PsiElement(HaskellTokenType.PRAGMA)('what')
      PsiElement(HaskellTokenType.PRAGMA)('you're')
      PsiElement(HaskellTokenType.PRAGMA)('doing"')
      PsiElement(HaskellTokenType.#-})('#-}')
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('INLINE')
      PsiElement(HaskellTokenType.PRAGMA)('unsafeVector')
      PsiElement(HaskellTokenType.#-})('#-}')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('safeVector')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('id')
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('NOINLINE')
      PsiElement(HaskellTokenType.PRAGMA)('[2]')
      PsiElement(HaskellTokenType.PRAGMA)('safeVector')
      PsiElement(HaskellTokenType.#-})('#-}')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('safeVector2')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('id')
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('NOINLINE')
      PsiElement(HaskellTokenType.PRAGMA)('[~2]')
      PsiElement(HaskellTokenType.PRAGMA)('safeVector2')
      PsiElement(HaskellTokenType.#-})('#-}')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('f')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        CLSCONTEXT
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Eq')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.=>)('=>')
        CTYPE
          TYPEE
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
            PsiElement(HaskellTokenType.->)('->')
            TYPEE
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('b')
              PsiElement(HaskellTokenType.->)('->')
              TYPEE
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('b')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('f')
      PsiElement(HaskellTokenType.integertoken)('0')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('f')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('a')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('f')
          PsiElement(HaskellTokenType.()('(')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
            QOP
              QVAROP
                QVARSYM
                  VARSYM
                    PsiElement(HaskellTokenType.-)('-')
            PsiElement(HaskellTokenType.integertoken)('1')
          PsiElement(HaskellTokenType.))(')')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('SPECIALISE')
      PsiElement(HaskellTokenType.PRAGMA)('f')
      PsiElement(HaskellTokenType.PRAGMA)('::')
      PsiElement(HaskellTokenType.PRAGMA)('Int')
      PsiElement(HaskellTokenType.PRAGMA)('->')
      PsiElement(HaskellTokenType.PRAGMA)('b')
      PsiElement(HaskellTokenType.PRAGMA)('->')
      PsiElement(HaskellTokenType.PRAGMA)('b')
      PsiElement(HaskellTokenType.#-})('#-}')
    PsiComment(HaskellTokenType.comment)('-- FIXME: Waiting for https://github.com/haskell-suite/haskell-src-exts/pull/112\n')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('g')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('INLINE_CONLIKE')
      PsiElement(HaskellTokenType.PRAGMA)('[1]')
      PsiElement(HaskellTokenType.PRAGMA)('g')
      PsiElement(HaskellTokenType.#-})('#-}')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('h')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('h')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('SPECIALISE')
      PsiElement(HaskellTokenType.PRAGMA)('INLINE')
      PsiElement(HaskellTokenType.PRAGMA)('[~2]')
      PsiElement(HaskellTokenType.PRAGMA)('h')
      PsiElement(HaskellTokenType.PRAGMA)('::')
      PsiElement(HaskellTokenType.PRAGMA)('Int')
      PsiElement(HaskellTokenType.PRAGMA)('->')
      PsiElement(HaskellTokenType.PRAGMA)('Int')
      PsiElement(HaskellTokenType.#-})('#-}')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('i')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('ANN')
      PsiElement(HaskellTokenType.PRAGMA)('i')
      PsiElement(HaskellTokenType.PRAGMA)('(Just')
      PsiElement(HaskellTokenType.PRAGMA)('"Hello")')
      PsiElement(HaskellTokenType.#-})('#-}')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('map2')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('map')
    PPRAGMA
      PsiElement(HaskellTokenType.{-#)('{-#')
      PsiElement(HaskellTokenType.PRAGMA)('RULES')
      PsiElement(HaskellTokenType.PRAGMA)('"map2/map2"')
      PsiElement(HaskellTokenType.PRAGMA)('forall')
      PsiElement(HaskellTokenType.PRAGMA)('f')
      PsiElement(HaskellTokenType.PRAGMA)('g')
      PsiElement(HaskellTokenType.PRAGMA)('xs.')
      PsiElement(HaskellTokenType.PRAGMA)('map2')
      PsiElement(HaskellTokenType.PRAGMA)('f')
      PsiElement(HaskellTokenType.PRAGMA)('(map2')
      PsiElement(HaskellTokenType.PRAGMA)('g')
      PsiElement(HaskellTokenType.PRAGMA)('xs)')
      PsiElement(HaskellTokenType.PRAGMA)('=')
      PsiElement(HaskellTokenType.PRAGMA)('map2')
      PsiElement(HaskellTokenType.PRAGMA)('(f.g)')
      PsiElement(HaskellTokenType.PRAGMA)('xs')
      PsiElement(HaskellTokenType.#-})('#-}')
