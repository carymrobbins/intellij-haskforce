Haskell File
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('LambdaCase')
    PsiElement(HaskellTokenType.#-})('#-}')
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('MultiWayIf')
    PsiElement(HaskellTokenType.#-})('#-}')
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('RecursiveDo')
    PsiElement(HaskellTokenType.#-})('#-}')
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('ImplicitParams')
    PsiElement(HaskellTokenType.#-})('#-}')
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('DataKinds')
    PsiElement(HaskellTokenType.#-})('#-}')
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Fun00011')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('ICon')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
        CONOP
          CONSYM
            PsiElement(HaskellTokenType.Consym)(':>')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('b')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('f')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            PsiElement(HaskellTokenType.[)('[')
            PsiElement(HaskellTokenType.])(']')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('()')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('f')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('undefined')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('g')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            PsiElement(HaskellTokenType.()('(')
            PsiElement(HaskellTokenType.->)('->')
            PsiElement(HaskellTokenType.))(')')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('b')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('g')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('foo')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('>>=')
          PsiElement(HaskellTokenType.\case)('\case')
          ALT
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Just')
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('x')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')
          ALT
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Nothing')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              PsiElement(HaskellTokenType.integertoken)('12')
          PsiComment(HaskellTokenType.{-)('{-')
          PsiComment(HaskellTokenType.commenttext)(' FIXME: Add support for MultiWayIf.\nh = if | True ')
          PsiComment(HaskellTokenType.commenttext)('-')
          PsiComment(HaskellTokenType.commenttext)('> 12\n       | False ')
          PsiComment(HaskellTokenType.commenttext)('-')
          PsiComment(HaskellTokenType.commenttext)('> 9\n')
          PsiComment(HaskellTokenType.-})('-}')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('i')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.mdo)('mdo')
          STMTS
            EXP
              PsiElement(HaskellTokenType.integertoken)('7')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('sort')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        CLSCONTEXT
          ATYPE
            PsiElement(HaskellTokenType.()('(')
            PsiElement(HaskellTokenType.?)('?')
            CTYPE
              TYPEE
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('cmp')
            PsiElement(HaskellTokenType.::)('::')
            KIND
              BKIND
                AKIND
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('a')
              PsiElement(HaskellTokenType.->)('->')
              KIND
                BKIND
                  AKIND
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('a')
                PsiElement(HaskellTokenType.->)('->')
                KIND
                  BKIND
                    AKIND
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Bool')
            PsiElement(HaskellTokenType.))(')')
        PsiElement(HaskellTokenType.=>)('=>')
        CTYPE
          TYPEE
            ATYPE
              PsiElement(HaskellTokenType.[)('[')
              CTYPE
                TYPEE
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('a')
              PsiElement(HaskellTokenType.])(']')
            PsiElement(HaskellTokenType.->)('->')
            TYPEE
              ATYPE
                PsiElement(HaskellTokenType.[)('[')
                CTYPE
                  TYPEE
                    ATYPE
                      TYVAR
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('a')
                PsiElement(HaskellTokenType.])(']')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('sort')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('sortBy')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.?)('?')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('cmp')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('clearPage')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('ArrPtr')
          ATYPE
            PsiElement(HaskellTokenType.integertoken)('4096')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Word8')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('IO')
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('()')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('clearPage')
      PsiElement(HaskellTokenType.()('(')
      PAT
        QCON
          QCONID
            CONID
              PsiElement(HaskellTokenType.conidRegexp)('ArrPtr')
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('p')
      PsiElement(HaskellTokenType.))(')')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('undefined')
    INSTANCEDECL
      PsiElement(HaskellTokenType.instance)('instance')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Has')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Point')
          ATYPE
            PSTRINGTOKEN
              PsiElement(HaskellTokenType.")('"')
              PsiElement(HaskellTokenType.STRINGTOKEN)('x')
              PsiElement(HaskellTokenType.")('"')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Int')
      PsiElement(HaskellTokenType.where)('where')
      IDECL
        FUNORPATDECL
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('from')
          PsiElement(HaskellTokenType.()('(')
          PAT
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Point')
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('x')
            PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType._)('_')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('y1')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('undefined')
          PsiElement(HaskellTokenType.::)('::')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Y')
            ATYPE
              PsiElement(HaskellTokenType.')(''')
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('()')
