Haskell File
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Operator00002')
    EXPORTS
      PsiElement(HaskellTokenType.()('(')
      EXPORT
        QVAR
          PsiElement(HaskellTokenType.()('(')
          QVARSYM
            CONID
              PsiElement(HaskellTokenType.conidRegexp)('Prelude')
            VARSYM
              PsiElement(HaskellTokenType.Varsym)('.:->')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      PsiElement(HaskellTokenType.qualified)('qualified')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Lib')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('f')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.case)('case')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
          PsiElement(HaskellTokenType.of)('of')
          ALT
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('y')
              QCONOP
                GCONSYM
                  QCONSYM
                    CONSYM
                      PsiElement(HaskellTokenType.Consym)(':->')
              PAT
                PsiElement(HaskellTokenType._)('_')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('y')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('f')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.case)('case')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
          PsiElement(HaskellTokenType.of)('of')
          ALT
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('y')
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('Lib')
              VARSYM
                PsiElement(HaskellTokenType.Varsym)('.:->')
              PAT
                PsiElement(HaskellTokenType._)('_')
            PsiElement(HaskellTokenType.->)('->')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('y')