Haskell File
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('OPTIONS_HADDOCK')
    PsiElement(HaskellTokenType.PRAGMA)('hide')
    PsiElement(HaskellTokenType.#-})('#-}')
  PsiComment(HaskellTokenType.comment)('-----------------------------------------------------------------------------\n')
  PsiComment(HaskellTokenType.haddock)('-- |\n')
  PsiComment(HaskellTokenType.comment)('-- Module      :  Language.Haskell.Exts.Annotated.InternalLexer\n')
  PsiComment(HaskellTokenType.comment)('-- Copyright   :  (c) The GHC Team, 1997-2000\n')
  PsiComment(HaskellTokenType.comment)('--                (c) Niklas Broberg, 2004-2009\n')
  PsiComment(HaskellTokenType.comment)('-- License     :  BSD-style (see the file LICENSE.txt)\n')
  PsiComment(HaskellTokenType.comment)('--\n')
  PsiComment(HaskellTokenType.comment)('-- Maintainer  :  Niklas Broberg, d00nibro@chalmers.se\n')
  PsiComment(HaskellTokenType.comment)('-- Stability   :  stable\n')
  PsiComment(HaskellTokenType.comment)('-- Portability :  portable\n')
  PsiComment(HaskellTokenType.comment)('--\n')
  PsiComment(HaskellTokenType.comment)('-- Lexer for Haskell, with some extensions.\n')
  PsiComment(HaskellTokenType.comment)('--\n')
  PsiComment(HaskellTokenType.comment)('-----------------------------------------------------------------------------\n')
  PsiComment(HaskellTokenType.comment)('-- ToDo: Introduce different tokens for decimal, octal and hexadecimal (?)\n')
  PsiComment(HaskellTokenType.comment)('-- ToDo: FloatTok should have three parts (integer part, fraction, exponent) (?)\n')
  PsiComment(HaskellTokenType.comment)('-- ToDo: Use a lexical analyser generator (lx?)\n')
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Language')
      PsiElement(HaskellTokenType..)('.')
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Haskell')
      PsiElement(HaskellTokenType..)('.')
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Exts')
      PsiElement(HaskellTokenType..)('.')
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('InternalLexer')
    EXPORTS
      PsiElement(HaskellTokenType.()('(')
      EXPORT
        QTYCON
          TYCON
            CONID
              PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.()('(')
        PsiElement(HaskellTokenType...)('..')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.,)(',')
      EXPORT
        QVAR
          QVARID
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('showToken')
      PsiElement(HaskellTokenType.,)(',')
      EXPORT
        QVAR
          QVARID
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('lexer')
      PsiElement(HaskellTokenType.,)(',')
      EXPORT
        QVAR
          QVARID
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('topLexer')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Language')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Haskell')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Exts')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('ParseMonad')
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Language')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Haskell')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Exts')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('SrcLoc')
      PsiElement(HaskellTokenType.hiding)('hiding')
      PsiElement(HaskellTokenType.()('(')
      IMPORTT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('loc')
      PsiElement(HaskellTokenType.))(')')
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Language')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Haskell')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Exts')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Comments')
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Language')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Haskell')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Exts')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Extension')
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Language')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Haskell')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Exts')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('ExtScheme')
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Prelude')
      PsiElement(HaskellTokenType.hiding)('hiding')
      PsiElement(HaskellTokenType.()('(')
      IMPORTT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('id')
      PsiElement(HaskellTokenType.,)(',')
      IMPORTT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('exponent')
      PsiElement(HaskellTokenType.))(')')
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Data')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Char')
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Data')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Ratio')
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Data')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('List')
      PsiElement(HaskellTokenType.()('(')
      IMPORTT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('intercalate')
      PsiElement(HaskellTokenType.,)(',')
      IMPORTT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('isPrefixOf')
      PsiElement(HaskellTokenType.))(')')
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Control')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Monad')
      PsiElement(HaskellTokenType.()('(')
      IMPORTT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('when')
      PsiElement(HaskellTokenType.))(')')
    PsiComment(HaskellTokenType.comment)('-- import Debug.Trace (trace)\n')
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('VarId')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('QVarId')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('IDupVarId')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- duplicable implicit parameter\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('ILinVarId')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- linear implicit parameter\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('ConId')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('QConId')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('DVarId')
        ATYPE
          PsiElement(HaskellTokenType.[)('[')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.])(']')
      PsiComment(HaskellTokenType.comment)('-- to enable varid's with '-' in them\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('VarSym')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('ConSym')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('QVarSym')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('QConSym')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('IntTok')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('FloatTok')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Rational')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Character')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('StringTok')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('IntTokHash')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- 1#\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('WordTokHash')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- 1##\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('FloatTokHash')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Rational')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- 1.0#\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('DoubleTokHash')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Rational')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- 1.0##\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('CharacterHash')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- c#\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('StringHash')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- "Hello world!"#\n')
      PsiComment(HaskellTokenType.comment)('-- Symbols\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('LeftParen')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RightParen')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('LeftHashParen')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RightHashParen')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('SemiColon')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('LeftCurly')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RightCurly')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('VRightCurly')
      PsiComment(HaskellTokenType.comment)('-- a virtual close brace\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('LeftSquare')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RightSquare')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('ParArrayLeftSquare')
      PsiComment(HaskellTokenType.comment)('-- [:\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('ParArrayRightSquare')
      PsiComment(HaskellTokenType.comment)('-- :]\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Comma')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Underscore')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('BackQuote')
      PsiComment(HaskellTokenType.comment)('-- Reserved operators\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Dot')
      PsiComment(HaskellTokenType.comment)('-- reserved for use with 'forall x . x'\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('DotDot')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Colon')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('QuoteColon')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('DoubleColon')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Equals')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Backslash')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('LeftArrow')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RightArrow')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('At')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Tilde')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('DoubleArrow')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Minus')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Exclamation')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Star')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('LeftArrowTail')
      PsiComment(HaskellTokenType.comment)('-- >-\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RightArrowTail')
      PsiComment(HaskellTokenType.comment)('-- -<\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('LeftDblArrowTail')
      PsiComment(HaskellTokenType.comment)('-- >>-\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RightDblArrowTail')
      PsiComment(HaskellTokenType.comment)('-- -<<\n')
      PsiComment(HaskellTokenType.comment)('-- Template Haskell\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('THExpQuote')
      PsiComment(HaskellTokenType.comment)('-- [| or [e|\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('THPatQuote')
      PsiComment(HaskellTokenType.comment)('-- [p|\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('THDecQuote')
      PsiComment(HaskellTokenType.comment)('-- [d|\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('THTypQuote')
      PsiComment(HaskellTokenType.comment)('-- [t|\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('THCloseQuote')
      PsiComment(HaskellTokenType.haddock)('-- |]\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('THIdEscape')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- dollar x\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('THParenEscape')
      PsiComment(HaskellTokenType.comment)('-- dollar (\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('THVarQuote')
      PsiComment(HaskellTokenType.comment)('-- 'x (but without the x)\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('THTyQuote')
      PsiComment(HaskellTokenType.comment)('-- ''T (but without the T)\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('THQuasiQuote')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('-- [$...|...]\n')
      PsiComment(HaskellTokenType.comment)('-- HaRP\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RPGuardOpen')
      PsiComment(HaskellTokenType.comment)('-- (|\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RPGuardClose')
      PsiComment(HaskellTokenType.haddock)('-- |)\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RPCAt')
      PsiComment(HaskellTokenType.comment)('-- @:\n')
      PsiComment(HaskellTokenType.comment)('-- Hsx\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XCodeTagOpen')
      PsiComment(HaskellTokenType.comment)('-- <%\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XCodeTagClose')
      PsiComment(HaskellTokenType.comment)('-- %>\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XStdTagOpen')
      PsiComment(HaskellTokenType.comment)('-- <\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XStdTagClose')
      PsiComment(HaskellTokenType.comment)('-- >\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XCloseTagOpen')
      PsiComment(HaskellTokenType.comment)('-- </\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XEmptyTagClose')
      PsiComment(HaskellTokenType.comment)('-- />\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XChildTagOpen')
      PsiComment(HaskellTokenType.comment)('-- <%> (note that close doesn't exist, it's XCloseTagOpen followed by XCodeTagClose)\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XRPatOpen')
      PsiComment(HaskellTokenType.comment)('-- <[\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('XRPatClose')
      PsiComment(HaskellTokenType.comment)('-- ]>\n')
      PsiComment(HaskellTokenType.comment)('-- Pragmas\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('PragmaEnd')
      PsiComment(HaskellTokenType.comment)('-- #-}\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('RULES')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('INLINE')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Bool')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('INLINE_CONLIKE')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE_INLINE')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Bool')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('SOURCE')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('DEPRECATED')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('WARNING')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('SCC')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('GENERATED')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('CORE')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('UNPACK')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Maybe')
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.,)(',')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.))(')')
      PsiComment(HaskellTokenType.comment)('--        | CFILES  String\n')
      PsiComment(HaskellTokenType.comment)('--        | INCLUDE String\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('LANGUAGE')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('ANN')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('MINIMAL')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('NO_OVERLAP')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('OVERLAP')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('INCOHERENT')
      PsiComment(HaskellTokenType.comment)('-- Reserved Ids\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_As')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_By')
      PsiComment(HaskellTokenType.comment)('-- transform list comprehensions\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Case')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Class')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Data')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Default')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Deriving')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Do')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_MDo')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Else')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Family')
      PsiComment(HaskellTokenType.comment)('-- indexed type families\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Forall')
      PsiComment(HaskellTokenType.comment)('-- universal/existential types\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Group')
      PsiComment(HaskellTokenType.comment)('-- transform list comprehensions\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Hiding')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_If')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Import')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_In')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Infix')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_InfixL')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_InfixR')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Instance')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Let')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Module')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_NewType')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Of')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Proc')
      PsiComment(HaskellTokenType.comment)('-- arrows\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Rec')
      PsiComment(HaskellTokenType.comment)('-- arrows\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Then')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Type')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Using')
      PsiComment(HaskellTokenType.comment)('-- transform list comprehensions\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Where')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Qualified')
      PsiComment(HaskellTokenType.comment)('-- FFI\n')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Foreign')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Export')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Safe')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Unsafe')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Threadsafe')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Interruptible')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_StdCall')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_CCall')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_CPlusPlus')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_DotNet')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Jvm')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_Js')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('KW_CApi')
      PsiElement(HaskellTokenType.|)('|')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('EOF')
      PsiElement(HaskellTokenType.deriving)('deriving')
      PsiElement(HaskellTokenType.()('(')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Eq')
      PsiElement(HaskellTokenType.,)(',')
      QTYCLS
        TYCLS
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Show')
      PsiElement(HaskellTokenType.))(')')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('reserved_ops')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            PsiElement(HaskellTokenType.[)('[')
            CTYPE
              TYPEE
                ATYPE
                  PsiElement(HaskellTokenType.()('(')
                  CTYPE
                    TYPEE
                      ATYPE
                        OQTYCON
                          QTYCON
                            TYCON
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('String')
                  PsiElement(HaskellTokenType.,)(',')
                  CTYPE
                    TYPEE
                      ATYPE
                        PsiElement(HaskellTokenType.()('(')
                        CTYPE
                          TYPEE
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('Token')
                        PsiElement(HaskellTokenType.,)(',')
                        CTYPE
                          TYPEE
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('Maybe')
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('ExtScheme')
                        PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.])(']')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('reserved_ops')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.[)('[')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('..')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('DotDot')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)(':')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Colon')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('::')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('DoubleColon')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('=')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Equals')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\\')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Backslash')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('|')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Bar')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('<-')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('LeftArrow')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('->')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('RightArrow')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('@')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('At')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('@:')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('RPCAt')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('RegularPatterns')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('~')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Tilde')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('=>')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('DoubleArrow')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('*')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Star')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('KindSignatures')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- Parallel arrays\n')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('[:')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('ParArrayLeftSquare')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ParallelArrays')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)(':]')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('ParArrayRightSquare')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ParallelArrays')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- Arrows notation\n')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('-<')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('LeftArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('>-')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('RightArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('-<<')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('LeftDblArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('>>-')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('RightDblArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- Unicode notation\n')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2190')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('LeftArrow')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2192')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('RightArrow')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x21d2')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('DoubleArrow')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2237')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('DoubleColon')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2919')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('LeftArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x291a')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('RightArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x291b')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('LeftDblArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x291c')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('RightDblArrowTail')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2605')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Star')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('KindSignatures')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                PsiElement(HaskellTokenType.STRINGTOKEN)('x2200')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Forall')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('All')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('UnicodeSyntax')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ExplicitForAll')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.])(']')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('special_varops')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            PsiElement(HaskellTokenType.[)('[')
            CTYPE
              TYPEE
                ATYPE
                  PsiElement(HaskellTokenType.()('(')
                  CTYPE
                    TYPEE
                      ATYPE
                        OQTYCON
                          QTYCON
                            TYCON
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('String')
                  PsiElement(HaskellTokenType.,)(',')
                  CTYPE
                    TYPEE
                      ATYPE
                        PsiElement(HaskellTokenType.()('(')
                        CTYPE
                          TYPEE
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('Token')
                        PsiElement(HaskellTokenType.,)(',')
                        CTYPE
                          TYPEE
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('Maybe')
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('ExtScheme')
                        PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.])(']')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('special_varops')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.[)('[')
          PsiComment(HaskellTokenType.comment)('-- the dot is only a special symbol together with forall, but can still be used as function composition\n')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('.')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Dot')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ExplicitForAll')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ExistentialQuantification')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('-')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Minus')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('!')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Exclamation')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.])(']')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('reserved_ids')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            PsiElement(HaskellTokenType.[)('[')
            CTYPE
              TYPEE
                ATYPE
                  PsiElement(HaskellTokenType.()('(')
                  CTYPE
                    TYPEE
                      ATYPE
                        OQTYCON
                          QTYCON
                            TYCON
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('String')
                  PsiElement(HaskellTokenType.,)(',')
                  CTYPE
                    TYPEE
                      ATYPE
                        PsiElement(HaskellTokenType.()('(')
                        CTYPE
                          TYPEE
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('Token')
                        PsiElement(HaskellTokenType.,)(',')
                        CTYPE
                          TYPEE
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('Maybe')
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('ExtScheme')
                        PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.])(']')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('reserved_ids')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.[)('[')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('_')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Underscore')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('by')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_By')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('TransformListComp')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('case')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Case')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('class')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Class')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('data')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Data')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('default')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Default')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('deriving')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Deriving')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('do')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Do')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('else')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Else')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('family')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Family')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('TypeFamilies')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- indexed type families\n')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('forall')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Forall')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ExplicitForAll')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ExistentialQuantification')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- universal/existential quantification\n')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('group')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Group')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('TransformListComp')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('if')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_If')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('import')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Import')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('in')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_In')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('infix')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Infix')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('infixl')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_InfixL')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('infixr')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_InfixR')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('instance')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Instance')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('let')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Let')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('mdo')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_MDo')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('RecursiveDo')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('module')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Module')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('newtype')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_NewType')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('of')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Of')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('proc')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Proc')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('rec')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Rec')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Arrows')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('RecursiveDo')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('DoRec')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('then')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Then')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('type')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Type')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('using')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Using')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('TransformListComp')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('where')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Where')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- FFI\n')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('foreign')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Foreign')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.])(']')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('special_varids')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            PsiElement(HaskellTokenType.[)('[')
            CTYPE
              TYPEE
                ATYPE
                  PsiElement(HaskellTokenType.()('(')
                  CTYPE
                    TYPEE
                      ATYPE
                        OQTYCON
                          QTYCON
                            TYCON
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('String')
                  PsiElement(HaskellTokenType.,)(',')
                  CTYPE
                    TYPEE
                      ATYPE
                        PsiElement(HaskellTokenType.()('(')
                        CTYPE
                          TYPEE
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('Token')
                        PsiElement(HaskellTokenType.,)(',')
                        CTYPE
                          TYPEE
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('Maybe')
                            ATYPE
                              OQTYCON
                                QTYCON
                                  TYCON
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('ExtScheme')
                        PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.])(']')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('special_varids')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.[)('[')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('as')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_As')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('qualified')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Qualified')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('hiding')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Hiding')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          PsiComment(HaskellTokenType.comment)('-- FFI\n')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('export')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Export')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('safe')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Safe')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('SafeImports')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Safe')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Trustworthy')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('unsafe')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Unsafe')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('threadsafe')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Threadsafe')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('interruptible')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Interruptible')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('InterruptibleFFI')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('stdcall')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_StdCall')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('ccall')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_CCall')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('cplusplus')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_CPlusPlus')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('dotnet')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_DotNet')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('jvm')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Jvm')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('js')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_Js')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('ForeignFunctionInterface')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('capi')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('KW_CApi')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Just')
                PsiElement(HaskellTokenType.()('(')
                EXP
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Any')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('CApiFFI')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.])(']')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('pragmas')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            PsiElement(HaskellTokenType.[)('[')
            CTYPE
              TYPEE
                ATYPE
                  PsiElement(HaskellTokenType.()('(')
                  CTYPE
                    TYPEE
                      ATYPE
                        OQTYCON
                          QTYCON
                            TYCON
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('String')
                  PsiElement(HaskellTokenType.,)(',')
                  CTYPE
                    TYPEE
                      ATYPE
                        OQTYCON
                          QTYCON
                            TYCON
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('Token')
                  PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.])(']')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('pragmas')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.[)('[')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('rules')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('RULES')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('inline')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('INLINE')
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('True')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('noinline')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('INLINE')
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('False')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('notinline')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('INLINE')
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('False')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('specialise')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('specialize')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('source')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('SOURCE')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('deprecated')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('DEPRECATED')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('warning')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('WARNING')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('ann')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('ANN')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('scc')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('SCC')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('generated')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('GENERATED')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('core')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('CORE')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('unpack')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('UNPACK')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('language')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('LANGUAGE')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('minimal')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('MINIMAL')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('no_overlap')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('NO_OVERLAP')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('overlap')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('OVERLAP')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('incoherent')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('INCOHERENT')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.,)(',')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('options')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('undefined')
            PsiElement(HaskellTokenType.))(')')
          PsiComment(HaskellTokenType.comment)('-- we'll tweak it before use - promise!\n')
          PsiComment(HaskellTokenType.comment)('-- ( "cfiles",            CFILES  undefined ), -- same here...\n')
          PsiComment(HaskellTokenType.comment)('-- ( "include",           INCLUDE undefined )  -- ...and here!\n')
          PsiElement(HaskellTokenType.])(']')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('isIdent')
        PsiElement(HaskellTokenType.,)(',')
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
        PsiElement(HaskellTokenType.,)(',')
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('isPragmaChar')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Bool')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('isIdent')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('c')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('isAlpha')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('c')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('||')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('isDigit')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('c')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('||')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('c')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('==')
          PsiElement(HaskellTokenType.chartoken)(''\''')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('||')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('c')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('==')
          PsiElement(HaskellTokenType.chartoken)(''_'')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('c')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('c')
          QOP
            QVAROP
              PsiElement(HaskellTokenType.`)('`')
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('elem')
              PsiElement(HaskellTokenType.`)('`')
          PSTRINGTOKEN
            PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.STRINGTOKEN)(':!#%&*./?@')
            PsiElement(HaskellTokenType.STRINGTOKEN)('\\')
            PsiElement(HaskellTokenType.STRINGTOKEN)('-')
            PsiElement(HaskellTokenType.")('"')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('||')
          PsiElement(HaskellTokenType.()('(')
          EXP
            PsiElement(HaskellTokenType.()('(')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('isSymbol')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('c')
              QOP
                QVAROP
                  QVARSYM
                    VARSYM
                      PsiElement(HaskellTokenType.Varsym)('||')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('isPunctuation')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('c')
            PsiElement(HaskellTokenType.))(')')
            QOP
              QVAROP
                QVARSYM
                  VARSYM
                    PsiElement(HaskellTokenType.Varsym)('&&')
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('not')
            PsiElement(HaskellTokenType.()('(')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('c')
              QOP
                QVAROP
                  PsiElement(HaskellTokenType.`)('`')
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('elem')
                  PsiElement(HaskellTokenType.`)('`')
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('(),;[]`{}_\"'')
                PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.))(')')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('isPragmaChar')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('c')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('isAlphaNum')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('c')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('||')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('c')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('==')
          PsiElement(HaskellTokenType.chartoken)(''_'')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('matchChar')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('String')
            PsiElement(HaskellTokenType.->)('->')
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Lex')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('a')
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('()')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('matchChar')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('c')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('msg')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            EXP
              PsiElement(HaskellTokenType.if)('if')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('null')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType.Varsym)('||')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('head')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType.Varsym)('/=')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('c')
              PsiElement(HaskellTokenType.then)('then')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('fail')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('msg')
              PsiElement(HaskellTokenType.else)('else')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('discard')
                PsiElement(HaskellTokenType.integertoken)('1')
          PsiComment(HaskellTokenType.comment)('-- The top-level lexer.\n')
          PsiComment(HaskellTokenType.comment)('-- We need to know whether we are at the beginning of the line to decide\n')
          PsiComment(HaskellTokenType.comment)('-- whether to insert layout tokens.\n')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexer')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            PsiElement(HaskellTokenType.()('(')
            CTYPE
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Loc')
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Token')
                PsiElement(HaskellTokenType.->)('->')
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('P')
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('a')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('P')
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexer')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('runL')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('topLexer')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('topLexer')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            PsiElement(HaskellTokenType.()('(')
            CTYPE
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Loc')
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Token')
            PsiElement(HaskellTokenType.))(')')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('topLexer')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('b')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('pullCtxtFlag')
            EXP
              PsiElement(HaskellTokenType.if)('if')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('b')
              PsiElement(HaskellTokenType.then)('then')
              PsiComment(HaskellTokenType.comment)('-- trace (show cf ++ ": " ++ show VRightCurly) $\n')
              PsiComment(HaskellTokenType.comment)('-- the lex context state flags that we must do an empty {} - UGLY\n')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('setBOL')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType.Varsym)('>>')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType.Varsym)('>>=')
                PsiElement(HaskellTokenType.\)('\')
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('l')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Loc')
                    PsiElement(HaskellTokenType.()('(')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('mkSrcSpan')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('l')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('l')
                    PsiElement(HaskellTokenType.))(')')
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('VRightCurly')
                  PsiElement(HaskellTokenType.))(')')
              PsiElement(HaskellTokenType.else)('else')
              EXP
                PsiElement(HaskellTokenType.do)('do')
                STMTS
                  PAT
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.<-)('<-')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('checkBOL')
                  PAT
                    PsiElement(HaskellTokenType.()('(')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('bol'')
                    PsiElement(HaskellTokenType.,)(',')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('ws')
                    PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.<-)('<-')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiComment(HaskellTokenType.comment)('-- take care of whitespace in PCDATA\n')
                  PAT
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('ec')
                  PsiElement(HaskellTokenType.<-)('<-')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('getExtContext')
                  EXP
                    PsiElement(HaskellTokenType.case)('case')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('ec')
                    PsiElement(HaskellTokenType.of)('of')
                    PsiComment(HaskellTokenType.comment)('-- if there was no linebreak, and we are lexing PCDATA,\n')
                    PsiComment(HaskellTokenType.comment)('-- then we want to care about the whitespace.\n')
                    PsiComment(HaskellTokenType.comment)('-- We don't bother to test for XmlSyntax, since we\n')
                    PsiComment(HaskellTokenType.comment)('-- couldn't end up in ChildCtxt otherwise.\n')
                    ALT
                      PAT
                        QCON
                          QCONID
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('Just')
                        QCON
                          QCONID
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('ChildCtxt')
                      PsiElement(HaskellTokenType.|)('|')
                      GUARD
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('not')
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('bol'')
                        QOP
                          QVAROP
                            QVARSYM
                              VARSYM
                                PsiElement(HaskellTokenType.Varsym)('&&')
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('ws')
                      PsiElement(HaskellTokenType.->)('->')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                        QOP
                          QVAROP
                            QVARSYM
                              VARSYM
                                PsiElement(HaskellTokenType.Varsym)('>>=')
                        PsiElement(HaskellTokenType.\)('\')
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('l')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.$)('$')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('Loc')
                          PsiElement(HaskellTokenType.()('(')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('mkSrcSpan')
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('l')
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('l')
                          PsiElement(HaskellTokenType.))(')')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.$)('$')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                          PSTRINGTOKEN
                            PsiElement(HaskellTokenType.")('"')
                            PsiElement(HaskellTokenType.STRINGTOKEN)(' ')
                            PsiElement(HaskellTokenType.")('"')
                    ALT
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                      PsiElement(HaskellTokenType.->)('->')
                      EXP
                        PsiElement(HaskellTokenType.do)('do')
                        STMTS
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('startToken')
                          PAT
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('sl')
                          PsiElement(HaskellTokenType.<-)('<-')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                          PAT
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('t')
                          PsiElement(HaskellTokenType.<-)('<-')
                          EXP
                            PsiElement(HaskellTokenType.if)('if')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('bol'')
                            PsiElement(HaskellTokenType.then)('then')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('lexBOL')
                            PsiComment(HaskellTokenType.comment)('-- >>= \t -> trace ("BOL: " ++ show t) (return t)\n')
                            PsiElement(HaskellTokenType.else)('else')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('lexToken')
                          PsiComment(HaskellTokenType.comment)('-- >>= \t -> trace (show t) (return t)\n')
                          PAT
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('el')
                          PsiElement(HaskellTokenType.<-)('<-')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('return')
                            QOP
                              QVAROP
                                QVARSYM
                                  VARSYM
                                    PsiElement(HaskellTokenType.$)('$')
                            QCON
                              QCONID
                                CONID
                                  PsiElement(HaskellTokenType.conidRegexp)('Loc')
                            PsiElement(HaskellTokenType.()('(')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('mkSrcSpan')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('sl')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('el')
                            PsiElement(HaskellTokenType.))(')')
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('t')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Bool')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Lex')
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
            ATYPE
              PsiElement(HaskellTokenType.()('(')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Bool')
              PsiElement(HaskellTokenType.,)(',')
              CTYPE
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Bool')
              PsiElement(HaskellTokenType.))(')')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('bol')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('ignL')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('ignoreLinePragmasL')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              PsiComment(HaskellTokenType.comment)('-- If we find a recognised pragma, we don't want to treat it as a comment.\n')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''{'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''#'')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('rest')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isRecognisedPragma')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('rest')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('False')
                  PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isLinePragma')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('rest')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('not')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('ignL')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    PAT
                      PsiElement(HaskellTokenType.()('(')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('l')
                      PsiElement(HaskellTokenType.,)(',')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('fn')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexLinePragma')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('setSrcLineL')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('l')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('setLineFilenameL')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('fn')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('True')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''{'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('loc')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    PAT
                      PsiElement(HaskellTokenType.()('(')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('bol1')
                      PsiElement(HaskellTokenType.,)(',')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('bol')
                      PSTRINGTOKEN
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.")('"')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('loc2')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('pushComment')
                      QOP
                        QVAROP
                          QVARSYM
                            VARSYM
                              PsiElement(HaskellTokenType.$)('$')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Comment')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('mkSrcSpan')
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('loc')
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('loc2')
                      PsiElement(HaskellTokenType.))(')')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('reverse')
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('c')
                      PsiElement(HaskellTokenType.))(')')
                    PAT
                      PsiElement(HaskellTokenType.()('(')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('bol2')
                      PsiElement(HaskellTokenType.,)(',')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('bol1')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('bol2')
                      PsiElement(HaskellTokenType.,)(',')
                      EXP
                        QCON
                          QCONID
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.))(')')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''-'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('s1')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('all')
                  PsiElement(HaskellTokenType.()('(')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''-'')
                  PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('takeWhile')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('s1')
                  PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('loc')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('dashes')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      PsiElement(HaskellTokenType.()('(')
                      QOP
                        QVAROP
                          QVARSYM
                            VARSYM
                              PsiElement(HaskellTokenType.Varsym)('==')
                      PsiElement(HaskellTokenType.chartoken)(''-'')
                      PsiElement(HaskellTokenType.))(')')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('rest')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      PsiElement(HaskellTokenType.()('(')
                      QOP
                        QVAROP
                          QVARSYM
                            VARSYM
                              PsiElement(HaskellTokenType.Varsym)('/=')
                      PsiElement(HaskellTokenType.chartoken)(''\n'')
                      PsiElement(HaskellTokenType.))(')')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('s'')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('getInput')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('loc2')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('getSrcLocL')
                    PsiElement(HaskellTokenType.let)('let')
                    FUNORPATDECL
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('com')
                      RHS
                        PsiElement(HaskellTokenType.=)('=')
                        EXP
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('Comment')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('False')
                          PsiElement(HaskellTokenType.()('(')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('mkSrcSpan')
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('loc')
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('loc2')
                          PsiElement(HaskellTokenType.))(')')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.$)('$')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('dashes')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.Varsym)('++')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('rest')
                    EXP
                      PsiElement(HaskellTokenType.case)('case')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('s'')
                      PsiElement(HaskellTokenType.of)('of')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.[)('[')
                          PsiElement(HaskellTokenType.])(']')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('pushComment')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('com')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.Varsym)('>>')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          PsiElement(HaskellTokenType.()('(')
                          EXP
                            QCON
                              QCONID
                                CONID
                                  PsiElement(HaskellTokenType.conidRegexp)('False')
                          PsiElement(HaskellTokenType.,)(',')
                          EXP
                            QCON
                              QCONID
                                CONID
                                  PsiElement(HaskellTokenType.conidRegexp)('True')
                          PsiElement(HaskellTokenType.))(')')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType._)('_')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          PsiElement(HaskellTokenType.do)('do')
                          STMTS
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('pushComment')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('com')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace_')
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('True')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              PsiElement(HaskellTokenType.()('(')
                              EXP
                                QCON
                                  QCONID
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('True')
                              PsiElement(HaskellTokenType.,)(',')
                              EXP
                                QCON
                                  QCONID
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('True')
                              PsiElement(HaskellTokenType.))(')')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''\n'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace_')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('True')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        QCON
                          QCONID
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.,)(',')
                      EXP
                        QCON
                          QCONID
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.))(')')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''\t'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexTab')
                    PAT
                      PsiElement(HaskellTokenType.()('(')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.,)(',')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('bol')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.,)(',')
                      EXP
                        QCON
                          QCONID
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.))(')')
              ALT
                PAT
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('c')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    PAT
                      PsiElement(HaskellTokenType.()('(')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.,)(',')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('bol')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.,)(',')
                      EXP
                        QCON
                          QCONID
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('True')
                      PsiElement(HaskellTokenType.))(')')
              ALT
                PAT
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('False')
                  PsiElement(HaskellTokenType.))(')')
              PsiComment(HaskellTokenType.haddock)('-- | lexWhiteSpace without the return value.\n')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace_')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Bool')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Lex')
            ATYPE
              TYVAR
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('a')
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('()')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace_')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('bol')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              PsiElement(HaskellTokenType._)('_')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhiteSpace')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('bol')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('return')
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('()')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('isRecognisedPragma')
        PsiElement(HaskellTokenType.,)(',')
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('isLinePragma')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('String')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Bool')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('isRecognisedPragma')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('str')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.let)('let')
          FUNORPATDECL
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('pragma')
            RHS
              PsiElement(HaskellTokenType.=)('=')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('takeWhile')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('isPragmaChar')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType..)('.')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('dropWhile')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('isSpace')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType.$)('$')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('str')
          PsiElement(HaskellTokenType.in)('in')
          EXP
            PsiElement(HaskellTokenType.case)('case')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('lookupKnownPragma')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('pragma')
            PsiElement(HaskellTokenType.of)('of')
            ALT
              PAT
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Nothing')
              PsiElement(HaskellTokenType.->)('->')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('False')
            ALT
              PAT
                PsiElement(HaskellTokenType._)('_')
              PsiElement(HaskellTokenType.->)('->')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('True')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('isLinePragma')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('str')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.let)('let')
          FUNORPATDECL
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('pragma')
            RHS
              PsiElement(HaskellTokenType.=)('=')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('map')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('toLower')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType..)('.')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('takeWhile')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('isAlphaNum')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType..)('.')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('dropWhile')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('isSpace')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType.$)('$')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('str')
          PsiElement(HaskellTokenType.in)('in')
          EXP
            PsiElement(HaskellTokenType.case)('case')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('pragma')
            PsiElement(HaskellTokenType.of)('of')
            ALT
              PAT
                PSTRINGTOKEN
                  PsiElement(HaskellTokenType.")('"')
                  PsiElement(HaskellTokenType.STRINGTOKEN)('line')
                  PsiElement(HaskellTokenType.")('"')
              PsiElement(HaskellTokenType.->)('->')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('True')
            ALT
              PAT
                PsiElement(HaskellTokenType._)('_')
              PsiElement(HaskellTokenType.->)('->')
              EXP
                QCON
                  QCONID
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('False')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexLinePragma')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            PsiElement(HaskellTokenType.()('(')
            CTYPE
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Int')
            PsiElement(HaskellTokenType.,)(',')
            CTYPE
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('String')
            PsiElement(HaskellTokenType.))(')')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexLinePragma')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('discard')
              PsiElement(HaskellTokenType.integertoken)('3')
            PsiComment(HaskellTokenType.comment)('-- {-#\n')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('isSpace')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('discard')
              PsiElement(HaskellTokenType.integertoken)('4')
            PsiComment(HaskellTokenType.comment)('-- LINE\n')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('isSpace')
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('i')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('isDigit')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('when')
              PsiElement(HaskellTokenType.()('(')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('null')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('i')
              PsiElement(HaskellTokenType.))(')')
              QOP
                QVAROP
                  QVARSYM
                    VARSYM
                      PsiElement(HaskellTokenType.$)('$')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('fail')
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('Improperly formatted LINE pragma')
                PsiElement(HaskellTokenType.")('"')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('isSpace')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('matchChar')
              PsiElement(HaskellTokenType.chartoken)(''"'')
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('Improperly formatted LINE pragma')
                PsiElement(HaskellTokenType.")('"')
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('fn')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
              PsiElement(HaskellTokenType.()('(')
              QOP
                QVAROP
                  QVARSYM
                    VARSYM
                      PsiElement(HaskellTokenType.Varsym)('/=')
              PsiElement(HaskellTokenType.chartoken)(''"'')
              PsiElement(HaskellTokenType.))(')')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('matchChar')
              PsiElement(HaskellTokenType.chartoken)(''"'')
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('Impossible - lexLinePragma')
                PsiElement(HaskellTokenType.")('"')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('isSpace')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('mapM_')
              PsiElement(HaskellTokenType.()('(')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('flip')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('matchChar')
                PSTRINGTOKEN
                  PsiElement(HaskellTokenType.")('"')
                  PsiElement(HaskellTokenType.STRINGTOKEN)('Improperly formatted LINE pragma')
                  PsiElement(HaskellTokenType.")('"')
              PsiElement(HaskellTokenType.))(')')
              PSTRINGTOKEN
                PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.STRINGTOKEN)('#-}')
                PsiElement(HaskellTokenType.")('"')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('return')
              PsiElement(HaskellTokenType.()('(')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('read')
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('i')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('fn')
              PsiElement(HaskellTokenType.))(')')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Bool')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              OQTYCON
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('String')
            PsiElement(HaskellTokenType.->)('->')
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Lex')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('a')
              ATYPE
                PsiElement(HaskellTokenType.()('(')
                CTYPE
                  TYPEE
                    ATYPE
                      OQTYCON
                        QTYCON
                          TYCON
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('Bool')
                PsiElement(HaskellTokenType.,)(',')
                CTYPE
                  TYPEE
                    ATYPE
                      OQTYCON
                        QTYCON
                          TYCON
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('String')
                PsiElement(HaskellTokenType.))(')')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('bol')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('str')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''-'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''}'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.,)(',')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                  PsiElement(HaskellTokenType.))(')')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''{'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    PAT
                      PsiElement(HaskellTokenType.()('(')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.,)(',')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('bol')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        PSTRINGTOKEN
                          PsiElement(HaskellTokenType.")('"')
                          PsiElement(HaskellTokenType.STRINGTOKEN)('-{')
                          PsiElement(HaskellTokenType.")('"')
                        QOP
                          QVAROP
                            QVARSYM
                              VARSYM
                                PsiElement(HaskellTokenType.Varsym)('++')
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('str')
                      PsiElement(HaskellTokenType.))(')')
                    PsiComment(HaskellTokenType.comment)('-- rest of the subcomment\n')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('bol'')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        PSTRINGTOKEN
                          PsiElement(HaskellTokenType.")('"')
                          PsiElement(HaskellTokenType.STRINGTOKEN)('}-')
                          PsiElement(HaskellTokenType.")('"')
                        QOP
                          QVAROP
                            QVARSYM
                              VARSYM
                                PsiElement(HaskellTokenType.Varsym)('++')
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('c')
                      PsiElement(HaskellTokenType.))(')')
                  PsiComment(HaskellTokenType.comment)('-- rest of this comment\n')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''\t'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexTab')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    PsiElement(HaskellTokenType.chartoken)(''\t'')
                    QOP
                      QVAROP
                        QVARSYM
                          VARSYM
                            PsiElement(HaskellTokenType.:)(':')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                  PsiElement(HaskellTokenType.))(')')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''\n'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('True')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    PsiElement(HaskellTokenType.chartoken)(''\n'')
                    QOP
                      QVAROP
                        QVARSYM
                          VARSYM
                            PsiElement(HaskellTokenType.:)(':')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                  PsiElement(HaskellTokenType.))(')')
              ALT
                PAT
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('c')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('1')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexNestedComment')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('bol')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                    QOP
                      QVAROP
                        QVARSYM
                          VARSYM
                            PsiElement(HaskellTokenType.:)(':')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                  PsiElement(HaskellTokenType.))(')')
              ALT
                PAT
                  PsiElement(HaskellTokenType.[)('[')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('fail')
                  PSTRINGTOKEN
                    PsiElement(HaskellTokenType.")('"')
                    PsiElement(HaskellTokenType.STRINGTOKEN)('Unterminated nested comment')
                    PsiElement(HaskellTokenType.")('"')
              PsiComment(HaskellTokenType.comment)('-- When we are lexing the first token of a line, check whether we need to\n')
              PsiComment(HaskellTokenType.comment)('-- insert virtual semicolons or close braces due to layout.\n')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexBOL')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexBOL')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('pos')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getOffside')
            PsiComment(HaskellTokenType.comment)('-- trace ("Off: " ++ (show pos)) $ do\n')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('pos')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('LT')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  PsiComment(HaskellTokenType.comment)('-- trace "layout: inserting '}'\n" $\n')
                  PsiComment(HaskellTokenType.comment)('-- Set col to 0, indicating that we're still at the\n')
                  PsiComment(HaskellTokenType.comment)('-- beginning of the line, in case we need a semi-colon too.\n')
                  PsiComment(HaskellTokenType.comment)('-- Also pop the context here, so that we don't insert\n')
                  PsiComment(HaskellTokenType.comment)('-- another close brace before the parser can pop it.\n')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('setBOL')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('popContextL')
                      PSTRINGTOKEN
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexBOL')
                        PsiElement(HaskellTokenType.")('"')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('VRightCurly')
              ALT
                PAT
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('EQ')
                PsiElement(HaskellTokenType.->)('->')
                PsiComment(HaskellTokenType.comment)('-- trace "layout: inserting ';'\n" $\n')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('SemiColon')
              ALT
                PAT
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('GT')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexToken')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexToken')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexToken')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('ec')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getExtContext')
            PsiComment(HaskellTokenType.comment)('-- we don't bother to check XmlSyntax since we couldn't\n')
            PsiComment(HaskellTokenType.comment)('-- have ended up in a non-Nothing context if it wasn't\n')
            PsiComment(HaskellTokenType.comment)('-- enabled.\n')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('ec')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('HarpCtxt')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexHarpToken')
              ALT
                PAT
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('TagCtxt')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexTagCtxt')
              ALT
                PAT
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('CloseTagCtxt')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexCloseTagCtxt')
              ALT
                PAT
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('ChildCtxt')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexChildCtxt')
              ALT
                PAT
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Just')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('CodeTagCtxt')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexCodeTagCtxt')
              ALT
                PAT
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexChildCtxt')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexChildCtxt')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then XmlSyntax must be on.\n')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''%'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''>'')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('3')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('ChildCtxt')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XChildTagOpen')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''%'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('CodeTagCtxt')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XCodeTagOpen')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''/'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      PSTRINGTOKEN
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexChildCtxt')
                        PsiElement(HaskellTokenType.")('"')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('CloseTagCtxt')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XCloseTagOpen')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''['')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('HarpCtxt')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XRPatOpen')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('TagCtxt')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XStdTagOpen')
              ALT
                PAT
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexPCDATA')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexPCDATA')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexPCDATA')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then XmlSyntax must be on.\n')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  PsiElement(HaskellTokenType.[)('[')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('EOF')
              ALT
                PAT
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.case)('case')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('s')
                  PsiElement(HaskellTokenType.of)('of')
                  ALT
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''\n'')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    EXP
                      PsiElement(HaskellTokenType.do)('do')
                      STMTS
                        PAT
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('x')
                        PsiElement(HaskellTokenType.<-)('<-')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.Varsym)('>>')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('lexPCDATA')
                        EXP
                          PsiElement(HaskellTokenType.case)('case')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('x')
                          PsiElement(HaskellTokenType.of)('of')
                          ALT
                            PAT
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('p')
                            PsiElement(HaskellTokenType.->)('->')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.$)('$')
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.$)('$')
                              PsiElement(HaskellTokenType.chartoken)(''\n'')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.:)(':')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('p')
                          ALT
                            PAT
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('EOF')
                            PsiElement(HaskellTokenType.->)('->')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('EOF')
                          ALT
                            PAT
                              PsiElement(HaskellTokenType._)('_')
                            PsiElement(HaskellTokenType.->)('->')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('fail')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.$)('$')
                              PSTRINGTOKEN
                                PsiElement(HaskellTokenType.")('"')
                                PsiElement(HaskellTokenType.STRINGTOKEN)('lexPCDATA: unexpected token: ')
                                PsiElement(HaskellTokenType.")('"')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.Varsym)('++')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('show')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('x')
                  ALT
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''<'')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QOP
                        QVAROP
                          QVARSYM
                            VARSYM
                              PsiElement(HaskellTokenType.$)('$')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                      PSTRINGTOKEN
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.")('"')
                  ALT
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    EXP
                      PsiElement(HaskellTokenType.do)('do')
                      STMTS
                        PsiElement(HaskellTokenType.let)('let')
                        FUNORPATDECL
                          PAT
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('pcd')
                          RHS
                            PsiElement(HaskellTokenType.=)('=')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('takeWhile')
                              PsiElement(HaskellTokenType.()('(')
                              EXP
                                PsiElement(HaskellTokenType.\)('\')
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('c')
                                PsiElement(HaskellTokenType.->)('->')
                                EXP
                                  QVAR
                                    QVARID
                                      VARID
                                        PsiElement(HaskellTokenType.varidRegexp)('c')
                                  QOP
                                    QVAROP
                                      PsiElement(HaskellTokenType.`)('`')
                                      QVARID
                                        VARID
                                          PsiElement(HaskellTokenType.varidRegexp)('notElem')
                                      PsiElement(HaskellTokenType.`)('`')
                                  PSTRINGTOKEN
                                    PsiElement(HaskellTokenType.")('"')
                                    PsiElement(HaskellTokenType.STRINGTOKEN)('<')
                                    PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                                    PsiElement(HaskellTokenType.STRINGTOKEN)('n')
                                    PsiElement(HaskellTokenType.")('"')
                              PsiElement(HaskellTokenType.))(')')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('s')
                        FUNORPATDECL
                          PAT
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('l')
                          RHS
                            PsiElement(HaskellTokenType.=)('=')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('length')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('pcd')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('discard')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('l')
                        PAT
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('x')
                        PsiElement(HaskellTokenType.<-)('<-')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('lexPCDATA')
                        EXP
                          PsiElement(HaskellTokenType.case)('case')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('x')
                          PsiElement(HaskellTokenType.of)('of')
                          ALT
                            PAT
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('pcd'')
                            PsiElement(HaskellTokenType.->)('->')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.$)('$')
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.$)('$')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('pcd')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.Varsym)('++')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('pcd'')
                          ALT
                            PAT
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('EOF')
                            PsiElement(HaskellTokenType.->)('->')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('EOF')
                          ALT
                            PAT
                              PsiElement(HaskellTokenType._)('_')
                            PsiElement(HaskellTokenType.->)('->')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('fail')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.$)('$')
                              PSTRINGTOKEN
                                PsiElement(HaskellTokenType.")('"')
                                PsiElement(HaskellTokenType.STRINGTOKEN)('lexPCDATA: unexpected token: ')
                                PsiElement(HaskellTokenType.")('"')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.Varsym)('++')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('show')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('x')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexCodeTagCtxt')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexCodeTagCtxt')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then XmlSyntax must be on.\n')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''%'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''>'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      PSTRINGTOKEN
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexCodeTagContext')
                        PsiElement(HaskellTokenType.")('"')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XCodeTagClose')
              ALT
                PAT
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexCloseTagCtxt')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexCloseTagCtxt')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then XmlSyntax must be on.\n')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''%'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''>'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      PSTRINGTOKEN
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexCloseTagCtxt')
                        PsiElement(HaskellTokenType.")('"')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XCodeTagClose')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''>'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      PSTRINGTOKEN
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexCloseTagCtxt')
                        PsiElement(HaskellTokenType.")('"')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XStdTagClose')
              ALT
                PAT
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexTagCtxt')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexTagCtxt')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then XmlSyntax must be on.\n')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''/'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''>'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      PSTRINGTOKEN
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexTagCtxt: Empty tag')
                        PsiElement(HaskellTokenType.")('"')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XEmptyTagClose')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''>'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      PSTRINGTOKEN
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexTagCtxt: Standard tag')
                        PsiElement(HaskellTokenType.")('"')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('ChildCtxt')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XStdTagClose')
              ALT
                PAT
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexHarpToken')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexHarpToken')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          PsiComment(HaskellTokenType.comment)('-- if we ever end up here, then RegularPatterns must be on.\n')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)('']'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''>'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('popExtContextL')
                      PSTRINGTOKEN
                        PsiElement(HaskellTokenType.")('"')
                        PsiElement(HaskellTokenType.STRINGTOKEN)('lexHarpToken')
                        PsiElement(HaskellTokenType.")('"')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XRPatClose')
              ALT
                PAT
                  PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Lex')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Token')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('lexStdToken')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('s')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getInput')
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('exts')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
            PsiElement(HaskellTokenType.let)('let')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('intHash')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexHash')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('IntTok')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('IntTokHash')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('Right')
                    QCON
                      QCONID
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('WordTokHash')
                  PsiElement(HaskellTokenType.))(')')
            EXP
              PsiElement(HaskellTokenType.case)('case')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('s')
              PsiElement(HaskellTokenType.of)('of')
              ALT
                PAT
                  PsiElement(HaskellTokenType.[)('[')
                  PsiElement(HaskellTokenType.])(']')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('EOF')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''0'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('d')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('toLower')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''o'')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isOctDigit')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('d')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    PAT
                      PsiElement(HaskellTokenType.()('(')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('n')
                      PsiElement(HaskellTokenType.,)(',')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexOctal')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('con')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('intHash')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('con')
                        PsiElement(HaskellTokenType.()('(')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('n')
                        PsiElement(HaskellTokenType.,)(',')
                        EXP
                          PsiElement(HaskellTokenType.chartoken)(''0'')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.:)(':')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('c')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.:)(':')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('str')
                        PsiElement(HaskellTokenType.))(')')
                      PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('toLower')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''b'')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isBinDigit')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('d')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('BinaryLiterals')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    PAT
                      PsiElement(HaskellTokenType.()('(')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('n')
                      PsiElement(HaskellTokenType.,)(',')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexBinary')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('con')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('intHash')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('con')
                        PsiElement(HaskellTokenType.()('(')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('n')
                        PsiElement(HaskellTokenType.,)(',')
                        EXP
                          PsiElement(HaskellTokenType.chartoken)(''0'')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.:)(':')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('c')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.:)(':')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('str')
                        PsiElement(HaskellTokenType.))(')')
                      PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('toLower')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''x'')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isHexDigit')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('d')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    PAT
                      PsiElement(HaskellTokenType.()('(')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('n')
                      PsiElement(HaskellTokenType.,)(',')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('str')
                      PsiElement(HaskellTokenType.))(')')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexHexadecimal')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('con')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('intHash')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      PsiElement(HaskellTokenType.()('(')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('con')
                        PsiElement(HaskellTokenType.()('(')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('n')
                        PsiElement(HaskellTokenType.,)(',')
                        EXP
                          PsiElement(HaskellTokenType.chartoken)(''0'')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.:)(':')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('c')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.:)(':')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('str')
                        PsiElement(HaskellTokenType.))(')')
                      PsiElement(HaskellTokenType.))(')')
                  PsiComment(HaskellTokenType.comment)('-- implicit parameters\n')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''?'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('ImplicitParams')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('id')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('isIdent')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QOP
                        QVAROP
                          QVARSYM
                            VARSYM
                              PsiElement(HaskellTokenType.$)('$')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('IDupVarId')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('id')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''%'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('ImplicitParams')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('id')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('isIdent')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QOP
                        QVAROP
                          QVARSYM
                            VARSYM
                              PsiElement(HaskellTokenType.$)('$')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('ILinVarId')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('id')
                  PsiComment(HaskellTokenType.comment)('-- end implicit parameters\n')
                  PsiComment(HaskellTokenType.comment)('-- harp\n')
                  PsiComment(HaskellTokenType.comment)('--        '(':'|':c:_  | isHSymbol c -> discard 1 >> return LeftParen\n')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''('')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''|'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('RegularPatterns')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('not')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                  PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('RPGuardOpen')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''|'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)('')'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('RegularPatterns')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('RPGuardClose')
                  PsiComment(HaskellTokenType.{-)('{-')
                  PsiComment(HaskellTokenType.commenttext)(' This is handled by the reserved_ops above.\n        '@':':':_ | RegularPatterns `elem` exts ')
                  PsiComment(HaskellTokenType.commenttext)('-')
                  PsiComment(HaskellTokenType.commenttext)('>\n                     do discard 2\n                        return RPCAt ')
                  PsiComment(HaskellTokenType.-})('-}')
                  PsiComment(HaskellTokenType.comment)('-- template haskell\n')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''['')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''|'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('THExpQuote')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''['')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''|'')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''e'')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('3')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('THExpQuote')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''p'')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('3')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('THPatQuote')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''d'')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('3')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('THDecQuote')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''t'')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('3')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('THTypQuote')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''['')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''$'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('QuasiQuotes')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexQuasiQuote')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''['')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('s'')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('QuasiQuotes')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  PsiElement(HaskellTokenType.case)('case')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('dropWhile')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('isIdent')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('s'')
                  PsiElement(HaskellTokenType.of)('of')
                  PsiElement(HaskellTokenType.{)('{')
                  ALT
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''|'')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    EXP
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('True')
                  PsiElement(HaskellTokenType.;)(';')
                  ALT
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    EXP
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('False')
                  PsiElement(HaskellTokenType.})('}')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('1')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexQuasiQuote')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isUpper')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('QuasiQuotes')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('1')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexQuasiQuote')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''|'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)('']'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('THCloseQuote')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''$'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('id')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('isIdent')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QOP
                        QVAROP
                          QVARSYM
                            VARSYM
                              PsiElement(HaskellTokenType.$)('$')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('THIdEscape')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('id')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''('')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('2')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('THParenEscape')
                  PsiComment(HaskellTokenType.comment)('-- end template haskell\n')
                  PsiComment(HaskellTokenType.comment)('-- hsx\n')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''%'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('XmlSyntax')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.case)('case')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                  PsiElement(HaskellTokenType.of)('of')
                  ALT
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''>'')
                    PsiElement(HaskellTokenType.->)('->')
                    EXP
                      PsiElement(HaskellTokenType.do)('do')
                      STMTS
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('discard')
                          PsiElement(HaskellTokenType.integertoken)('3')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('ChildCtxt')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('XChildTagOpen')
                  ALT
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.->)('->')
                    EXP
                      PsiElement(HaskellTokenType.do)('do')
                      STMTS
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('discard')
                          PsiElement(HaskellTokenType.integertoken)('2')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('CodeTagCtxt')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('XCodeTagOpen')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''<'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('c')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isAlpha')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('XmlSyntax')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('pushExtContextL')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('TagCtxt')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XStdTagOpen')
                  PsiComment(HaskellTokenType.comment)('-- end hsx\n')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''('')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''#'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('UnboxedTuples')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('&&')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('not')
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                  PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('LeftHashParen')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''#'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)('')'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('UnboxedTuples')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('RightHashParen')
              PsiComment(HaskellTokenType.comment)('-- pragmas\n')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''{'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''#'')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('saveExtensionsL')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('3')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexPragmaStart')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''#'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)(''-'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''}'')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('restoreExtensionsL')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('3')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('PragmaEnd')
              PsiComment(HaskellTokenType.comment)('-- Parallel arrays\n')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)(''['')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)('':'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('ParallelArrays')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('ParArrayLeftSquare')
              ALT
                PAT
                  PsiElement(HaskellTokenType.chartoken)('':'')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType.chartoken)('']'')
                    QCONOP
                      GCONSYM
                        PsiElement(HaskellTokenType.:)(':')
                    PAT
                      PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('ParallelArrays')
                  QOP
                    QVAROP
                      PsiElement(HaskellTokenType.`)('`')
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('elem')
                      PsiElement(HaskellTokenType.`)('`')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('discard')
                  PsiElement(HaskellTokenType.integertoken)('2')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('>>')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('return')
                  QCON
                    QCONID
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('ParArrayRightSquare')
              ALT
                PAT
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('c')
                  QCONOP
                    GCONSYM
                      PsiElement(HaskellTokenType.:)(':')
                  PAT
                    PsiElement(HaskellTokenType._)('_')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexDecimalOrFloat')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isUpper')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexConIdOrQual')
                  PSTRINGTOKEN
                    PsiElement(HaskellTokenType.")('"')
                    PsiElement(HaskellTokenType.")('"')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isLower')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('||')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                  QOP
                    QVAROP
                      QVARSYM
                        VARSYM
                          PsiElement(HaskellTokenType.Varsym)('==')
                  PsiElement(HaskellTokenType.chartoken)(''_'')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('idents')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexIdents')
                    EXP
                      PsiElement(HaskellTokenType.case)('case')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('idents')
                      PsiElement(HaskellTokenType.of)('of')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.[)('[')
                          PAT
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('ident')
                          PsiElement(HaskellTokenType.])(']')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          PsiElement(HaskellTokenType.case)('case')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('lookup')
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('ident')
                            PsiElement(HaskellTokenType.()('(')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('reserved_ids')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.Varsym)('++')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('special_varids')
                            PsiElement(HaskellTokenType.))(')')
                          PsiElement(HaskellTokenType.of)('of')
                          ALT
                            PAT
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('Just')
                              PsiElement(HaskellTokenType.()('(')
                              PAT
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('keyword')
                              PsiElement(HaskellTokenType.,)(',')
                              PAT
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('scheme')
                              PsiElement(HaskellTokenType.))(')')
                            PsiElement(HaskellTokenType.->)('->')
                            PsiComment(HaskellTokenType.comment)('-- check if an extension keyword is enabled\n')
                            EXP
                              PsiElement(HaskellTokenType.if)('if')
                              EXP
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('isEnabled')
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('scheme')
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('exts')
                              PsiElement(HaskellTokenType.then)('then')
                              EXP
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('flagKW')
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('keyword')
                                QOP
                                  QVAROP
                                    QVARSYM
                                      VARSYM
                                        PsiElement(HaskellTokenType.Varsym)('>>')
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('return')
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('keyword')
                              PsiElement(HaskellTokenType.else)('else')
                              EXP
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('return')
                                QOP
                                  QVAROP
                                    QVARSYM
                                      VARSYM
                                        PsiElement(HaskellTokenType.$)('$')
                                QCON
                                  QCONID
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('VarId')
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('ident')
                          ALT
                            PAT
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('Nothing')
                            PsiElement(HaskellTokenType.->)('->')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              QOP
                                QVAROP
                                  QVARSYM
                                    VARSYM
                                      PsiElement(HaskellTokenType.$)('$')
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('VarId')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('ident')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType._)('_')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.$)('$')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('DVarId')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('idents')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('c')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    PAT
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('sym')
                    PsiElement(HaskellTokenType.<-)('<-')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('return')
                      QOP
                        QVAROP
                          QVARSYM
                            VARSYM
                              PsiElement(HaskellTokenType.$)('$')
                      PsiElement(HaskellTokenType.case)('case')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('lookup')
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('sym')
                        PsiElement(HaskellTokenType.()('(')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('reserved_ops')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.Varsym)('++')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('special_varops')
                        PsiElement(HaskellTokenType.))(')')
                      PsiElement(HaskellTokenType.of)('of')
                      ALT
                        PAT
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('Just')
                          PsiElement(HaskellTokenType.()('(')
                          PAT
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('t')
                          PsiElement(HaskellTokenType.,)(',')
                          PAT
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('scheme')
                          PsiElement(HaskellTokenType.))(')')
                        PsiElement(HaskellTokenType.->)('->')
                        PsiComment(HaskellTokenType.comment)('-- check if an extension op is enabled\n')
                        EXP
                          PsiElement(HaskellTokenType.if)('if')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('isEnabled')
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('scheme')
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('exts')
                          PsiElement(HaskellTokenType.then)('then')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('t')
                          PsiElement(HaskellTokenType.else)('else')
                          EXP
                            PsiElement(HaskellTokenType.case)('case')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('c')
                            PsiElement(HaskellTokenType.of)('of')
                            ALT
                              PAT
                                PsiElement(HaskellTokenType.chartoken)('':'')
                              PsiElement(HaskellTokenType.->)('->')
                              EXP
                                QCON
                                  QCONID
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('ConSym')
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('sym')
                            ALT
                              PAT
                                PsiElement(HaskellTokenType._)('_')
                              PsiElement(HaskellTokenType.->)('->')
                              EXP
                                QCON
                                  QCONID
                                    CONID
                                      PsiElement(HaskellTokenType.conidRegexp)('VarSym')
                                QVAR
                                  QVARID
                                    VARID
                                      PsiElement(HaskellTokenType.varidRegexp)('sym')
                      ALT
                        PAT
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('Nothing')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          PsiElement(HaskellTokenType.case)('case')
                          EXP
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('c')
                          PsiElement(HaskellTokenType.of)('of')
                          ALT
                            PAT
                              PsiElement(HaskellTokenType.chartoken)('':'')
                            PsiElement(HaskellTokenType.->)('->')
                            EXP
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('ConSym')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('sym')
                          ALT
                            PAT
                              PsiElement(HaskellTokenType._)('_')
                            PsiElement(HaskellTokenType.->)('->')
                            EXP
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('VarSym')
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('sym')
                PsiElement(HaskellTokenType.|)('|')
                GUARD
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('otherwise')
                PsiElement(HaskellTokenType.->)('->')
                EXP
                  PsiElement(HaskellTokenType.do)('do')
                  STMTS
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('discard')
                      PsiElement(HaskellTokenType.integertoken)('1')
                    EXP
                      PsiElement(HaskellTokenType.case)('case')
                      EXP
                        QVAR
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('c')
                      PsiElement(HaskellTokenType.of)('of')
                      PsiComment(HaskellTokenType.comment)('-- First the special symbols\n')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)(''('')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('LeftParen')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)('')'')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('RightParen')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)('','')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('Comma')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)('';'')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('SemiColon')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)(''['')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('LeftSquare')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)('']'')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('RightSquare')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)(''`'')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QCON
                            QCONID
                              CONID
                                PsiElement(HaskellTokenType.conidRegexp)('BackQuote')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)(''{'')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          PsiElement(HaskellTokenType.do)('do')
                          STMTS
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('pushContextL')
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('NoLayout')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('LeftCurly')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)(''}'')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          PsiElement(HaskellTokenType.do)('do')
                          STMTS
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('popContextL')
                              PSTRINGTOKEN
                                PsiElement(HaskellTokenType.")('"')
                                PsiElement(HaskellTokenType.STRINGTOKEN)('lexStdToken')
                                PsiElement(HaskellTokenType.")('"')
                            EXP
                              QVAR
                                QVARID
                                  VARID
                                    PsiElement(HaskellTokenType.varidRegexp)('return')
                              QCON
                                QCONID
                                  CONID
                                    PsiElement(HaskellTokenType.conidRegexp)('RightCurly')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)(''\''')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('lexCharacter')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType.chartoken)(''"'')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('lexString')
                      ALT
                        PAT
                          PsiElement(HaskellTokenType._)('_')
                        PsiElement(HaskellTokenType.->)('->')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('fail')
                          PsiElement(HaskellTokenType.()('(')
                          EXP
                            PSTRINGTOKEN
                              PsiElement(HaskellTokenType.")('"')
                              PsiElement(HaskellTokenType.STRINGTOKEN)('Illegal character ')
                              PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                              PsiElement(HaskellTokenType.STRINGTOKEN)(''')
                              PsiElement(HaskellTokenType.")('"')
                            QOP
                              QVAROP
                                QVARSYM
                                  VARSYM
                                    PsiElement(HaskellTokenType.Varsym)('++')
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('show')
                            QVAR
                              QVARID
                                VARID
                                  PsiElement(HaskellTokenType.varidRegexp)('c')
                            QOP
                              QVAROP
                                QVARSYM
                                  VARSYM
                                    PsiElement(HaskellTokenType.Varsym)('++')
                            PSTRINGTOKEN
                              PsiElement(HaskellTokenType.")('"')
                              PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                              PsiElement(HaskellTokenType.STRINGTOKEN)(''')
                              PsiElement(HaskellTokenType.STRINGTOKEN)('\')
                              PsiElement(HaskellTokenType.STRINGTOKEN)('n')
                              PsiElement(HaskellTokenType.")('"')
                          PsiElement(HaskellTokenType.))(')')
        PsiElement(HaskellTokenType.where)('where')
        GENDECL
          VARS
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('lexIdents')
          PsiElement(HaskellTokenType.::)('::')
          CTYPE
            TYPEE
              ATYPE
                OQTYCON
                  QTYCON
                    TYCON
                      CONID
                        PsiElement(HaskellTokenType.conidRegexp)('Lex')
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('a')
              ATYPE
                PsiElement(HaskellTokenType.[)('[')
                CTYPE
                  TYPEE
                    ATYPE
                      OQTYCON
                        QTYCON
                          TYCON
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('String')
                PsiElement(HaskellTokenType.])(']')
        FUNORPATDECL
          PAT
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('lexIdents')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              PsiElement(HaskellTokenType.do)('do')
              STMTS
                PAT
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('ident')
                PsiElement(HaskellTokenType.<-)('<-')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('isIdent')
                PAT
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('s')
                PsiElement(HaskellTokenType.<-)('<-')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('getInput')
                PAT
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('exts')
                PsiElement(HaskellTokenType.<-)('<-')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
                EXP
                  PsiElement(HaskellTokenType.case)('case')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('s')
                  PsiElement(HaskellTokenType.of)('of')
                  PsiComment(HaskellTokenType.comment)('-- This is the only way we can get more than one ident in the list\n')
                  PsiComment(HaskellTokenType.comment)('-- and it requires XmlSyntax to be on.\n')
                  ALT
                    PAT
                      PsiElement(HaskellTokenType.chartoken)(''-'')
                      QCONOP
                        GCONSYM
                          PsiElement(HaskellTokenType.:)(':')
                      PAT
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('c')
                        QCONOP
                          GCONSYM
                            PsiElement(HaskellTokenType.:)(':')
                        PAT
                          PsiElement(HaskellTokenType._)('_')
                    PsiElement(HaskellTokenType.|)('|')
                    GUARD
                      QCON
                        QCONID
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('XmlSyntax')
                      QOP
                        QVAROP
                          PsiElement(HaskellTokenType.`)('`')
                          QVARID
                            VARID
                              PsiElement(HaskellTokenType.varidRegexp)('elem')
                          PsiElement(HaskellTokenType.`)('`')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('exts')
                      QOP
                        QVAROP
                          QVARSYM
                            VARSYM
                              PsiElement(HaskellTokenType.Varsym)('&&')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('isAlpha')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('c')
                    PsiElement(HaskellTokenType.->)('->')
                    EXP
                      PsiElement(HaskellTokenType.do)('do')
                      STMTS
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('discard')
                          PsiElement(HaskellTokenType.integertoken)('1')
                        PAT
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('idents')
                        PsiElement(HaskellTokenType.<-)('<-')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('lexIdents')
                        EXP
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('return')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.$)('$')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('ident')
                          QOP
                            QVAROP
                              QVARSYM
                                VARSYM
                                  PsiElement(HaskellTokenType.:)(':')
                          QVAR
                            QVARID
                              VARID
                                PsiElement(HaskellTokenType.varidRegexp)('idents')
                        EXP
                          PsiElement(HaskellTokenType.chartoken)(''#'')
  PsiElement(HaskellTokenType.:)(':')
  PsiElement(HaskellTokenType._)('_')
  PsiElement(HaskellTokenType.|)('|')
  PsiErrorElement:'MagicHash' unexpected
    PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.`)('`')
    PsiElement(HaskellTokenType.varidRegexp)('elem')
    PsiElement(HaskellTokenType.`)('`')
    PsiElement(HaskellTokenType.varidRegexp)('exts')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.do)('do')
    PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(HaskellTokenType.integertoken)('1')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.[)('[')
        PsiElement(HaskellTokenType.varidRegexp)('ident')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType._)('_')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.[)('[')
        PsiElement(HaskellTokenType.varidRegexp)('ident')
        PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.varidRegexp)('lexQuasiQuote')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Char')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.varidRegexp)('lexQuasiQuote')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiComment(HaskellTokenType.comment)('-- We've seen and dropped [$ already\n')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('ident')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQuoter')
        PsiElement(HaskellTokenType.varidRegexp)('matchChar')
        PsiElement(HaskellTokenType.chartoken)(''|'')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Malformed quasi-quote quoter')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('body')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('THQuasiQuote')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('ident')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('body')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.where)('where')
        PsiElement(HaskellTokenType.varidRegexp)('lexQuoter')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('isLower')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isIdent')
        PsiElement(HaskellTokenType.|)('|')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('otherwise')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('qualThing')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexConIdOrQual')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('qualThing')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.conidRegexp)('QVarId')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('s1')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s2')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('s1')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s2')
        PsiElement(HaskellTokenType.conidRegexp)('QVarSym')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('s1')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s2')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('s1')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s2')
        PsiElement(HaskellTokenType._)('_')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Malformed quasi-quote quoter')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.::)('::')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)('']'')
        PsiElement(HaskellTokenType.:)(':')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('2')
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)('']'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''|'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.integertoken)('2')
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)(''|'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''|'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)('']'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('2')
        PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.chartoken)(''|'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)(''|'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)('']'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)('']'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)(''\\'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)(''\n'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.[)('[')
        PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Unexpected end of input while lexing quasi-quoter')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('not')
          PsiElement(HaskellTokenType..)('.')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.()('(')
          PsiElement(DUMMY_BLOCK)
            PsiElement(HaskellTokenType.`)('`')
            PsiElement(HaskellTokenType.varidRegexp)('elem')
            PsiElement(HaskellTokenType.`)('`')
            PsiElement(HaskellTokenType.")('"')
            PsiElement(HaskellTokenType.STRINGTOKEN)('\\')
            PsiElement(HaskellTokenType.STRINGTOKEN)('|')
            PsiElement(HaskellTokenType.STRINGTOKEN)('\')
            PsiElement(HaskellTokenType.STRINGTOKEN)('n')
            PsiElement(HaskellTokenType.")('"')
          PsiElement(HaskellTokenType.))(')')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexQQBody')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('str')
          PsiElement(HaskellTokenType.Varsym)('++')
          PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiComment(HaskellTokenType.comment)('-- Underscores are used in some pragmas. Options pragmas are a special case\n')
        PsiComment(HaskellTokenType.comment)('-- with our representation: the thing after the underscore is a parameter.\n')
        PsiComment(HaskellTokenType.comment)('-- Strip off the parameters to option pragmas by hand here, everything else\n')
        PsiComment(HaskellTokenType.comment)('-- sits in the pragmas map.\n')
        PsiElement(HaskellTokenType.varidRegexp)('lookupKnownPragma')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.->)('->')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Maybe')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.varidRegexp)('lookupKnownPragma')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('map')
        PsiElement(HaskellTokenType.varidRegexp)('toLower')
        PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('options_')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.`)('`')
        PsiElement(HaskellTokenType.varidRegexp)('isPrefixOf')
        PsiElement(HaskellTokenType.`)('`')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Just')
          PsiElement(HaskellTokenType.$)('$')
          PsiElement(HaskellTokenType.varidRegexp)('drop')
          PsiElement(HaskellTokenType.integertoken)('8')
          PsiElement(HaskellTokenType.varidRegexp)('s')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('undefined')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('options')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.Varsym)('==')
        PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Nothing')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('undefined')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('otherwise')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('lookup')
        PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType.varidRegexp)('pragmas')
        PsiElement(HaskellTokenType.varidRegexp)('lexPragmaStart')
        PsiElement(HaskellTokenType.::)('::')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.varidRegexp)('lexPragmaStart')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('pr')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isPragmaChar')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('lookupKnownPragma')
        PsiElement(HaskellTokenType.varidRegexp)('pr')
        PsiElement(HaskellTokenType.of)('of')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Just')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('INLINE')
          PsiElement(HaskellTokenType.conidRegexp)('True')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('map')
        PsiElement(HaskellTokenType.varidRegexp)('toLower')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.chartoken)('' '')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''c'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''o'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''l'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''k'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''e'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('8')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.conidRegexp)('INLINE_CONLIKE')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('INLINE')
        PsiElement(HaskellTokenType.conidRegexp)('True')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('dropWhile')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('map')
        PsiElement(HaskellTokenType.varidRegexp)('toLower')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.chartoken)(''i'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''l'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''e'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('6')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE_INLINE')
        PsiElement(HaskellTokenType.conidRegexp)('True')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''o'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''l'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''e'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('8')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE_INLINE')
        PsiElement(HaskellTokenType.conidRegexp)('False')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''o'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''t'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''l'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''i'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''n'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''e'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile_')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('9')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE_INLINE')
        PsiElement(HaskellTokenType.conidRegexp)('False')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
          PsiElement(HaskellTokenType.varidRegexp)('opt')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiComment(HaskellTokenType.comment)('-- see, I promised we'd mask out the 'undefined'\n')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('fst')
        PsiElement(HaskellTokenType.varidRegexp)('opt')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.varidRegexp)('opt'')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragma')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Just')
          PsiElement(HaskellTokenType.varidRegexp)('opt'')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Nothing')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.varidRegexp)('x')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('isSpace')
        PsiElement(HaskellTokenType.varidRegexp)('x')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragma')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Nothing')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Malformed Options pragma')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.conidRegexp)('RULES')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiComment(HaskellTokenType.comment)('-- Rules enable ScopedTypeVariables locally.\n')
        PsiElement(HaskellTokenType.varidRegexp)('addExtensionL')
        PsiElement(HaskellTokenType.conidRegexp)('ScopedTypeVariables')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.conidRegexp)('RULES')
        PsiComment(HaskellTokenType.{-)('{-')
        PsiComment(HaskellTokenType.commenttext)('     Just (CFILES _) ')
        PsiComment(HaskellTokenType.commenttext)('-')
        PsiComment(HaskellTokenType.commenttext)('> do\n            rest <')
        PsiComment(HaskellTokenType.commenttext)('-')
        PsiComment(HaskellTokenType.commenttext)(' lexRawPragma\n            return $ CFILES rest\n     Just (INCLUDE _) ')
        PsiComment(HaskellTokenType.commenttext)('-')
        PsiComment(HaskellTokenType.commenttext)('> do\n            rest <')
        PsiComment(HaskellTokenType.commenttext)('-')
        PsiComment(HaskellTokenType.commenttext)(' lexRawPragma\n            return $ INCLUDE rest ')
        PsiComment(HaskellTokenType.-})('-}')
        PsiElement(HaskellTokenType.conidRegexp)('Just')
        PsiElement(HaskellTokenType.varidRegexp)('p')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.varidRegexp)('p')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Internal error: Unrecognised recognised pragma')
        PsiElement(HaskellTokenType.")('"')
        PsiComment(HaskellTokenType.comment)('-- do rawStr <- lexRawPragma\n')
        PsiComment(HaskellTokenType.comment)('-- return $ PragmaUnknown (pr, rawStr) -- no support for unrecognized pragmas, treat as comment\n')
        PsiComment(HaskellTokenType.comment)('-- discard 3 -- #-}\n')
        PsiComment(HaskellTokenType.comment)('-- topLexer -- we just discard it as a comment for now and restart -}\n')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragma')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragma')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragmaAux')
        PsiElement(HaskellTokenType.where)('where')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragmaAux')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('rpr')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.Varsym)('/=')
          PsiElement(HaskellTokenType.chartoken)(''#'')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''-'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''}'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.varidRegexp)('rpr')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('End-of-file inside pragma')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
        PsiElement(HaskellTokenType.varidRegexp)('rpr'')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexRawPragma')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('rpr')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''#'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('rpr'')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexDecimalOrFloat')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.varidRegexp)('lexDecimalOrFloat')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
        PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('exts')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
        PsiElement(HaskellTokenType.case)('case')
        PsiElement(HaskellTokenType.varidRegexp)('rest')
        PsiElement(HaskellTokenType.of)('of')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.chartoken)(''.'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('d')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
        PsiElement(HaskellTokenType.varidRegexp)('d')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
        PsiElement(HaskellTokenType.varidRegexp)('frac')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
        PsiElement(HaskellTokenType.let)('let')
        PsiElement(HaskellTokenType.varidRegexp)('num')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
        PsiElement(HaskellTokenType.integertoken)('10')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.Varsym)('++')
          PsiElement(HaskellTokenType.varidRegexp)('frac')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('decimals')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('toInteger')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('length')
          PsiElement(HaskellTokenType.varidRegexp)('frac')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('exponent')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('estr')
        PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(HaskellTokenType.do)('do')
    PsiElement(HaskellTokenType.varidRegexp)('rest2')
    PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(HaskellTokenType.varidRegexp)('getInput')
    PsiElement(HaskellTokenType.case)('case')
    PsiElement(HaskellTokenType.varidRegexp)('rest2')
    PsiElement(HaskellTokenType.of)('of')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''e'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('lexExponent')
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('lexExponent')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.integertoken)('0')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.conidRegexp)('FloatTok')
      PsiElement(HaskellTokenType.conidRegexp)('FloatTokHash')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Right')
        PsiElement(HaskellTokenType.conidRegexp)('DoubleTokHash')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.varidRegexp)('con')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('num')
          PsiElement(HaskellTokenType.%)('%')
          PsiElement(HaskellTokenType.integertoken)('1')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.*)('*')
        PsiElement(HaskellTokenType.integertoken)('10')
        PsiElement(HaskellTokenType.Varsym)('^^')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('exponent')
          PsiElement(HaskellTokenType.-)('-')
          PsiElement(HaskellTokenType.varidRegexp)('decimals')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('frac')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.varidRegexp)('estr')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('e')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('toLower')
      PsiElement(HaskellTokenType.varidRegexp)('e')
      PsiElement(HaskellTokenType.Varsym)('==')
      PsiElement(HaskellTokenType.chartoken)(''e'')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('exponent')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('estr')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexExponent')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.conidRegexp)('FloatTok')
      PsiElement(HaskellTokenType.conidRegexp)('FloatTokHash')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Right')
        PsiElement(HaskellTokenType.conidRegexp)('DoubleTokHash')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.varidRegexp)('con')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('10')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.%)('%')
          PsiElement(HaskellTokenType.integertoken)('1')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.*)('*')
        PsiElement(HaskellTokenType.integertoken)('10')
        PsiElement(HaskellTokenType.Varsym)('^^')
        PsiElement(HaskellTokenType.varidRegexp)('exponent')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.varidRegexp)('estr')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('WordTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('10')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('IntTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('10')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('IntTok')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('10')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.where)('where')
      PsiElement(HaskellTokenType.varidRegexp)('lexExponent')
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Integer')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexExponent')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('e')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiComment(HaskellTokenType.comment)('-- 'e' or 'E'\n')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.of)('of')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''+'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('d')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isDigit')
      PsiElement(HaskellTokenType.varidRegexp)('d')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('e')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''+'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''-'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('d')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isDigit')
      PsiElement(HaskellTokenType.varidRegexp)('d')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('negate')
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('e')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''-'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('d')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isDigit')
      PsiElement(HaskellTokenType.varidRegexp)('d')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('>>=')
      PsiElement(HaskellTokenType.\)('\')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('e')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Float with missing exponent')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.::)('::')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('b')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('b')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.conidRegexp)('Either')
      PsiElement(HaskellTokenType.conidRegexp)('String')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('b')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('b')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.varidRegexp)('b')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
      PsiElement(HaskellTokenType.if)('if')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.then)('then')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)(''#'')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.conidRegexp)('Right')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('c'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('c'')
      PsiElement(HaskellTokenType.conidRegexp)('Left')
      PsiElement(HaskellTokenType.varidRegexp)('s')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('b')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.else)('else')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.varidRegexp)('lexConIdOrQual')
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.varidRegexp)('lexConIdOrQual')
      PsiElement(HaskellTokenType.varidRegexp)('qual')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('con')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
      PsiElement(HaskellTokenType.varidRegexp)('isIdent')
      PsiElement(HaskellTokenType.let)('let')
      PsiElement(HaskellTokenType.varidRegexp)('conid')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('null')
      PsiElement(HaskellTokenType.varidRegexp)('qual')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.conidRegexp)('ConId')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('otherwise')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.conidRegexp)('QConId')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('qual')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('qual'')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('null')
      PsiElement(HaskellTokenType.varidRegexp)('qual')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('otherwise')
      PsiElement(HaskellTokenType.=)('=')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('qual')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.chartoken)(''.'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.varidRegexp)('just_a_conid')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('alternative')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
        PsiElement(HaskellTokenType.varidRegexp)('conid')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('rest')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
      PsiElement(HaskellTokenType.case)('case')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('rest')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)(''.'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isLower')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.Varsym)('||')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.Varsym)('==')
      PsiElement(HaskellTokenType.chartoken)(''_'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiComment(HaskellTokenType.comment)('-- qualified varid?\n')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('ident')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
      PsiElement(HaskellTokenType.varidRegexp)('isIdent')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('exts'')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
      PsiElement(HaskellTokenType.varidRegexp)('ident'')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.of)('of')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts'')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('ident')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('#')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('ident')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('lookup')
      PsiElement(HaskellTokenType.varidRegexp)('ident'')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('reserved_ids')
      PsiElement(HaskellTokenType.of)('of')
      PsiComment(HaskellTokenType.comment)('-- cannot qualify a reserved word\n')
      PsiElement(HaskellTokenType.conidRegexp)('Just')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('scheme')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isEnabled')
      PsiElement(HaskellTokenType.varidRegexp)('scheme')
      PsiElement(HaskellTokenType.varidRegexp)('exts'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('just_a_conid')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('QVarId')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('qual'')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ident'')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isUpper')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiComment(HaskellTokenType.comment)('-- qualified conid?\n')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexConIdOrQual')
      PsiElement(HaskellTokenType.varidRegexp)('qual'')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiComment(HaskellTokenType.comment)('-- qualified symbol?\n')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(HaskellTokenType.integertoken)('1')
    PsiElement(HaskellTokenType.varidRegexp)('sym')
    PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
    PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
    PsiElement(HaskellTokenType.varidRegexp)('exts'')
    PsiElement(HaskellTokenType.<-)('<-')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('lookup')
      PsiElement(HaskellTokenType.varidRegexp)('sym')
      PsiElement(HaskellTokenType.varidRegexp)('reserved_ops')
      PsiElement(HaskellTokenType.of)('of')
      PsiComment(HaskellTokenType.comment)('-- cannot qualify a reserved operator\n')
      PsiElement(HaskellTokenType.conidRegexp)('Just')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('scheme')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isEnabled')
      PsiElement(HaskellTokenType.varidRegexp)('scheme')
      PsiElement(HaskellTokenType.varidRegexp)('exts'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('just_a_conid')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)('':'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.conidRegexp)('QConSym')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('qual'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('sym')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.conidRegexp)('QVarSym')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('qual'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('sym')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('cs')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('null')
      PsiElement(HaskellTokenType.varidRegexp)('cs')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('||')
      PsiElement(HaskellTokenType.varidRegexp)('not')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('isHSymbol')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('head')
        PsiElement(HaskellTokenType.varidRegexp)('cs')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('&&')
      PsiElement(HaskellTokenType.varidRegexp)('not')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('isIdent')
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.varidRegexp)('head')
        PsiElement(HaskellTokenType.varidRegexp)('cs')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('&&')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('conid')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.conidRegexp)('ConId')
      PsiElement(HaskellTokenType.varidRegexp)('con'')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.conidRegexp)('ConId')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.varidRegexp)('con'')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('#')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('QConId')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('con'')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.conidRegexp)('QConId')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('con'')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('#')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('lexConIdOrQual: unexpected token: ')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.varidRegexp)('show')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('conid')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.varidRegexp)('conid')
      PsiComment(HaskellTokenType.comment)('-- not a qualified thing\n')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexCharacter')
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.varidRegexp)('lexCharacter')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiComment(HaskellTokenType.comment)('-- We need to keep track of not only character constants but also TH 'x and ''T\n')
      PsiComment(HaskellTokenType.comment)('-- We've seen ' so far\n')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
      PsiElement(HaskellTokenType.case)('case')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)(''\''')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('elem')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.conidRegexp)('THTyQuote')
      PsiElement(HaskellTokenType.chartoken)(''\\'')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexEscape')
      PsiElement(HaskellTokenType.varidRegexp)('matchQuote')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.conidRegexp)('Character')
      PsiElement(HaskellTokenType.conidRegexp)('CharacterHash')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Left')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Double hash not available for character literals')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('c')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.chartoken)(''\\'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''\''')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexHash')
      PsiElement(HaskellTokenType.conidRegexp)('Character')
      PsiElement(HaskellTokenType.conidRegexp)('CharacterHash')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Left')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Double hash not available for character literals')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('con')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('c')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.[)('[')
          PsiElement(HaskellTokenType.varidRegexp)('c')
          PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('any')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.`)('`')
        PsiElement(HaskellTokenType.varidRegexp)('elem')
        PsiElement(HaskellTokenType.`)('`')
        PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.[)('[')
      PsiElement(HaskellTokenType.conidRegexp)('TemplateHaskell')
      PsiElement(HaskellTokenType.,)(',')
      PsiElement(HaskellTokenType.conidRegexp)('DataKinds')
      PsiElement(HaskellTokenType.])(']')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.conidRegexp)('THVarQuote')
      PsiElement(HaskellTokenType._)('_')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Improper character constant or misplaced ')
      PsiElement(HaskellTokenType.STRINGTOKEN)('\')
      PsiElement(HaskellTokenType.STRINGTOKEN)(''')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.where)('where')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('matchQuote')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.varidRegexp)('matchChar')
      PsiElement(HaskellTokenType.chartoken)(''\''')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Improperly terminated character constant')
      PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexString')
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.conidRegexp)('Token')
      PsiElement(HaskellTokenType.varidRegexp)('lexString')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.where)('where')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)(''\\'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''&'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.chartoken)(''&'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''\\'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isSpace')
      PsiElement(HaskellTokenType.varidRegexp)('c')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('matchChar')
      PsiElement(HaskellTokenType.chartoken)(''\\'')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Illegal character in string gap')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('reverse')
        PsiElement(HaskellTokenType.varidRegexp)('wcs')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('otherwise')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('ce')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('str')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexEscape')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('ce')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('reverse')
        PsiElement(HaskellTokenType.varidRegexp)('str')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''"'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''#'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.conidRegexp)('MagicHash')
      PsiElement(HaskellTokenType.`)('`')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('elem')
      PsiElement(HaskellTokenType.`)('`')
      PsiElement(HaskellTokenType.varidRegexp)('exts')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('StringHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('reverse')
          PsiElement(HaskellTokenType.varidRegexp)('s')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('reverse')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''"'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('StringTok')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('reverse')
          PsiElement(HaskellTokenType.varidRegexp)('s')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('reverse')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.Varsym)('/=')
      PsiElement(HaskellTokenType.chartoken)(''\n'')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.varidRegexp)('loop')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('raw')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('fail')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('Improperly terminated string')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.of)('of')
      PsiElement(HaskellTokenType.chartoken)(''\n'')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('lexNewline')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.chartoken)(''\n'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
      PsiElement(HaskellTokenType.chartoken)(''\t'')
      PsiElement(HaskellTokenType.:)(':')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType._)('_')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.do)('do')
    PsiElement(HaskellTokenType.varidRegexp)('lexTab')
    PsiElement(HaskellTokenType.varidRegexp)('wcs')
    PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.chartoken)(''\t'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.|)('|')
      PsiElement(HaskellTokenType.varidRegexp)('isSpace')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.<-)('<-')
      PsiElement(HaskellTokenType.varidRegexp)('lexWhiteChars')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.$)('$')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('wcs')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.varidRegexp)('lexEscape')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.::)('::')
      PsiElement(HaskellTokenType.conidRegexp)('Lex')
      PsiElement(HaskellTokenType.varidRegexp)('a')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('Char')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.conidRegexp)('String')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('lexEscape')
      PsiElement(HaskellTokenType.=)('=')
      PsiElement(HaskellTokenType.do)('do')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.<-)('<-')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('getInput')
      PsiElement(HaskellTokenType.case)('case')
      PsiElement(HaskellTokenType.varidRegexp)('r')
      PsiElement(HaskellTokenType.of)('of')
      PsiComment(HaskellTokenType.comment)('-- Production charesc from section B.2 (Note: \& is handled by caller)\n')
      PsiElement(HaskellTokenType.chartoken)(''a'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\a'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('a')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''b'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\b'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('b')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''f'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\f'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('f')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''n'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\n'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('n')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''r'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\r'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('r')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''t'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\t'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('t')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''v'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\v'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('v')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''\\'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\\'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\\')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''"'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\"'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\"')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''\''')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''\''')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\')
        PsiElement(HaskellTokenType.STRINGTOKEN)(''')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiComment(HaskellTokenType.comment)('-- Production ascii from section B.2\n')
      PsiElement(HaskellTokenType.chartoken)(''^'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('cntrl')
      PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(HaskellTokenType.chartoken)(''N'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''U'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''L'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(HaskellTokenType.integertoken)('3')
    PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('NUL'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('NUL')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''O'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''H'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SOH'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SOH')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''X'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('STX'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('STX')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''X'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('ETX'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('ETX')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''O'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('EOT'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('EOT')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''N'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''Q'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('ENQ'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('ENQ')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''A'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''K'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('ACK'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('ACK')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''B'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''L'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.integertoken)('3')
    PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('BEL'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('BEL')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''B'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('BS'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('BS')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''H'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('HT'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('HT')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''L'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''F'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('LF'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('LF')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''V'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('VT'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('VT')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''F'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''F'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('FF'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('FF')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''R'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('CR'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('CR')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''O'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SO'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SO')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''I'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SI'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SI')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''L'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DLE'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DLE')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''1'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DC1'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DC1')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''2'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DC2'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DC2')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''3'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DC3'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DC3')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''D'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''4'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('DC4'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('DC4')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''N'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''A'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''K'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.integertoken)('3')
    PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('NAK'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('NAK')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''Y'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''N'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SYN'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SYN')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''T'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''B'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('ETB'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('ETB')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''A'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''N'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('CAN'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('CAN')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''M'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('EM'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('EM')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''U'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''B'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('SUB'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('SUB')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''E'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''C'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.integertoken)('3')
      PsiElement(HaskellTokenType.Varsym)('>>')
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('ESC'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('ESC')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''F'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.varidRegexp)('return')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('FS'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('FS')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''G'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('GS'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('GS')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''R'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('RS'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('RS')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.chartoken)(''U'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.chartoken)(''S'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(HaskellTokenType.integertoken)('2')
      PsiElement(HaskellTokenType.Varsym)('>>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('return')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.')(''')
        PsiElement(HaskellTokenType.\)('\')
        PsiElement(HaskellTokenType.conidRegexp)('US'')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('US')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.))(')')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.chartoken)(''S'')
    PsiElement(HaskellTokenType.:)(':')
    PsiElement(HaskellTokenType.chartoken)(''P'')
    PsiElement(HaskellTokenType.:)(':')
    PsiElement(HaskellTokenType._)('_')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.varidRegexp)('discard')
    PsiElement(HaskellTokenType.integertoken)('2')
    PsiElement(HaskellTokenType.Varsym)('>>')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.')(''')
          PsiElement(HaskellTokenType.\)('\')
          PsiElement(HaskellTokenType.conidRegexp)('SP'')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.")('"')
          PsiElement(HaskellTokenType.STRINGTOKEN)('SP')
          PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''D'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''E'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.chartoken)(''L'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.integertoken)('3')
        PsiElement(HaskellTokenType.Varsym)('>>')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.')(''')
          PsiElement(HaskellTokenType.\)('\')
          PsiElement(HaskellTokenType.conidRegexp)('DEL'')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.")('"')
          PsiElement(HaskellTokenType.STRINGTOKEN)('DEL')
          PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiComment(HaskellTokenType.comment)('-- Escaped numbers\n')
        PsiElement(HaskellTokenType.chartoken)(''o'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('isOctDigit')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.->)('->')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('n')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexOctal')
        PsiElement(HaskellTokenType.varidRegexp)('n'')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('checkChar')
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('n'')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.chartoken)(''o'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''x'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('isHexDigit')
        PsiElement(HaskellTokenType.varidRegexp)('c')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('discard')
        PsiElement(HaskellTokenType.integertoken)('1')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('n')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexHexadecimal')
        PsiElement(HaskellTokenType.varidRegexp)('n'')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('checkChar')
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('n'')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.chartoken)(''x'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.do)('do')
      PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('n')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
        PsiElement(HaskellTokenType.varidRegexp)('n'')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('checkChar')
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('n'')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('raw')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Illegal escape sequence')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.where)('where')
        PsiElement(HaskellTokenType.varidRegexp)('checkChar')
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.Varsym)('<=')
        PsiElement(HaskellTokenType.integertoken)('0x10FFFF')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('chr')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.()('(')
          PsiElement(DUMMY_BLOCK)
            PsiElement(HaskellTokenType.varidRegexp)('fromInteger')
            PsiElement(HaskellTokenType.varidRegexp)('n')
          PsiElement(HaskellTokenType.))(')')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('checkChar')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Character constant out of range')
        PsiElement(HaskellTokenType.")('"')
        PsiComment(HaskellTokenType.comment)('-- Production cntrl from section B.2\n')
        PsiElement(HaskellTokenType.varidRegexp)('cntrl')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Char')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Char')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('cntrl')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.|)('|')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.Varsym)('>=')
        PsiElement(HaskellTokenType.chartoken)(''@'')
        PsiElement(HaskellTokenType.Varsym)('&&')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.Varsym)('<=')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''_'')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('chr')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.()('(')
          PsiElement(DUMMY_BLOCK)
            PsiElement(HaskellTokenType.varidRegexp)('ord')
            PsiElement(HaskellTokenType.varidRegexp)('c')
            PsiElement(HaskellTokenType.-)('-')
            PsiElement(HaskellTokenType.varidRegexp)('ord')
            PsiElement(HaskellTokenType.chartoken)(''@'')
          PsiElement(HaskellTokenType.))(')')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.chartoken)(''^'')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.varidRegexp)('c')
          PsiElement(HaskellTokenType.:)(':')
          PsiElement(HaskellTokenType.[)('[')
          PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('cntrl')
        PsiElement(HaskellTokenType._)('_')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('fail')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('Illegal control character')
        PsiElement(HaskellTokenType.")('"')
        PsiComment(HaskellTokenType.comment)('-- assumes at least one octal digit\n')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexOctal')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexOctal')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isOctDigit')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('8')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiComment(HaskellTokenType.comment)('-- assumes at least one binary digit\n')
        PsiElement(HaskellTokenType.varidRegexp)('lexBinary')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexBinary')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isBinDigit')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('2')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiComment(HaskellTokenType.comment)('-- assumes at least one hexadecimal digit\n')
        PsiElement(HaskellTokenType.varidRegexp)('lexHexadecimal')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexHexadecimal')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isHexDigit')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('16')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiComment(HaskellTokenType.comment)('-- assumes at least one decimal digit\n')
        PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('Integer')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('lexDecimal')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('lexWhile')
        PsiElement(HaskellTokenType.varidRegexp)('isDigit')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('return')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
          PsiElement(HaskellTokenType.integertoken)('10')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiComment(HaskellTokenType.comment)('-- Stolen from Hugs's Prelude\n')
        PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Integer')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Integer')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('parseInteger')
        PsiElement(HaskellTokenType.varidRegexp)('radix')
        PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('foldl1')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.\)('\')
          PsiElement(HaskellTokenType.varidRegexp)('n')
          PsiElement(HaskellTokenType.varidRegexp)('d')
          PsiElement(HaskellTokenType.->)('->')
          PsiElement(HaskellTokenType.varidRegexp)('n')
          PsiElement(HaskellTokenType.*)('*')
          PsiElement(HaskellTokenType.varidRegexp)('radix')
          PsiElement(HaskellTokenType.+)('+')
          PsiElement(HaskellTokenType.varidRegexp)('d')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('map')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.()('(')
          PsiElement(DUMMY_BLOCK)
            PsiElement(HaskellTokenType.varidRegexp)('toInteger')
            PsiElement(HaskellTokenType..)('.')
            PsiElement(HaskellTokenType.varidRegexp)('digitToInt')
          PsiElement(HaskellTokenType.))(')')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('ds')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('flagKW')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Lex')
        PsiElement(HaskellTokenType.varidRegexp)('a')
        PsiElement(HaskellTokenType.conidRegexp)('()')
        PsiElement(HaskellTokenType.varidRegexp)('flagKW')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('t')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('when')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('t')
          PsiElement(HaskellTokenType.`)('`')
          PsiElement(HaskellTokenType.varidRegexp)('elem')
          PsiElement(HaskellTokenType.`)('`')
          PsiElement(HaskellTokenType.[)('[')
          PsiElement(HaskellTokenType.conidRegexp)('KW_Do')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.conidRegexp)('KW_MDo')
          PsiElement(HaskellTokenType.])(']')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.$)('$')
        PsiElement(HaskellTokenType.do)('do')
        PsiElement(HaskellTokenType.varidRegexp)('exts')
        PsiElement(HaskellTokenType.<-)('<-')
        PsiElement(HaskellTokenType.varidRegexp)('getExtensionsL')
        PsiElement(HaskellTokenType.varidRegexp)('when')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.conidRegexp)('NondecreasingIndentation')
          PsiElement(HaskellTokenType.`)('`')
          PsiElement(HaskellTokenType.varidRegexp)('elem')
          PsiElement(HaskellTokenType.`)('`')
          PsiElement(HaskellTokenType.varidRegexp)('exts')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('flagDo')
        PsiComment(HaskellTokenType.haddock)('-- | Selects ASCII binary digits, i.e. @\'0\'@..@\'1\'@.\n')
        PsiElement(HaskellTokenType.varidRegexp)('isBinDigit')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Char')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('Bool')
        PsiElement(HaskellTokenType.varidRegexp)('isBinDigit')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.Varsym)('>=')
        PsiElement(HaskellTokenType.chartoken)(''0'')
        PsiElement(HaskellTokenType.Varsym)('&&')
        PsiElement(HaskellTokenType.varidRegexp)('c')
        PsiElement(HaskellTokenType.Varsym)('<=')
        PsiElement(HaskellTokenType.chartoken)(''1'')
        PsiComment(HaskellTokenType.comment)('------------------------------------------------------------------\n')
        PsiComment(HaskellTokenType.comment)('-- "Pretty" printing for tokens\n')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('showToken')
        PsiElement(HaskellTokenType.::)('::')
        PsiElement(HaskellTokenType.conidRegexp)('Token')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.conidRegexp)('String')
        PsiElement(HaskellTokenType.varidRegexp)('showToken')
        PsiElement(HaskellTokenType.varidRegexp)('t')
        PsiElement(HaskellTokenType.=)('=')
        PsiElement(HaskellTokenType.case)('case')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('t')
        PsiElement(HaskellTokenType.of)('of')
        PsiElement(HaskellTokenType.conidRegexp)('VarId')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('QVarId')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('q')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('IDupVarId')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)(''?'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('ILinVarId')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''%'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('ConId')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('QConId')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('q')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('DVarId')
        PsiElement(HaskellTokenType.varidRegexp)('ss')
        PsiElement(HaskellTokenType.->)('->')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('intercalate')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('-')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.varidRegexp)('ss')
        PsiElement(HaskellTokenType.conidRegexp)('VarSym')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('ConSym')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('QVarSym')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('q')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('QConSym')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType.varidRegexp)('q')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('q')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.chartoken)(''.'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('IntTok')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('FloatTok')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.conidRegexp)('Character')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''\''')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(''')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('StringTok')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''"'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\"')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('IntTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('WordTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('##')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('FloatTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('DoubleTokHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('##')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('CharacterHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''\''')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(''#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('StringHash')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.()('(')
        PsiElement(DUMMY_BLOCK)
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.,)(',')
          PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.))(')')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.chartoken)(''"'')
        PsiElement(HaskellTokenType.:)(':')
        PsiElement(HaskellTokenType.varidRegexp)('s')
        PsiElement(HaskellTokenType.Varsym)('++')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('\"#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('LeftParen')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('(')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RightParen')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(')')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('LeftHashParen')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('(#')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RightHashParen')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.STRINGTOKEN)('#)')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('SemiColon')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)(';')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('LeftCurly')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('{')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('RightCurly')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('}')
        PsiElement(HaskellTokenType.")('"')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.conidRegexp)('VRightCurly')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.STRINGTOKEN)('virtual }')
        PsiElement(HaskellTokenType.")('"')
        PsiElement(HaskellTokenType.conidRegexp)('LeftSquare')
        PsiElement(HaskellTokenType.->)('->')
        PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.STRINGTOKEN)('[')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('RightSquare')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)(']')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('ParArrayLeftSquare')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('[:')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('ParArrayRightSquare')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)(':]')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('Comma')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)(',')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('Underscore')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.STRINGTOKEN)('_')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('BackQuote')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('`')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('QuoteColon')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('':')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('Dot')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('.')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('DotDot')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('..')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('Colon')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.STRINGTOKEN)(':')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('DoubleColon')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('::')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('Equals')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('=')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('Backslash')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('\\')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('Bar')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('|')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('LeftArrow')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.STRINGTOKEN)('<-')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('RightArrow')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('At')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('@')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('Tilde')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('~')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('DoubleArrow')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('=>')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('Minus')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.STRINGTOKEN)('-')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('Exclamation')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('!')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('Star')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('*')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('LeftArrowTail')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('>-')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('RightArrowTail')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('-<')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('LeftDblArrowTail')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.STRINGTOKEN)('>>-')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('RightDblArrowTail')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('-<<')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('THExpQuote')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('[|')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('THPatQuote')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('[p|')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('THDecQuote')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('[d|')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('THTypQuote')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.STRINGTOKEN)('[t|')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('THCloseQuote')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('|]')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('THIdEscape')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.chartoken)(''$'')
      PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.conidRegexp)('THParenEscape')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('$(')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('THVarQuote')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)(''')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('THTyQuote')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('''')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('THQuasiQuote')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('n')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType.varidRegexp)('q')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('[$')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.varidRegexp)('n')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('|')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.varidRegexp)('q')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)(']')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('RPGuardOpen')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.STRINGTOKEN)('(|')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('RPGuardClose')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('|)')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('RPCAt')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('@:')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('XCodeTagOpen')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('<%')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('XCodeTagClose')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('%>')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('XStdTagOpen')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.STRINGTOKEN)('<')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('XStdTagClose')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('>')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('XCloseTagOpen')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('</')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('XEmptyTagClose')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('/>')
      PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('XPCDATA')
      PsiElement(HaskellTokenType.varidRegexp)('s')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('PCDATA ')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.varidRegexp)('s')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('XRPatOpen')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('<[')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('XRPatClose')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)(']>')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('PragmaEnd')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('#-}')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('RULES')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# RULES')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('INLINE')
      PsiElement(HaskellTokenType.varidRegexp)('b')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# ')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.if)('if')
      PsiElement(HaskellTokenType.varidRegexp)('b')
      PsiElement(HaskellTokenType.then)('then')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('INLINE')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.else)('else')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('NOINLINE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('INLINE_CONLIKE')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# ')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('INLINE CONLIKE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# SPECIALISE')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('SPECIALISE_INLINE')
      PsiElement(HaskellTokenType.varidRegexp)('b')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# SPECIALISE ')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.if)('if')
      PsiElement(HaskellTokenType.varidRegexp)('b')
      PsiElement(HaskellTokenType.then)('then')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('INLINE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.else)('else')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('NOINLINE')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('SOURCE')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# SOURCE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('DEPRECATED')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# DEPRECATED')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('WARNING')
      PsiElement(HaskellTokenType.->)('->')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# WARNING')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('SCC')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# SCC')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('GENERATED')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# GENERATED')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('CORE')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# CORE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('UNPACK')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# UNPACK')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('OPTIONS')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.varidRegexp)('mt')
        PsiElement(HaskellTokenType.,)(',')
        PsiElement(HaskellTokenType._)('_')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# OPTIONS')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.varidRegexp)('maybe')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.()('(')
      PsiElement(DUMMY_BLOCK)
        PsiElement(HaskellTokenType.chartoken)('':'')
        PsiElement(HaskellTokenType.:)(':')
      PsiElement(HaskellTokenType.))(')')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.varidRegexp)('mt')
      PsiElement(HaskellTokenType.Varsym)('++')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)(' ...')
      PsiElement(HaskellTokenType.")('"')
      PsiComment(HaskellTokenType.comment)('--  CFILES  s         -> "{-# CFILES ..."\n')
      PsiComment(HaskellTokenType.comment)('--  INCLUDE s         -> "{-# INCLUDE ..."\n')
      PsiElement(HaskellTokenType.conidRegexp)('LANGUAGE')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# LANGUAGE')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('ANN')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# ANN')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('MINIMAL')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# MINIMAL')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('NO_OVERLAP')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# NO_OVERLAP')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('OVERLAP')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# OVERLAP')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('INCOHERENT')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('{-# INCOHERENT')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_As')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('as')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_By')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('by')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Case')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('case')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_Class')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('class')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Data')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('data')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Default')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('default')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Deriving')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('deriving')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Do')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('do')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_MDo')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('mdo')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Else')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('else')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Family')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('family')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Forall')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('forall')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Group')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('group')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_Hiding')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('hiding')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_If')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('if')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Import')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('import')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_In')
      PsiElement(HaskellTokenType.->)('->')
  PsiElement(DUMMY_BLOCK)
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('in')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Infix')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('infix')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_InfixL')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('infixl')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_InfixR')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('infixr')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Instance')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('instance')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Let')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('let')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Module')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('module')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_NewType')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('newtype')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Of')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('of')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Proc')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('proc')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Rec')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('rec')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Then')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('then')
      PsiElement(HaskellTokenType.")('"')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.conidRegexp)('KW_Type')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('type')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Using')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('using')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Where')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('where')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Qualified')
      PsiElement(HaskellTokenType.->)('->')
    PsiElement(DUMMY_BLOCK)
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('qualified')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.conidRegexp)('KW_Foreign')
      PsiElement(HaskellTokenType.->)('->')
      PsiElement(HaskellTokenType.")('"')
      PsiElement(HaskellTokenType.STRINGTOKEN)('foreign')
      PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.conidRegexp)('KW_Export')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('export')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_Safe')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('safe')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_Unsafe')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('unsafe')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_Threadsafe')
    PsiElement(HaskellTokenType.->)('->')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('threadsafe')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_Interruptible')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('interruptible')
    PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.conidRegexp)('KW_StdCall')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('stdcall')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_CCall')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('ccall')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('XChildTagOpen')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('<%>')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_CPlusPlus')
    PsiElement(HaskellTokenType.->)('->')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('cplusplus')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_DotNet')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('dotnet')
    PsiElement(HaskellTokenType.")('"')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.conidRegexp)('KW_Jvm')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('jvm')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_Js')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('js')
  PsiElement(DUMMY_BLOCK)
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('KW_CApi')
    PsiElement(HaskellTokenType.->)('->')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.STRINGTOKEN)('capi')
    PsiElement(HaskellTokenType.")('"')
    PsiElement(HaskellTokenType.conidRegexp)('EOF')
    PsiElement(HaskellTokenType.->)('->')
  PsiElement(HaskellTokenType.")('"')
  PsiElement(HaskellTokenType.STRINGTOKEN)('EOF')
  PsiElement(HaskellTokenType.")('"')