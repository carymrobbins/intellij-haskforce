Haskell File
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Import00003')
    PsiElement(HaskellTokenType.where)('where')
  PsiComment(HaskellTokenType.CPPIF)('#if defined(__GLASGOW_HASKELL__) && __GLASGOW_HASKELL__ >= 708')
  BODY
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Data')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Typeable')
      PsiElement(HaskellTokenType.()('(')
      IMPORTT
        TYCON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Typeable')
      PsiElement(HaskellTokenType.))(')')
    PsiComment(HaskellTokenType.#else)('#else')
    IMPDECL
      PsiElement(HaskellTokenType.import)('import')
      QCONID
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Data')
        PsiElement(HaskellTokenType..)('.')
        CONID
          PsiElement(HaskellTokenType.conidRegexp)('Typeable')
      PsiElement(HaskellTokenType.()('(')
      IMPORTT
        TYCON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Typeable')
      PsiElement(HaskellTokenType.,)(',')
      IMPORTT
        TYCON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Typeable1')
      PsiElement(HaskellTokenType.,)(',')
      IMPORTT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('mkTyCon3')
      PsiElement(HaskellTokenType.,)(',')
      IMPORTT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('mkTyConApp')
      PsiElement(HaskellTokenType.,)(',')
      IMPORTT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('typeOf')
      PsiElement(HaskellTokenType.))(')')
    PsiComment(HaskellTokenType.#endif)('#endif')