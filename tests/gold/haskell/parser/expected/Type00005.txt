Haskell File
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('DataKinds,')
    PsiElement(HaskellTokenType.PRAGMA)('TypeFamilies')
    PsiElement(HaskellTokenType.#-})('#-}')
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Main')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      PsiElement(HaskellTokenType.family)('family')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('F')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.where)('where')
      FUNORPATDECL
        PAT
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('F')
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('Int')
        RHS
          PsiElement(HaskellTokenType.=)('=')
          EXP
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Bool')
      FUNORPATDECL
        PAT
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('F')
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('Bool')
        RHS
          PsiElement(HaskellTokenType.=)('=')
          EXP
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Char')
      FUNORPATDECL
        PAT
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('F')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('a')
        RHS
          PsiElement(HaskellTokenType.=)('=')
          EXP
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Bool')
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      PsiElement(HaskellTokenType.family)('family')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('And')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('a')
          PsiElement(HaskellTokenType.::)('::')
          KIND
            BKIND
              AKIND
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Bool')
          PsiElement(HaskellTokenType.))(')')
        ATYPE
          PsiElement(HaskellTokenType.()('(')
          CTYPE
            TYPEE
              ATYPE
                TYVAR
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('b')
          PsiElement(HaskellTokenType.::)('::')
          KIND
            BKIND
              AKIND
                QTYCON
                  TYCON
                    CONID
                      PsiElement(HaskellTokenType.conidRegexp)('Bool')
          PsiElement(HaskellTokenType.))(')')
      PsiElement(HaskellTokenType.::)('::')
      KIND
        BKIND
          AKIND
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Bool')
      PsiElement(HaskellTokenType.where)('where')
      FUNORPATDECL
        PAT
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('And')
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('False')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('c')
        RHS
          PsiElement(HaskellTokenType.=)('=')
          EXP
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('False')
      FUNORPATDECL
        PAT
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('And')
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('True')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('d')
        RHS
          PsiElement(HaskellTokenType.=)('=')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('d')
      FUNORPATDECL
        PAT
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('And')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('e')
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('False')
        RHS
          PsiElement(HaskellTokenType.=)('=')
          EXP
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('False')
      FUNORPATDECL
        PAT
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('And')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('f')
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('True')
        RHS
          PsiElement(HaskellTokenType.=)('=')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('f')
      FUNORPATDECL
        PAT
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('And')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('g')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('g')
        RHS
          PsiElement(HaskellTokenType.=)('=')
          EXP
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('g')
    TYPEDECL
      PsiElement(HaskellTokenType.type)('type')
      PsiElement(HaskellTokenType.family)('family')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('G')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.where)('where')
      FUNORPATDECL
        PAT
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('G')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('a')
        RHS
          PsiElement(HaskellTokenType.=)('=')
          EXP
            QCON
              QCONID
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('()')
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('main')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            OQTYCON
              QTYCON
                TYCON
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('IO')
          ATYPE
            PsiElement(HaskellTokenType.()('(')
            CTYPE
              TYPEE
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('G')
                ATYPE
                  OQTYCON
                    QTYCON
                      TYCON
                        CONID
                          PsiElement(HaskellTokenType.conidRegexp)('()')
            PsiElement(HaskellTokenType.))(')')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('main')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('return')
          QCON
            QCONID
              CONID
                PsiElement(HaskellTokenType.conidRegexp)('()')