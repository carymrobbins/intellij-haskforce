Haskell File
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('TupleSections')
    PsiElement(HaskellTokenType.#-})('#-}')
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Fun00008')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('f')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          LETEXP
            PsiElement(HaskellTokenType.let)('let')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('z')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  PsiElement(HaskellTokenType.if)('if')
                  EXP
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('x')
                  PsiElement(HaskellTokenType.then)('then')
                  EXP
                    PsiElement(HaskellTokenType.()('(')
                    PsiElement(HaskellTokenType.integertoken)('3')
                    QOP
                      QVAROP
                        QVARSYM
                          VARSYM
                            PsiElement(HaskellTokenType.^)('^')
                    PsiElement(HaskellTokenType.))(')')
                  PsiElement(HaskellTokenType.else)('else')
                  EXP
                    PsiElement(HaskellTokenType.()('(')
                    QOP
                      QVAROP
                        QVARSYM
                          VARSYM
                            PsiElement(HaskellTokenType.^)('^')
                    PsiElement(HaskellTokenType.integertoken)('8')
                    PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.in)('in')
            EXP
              PsiElement(HaskellTokenType.-)('-')
              PsiElement(HaskellTokenType.integertoken)('1')
    FUNORPATDECL
      PAT
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('main2')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.do)('do')
          STMTS
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('h')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('ask')
            EXP
              LETEXP
                PsiElement(HaskellTokenType.let)('let')
                FUNORPATDECL
                  PAT
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('m')
                  RHS
                    PsiElement(HaskellTokenType.=)('=')
                    EXP
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('f')
                      QVAR
                        QVARID
                          VARID
                            PsiElement(HaskellTokenType.varidRegexp)('h')
            EXP
              PsiElement(HaskellTokenType.integertoken)('13')
            PsiComment(HaskellTokenType.comment)('--            (,,3) FIXME: Add support for tuple sections.\n')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('return')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('m')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('g')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('xs')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('++')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('ys')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('++')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('zs')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('++')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('zs'')
        PsiElement(HaskellTokenType.where)('where')
        FUNORPATDECL
          PAT
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('xs')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              LISTLIKE
                PsiElement(HaskellTokenType.[)('[')
                EXP
                  PsiElement(HaskellTokenType.integertoken)('1')
                PsiElement(HaskellTokenType...)('..')
                PsiElement(HaskellTokenType.])(']')
        FUNORPATDECL
          PAT
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('ys')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              LISTLIKE
                PsiElement(HaskellTokenType.[)('[')
                EXP
                  PsiElement(HaskellTokenType.integertoken)('1')
                PsiElement(HaskellTokenType...)('..')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('x')
                PsiElement(HaskellTokenType.])(']')
        FUNORPATDECL
          PAT
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('zs')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              LISTLIKE
                PsiElement(HaskellTokenType.[)('[')
                EXP
                  PsiElement(HaskellTokenType.integertoken)('1')
                PsiElement(HaskellTokenType.,)(',')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('x')
                PsiElement(HaskellTokenType...)('..')
                PsiElement(HaskellTokenType.])(']')
        FUNORPATDECL
          PAT
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('zs'')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              LISTLIKE
                PsiElement(HaskellTokenType.[)('[')
                EXP
                  PsiElement(HaskellTokenType.integertoken)('1')
                PsiElement(HaskellTokenType.,)(',')
                EXP
                  QVAR
                    QVARID
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('x')
                PsiElement(HaskellTokenType...)('..')
                EXP
                  PsiElement(HaskellTokenType.()('(')
                  EXP
                    PsiElement(HaskellTokenType.integertoken)('30')
                    QOP
                      QVAROP
                        QVARSYM
                          VARSYM
                            PsiElement(HaskellTokenType.*)('*')
                    QVAR
                      QVARID
                        VARID
                          PsiElement(HaskellTokenType.varidRegexp)('x')
                  PsiElement(HaskellTokenType.))(')')
                PsiElement(HaskellTokenType.])(']')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('h')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('xs')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          LISTLIKE
            PsiElement(HaskellTokenType.[)('[')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('y')
            PsiElement(HaskellTokenType.|)('|')
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Just')
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('y')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('xs')
            PsiElement(HaskellTokenType.])(']')
          QOP
            QVAROP
              QVARSYM
                VARSYM
                  PsiElement(HaskellTokenType.Varsym)('++')
          LISTLIKE
            PsiElement(HaskellTokenType.[)('[')
            EXP
              PsiElement(HaskellTokenType.()('(')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('y')
              PsiElement(HaskellTokenType.,)(',')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('z')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.|)('|')
            PAT
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('Just')
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('y')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('xs')
            PsiElement(HaskellTokenType.|)('|')
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('z')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('xs')
            PsiElement(HaskellTokenType.])(']')