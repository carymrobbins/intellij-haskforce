HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Pragma00005')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Test')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Test')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('!')
HaskellTokenType.conidRegexp ('Int')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Test')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Test2')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n  ')
HaskellTokenType.conidRegexp ('Test')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' UNPACK ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('!')
HaskellTokenType.conidRegexp ('Int')
WHITE_SPACE (' ')
HaskellTokenType.-> ('->')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Test2')