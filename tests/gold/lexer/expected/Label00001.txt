HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE DeriveGeneric ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.{-# ('{-#')
HaskellTokenType.PRAGMA (' LANGUAGE OverloadedLabels ')
HaskellTokenType.#-} ('#-}')
WHITE_SPACE ('\n')
HaskellTokenType.module ('module')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Label00001')
WHITE_SPACE (' ')
HaskellTokenType.where ('where')
WHITE_SPACE ('\n\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Control.Lens')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.( ('(')
HaskellTokenType.Varsym ('^.')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE ('\n')
HaskellTokenType.import ('import')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Data.Generics.Labels')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('bar')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bar')
WHITE_SPACE (' ')
HaskellTokenType.} ('}')
WHITE_SPACE (' ')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Generic')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.data ('data')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bar')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Bar')
WHITE_SPACE (' ')
HaskellTokenType.{ ('{')
WHITE_SPACE (' ')
HaskellTokenType.varidRegexp ('baz')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE (' ')
HaskellTokenType.} ('}')
WHITE_SPACE (' ')
HaskellTokenType.deriving ('deriving')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Generic')
HaskellTokenType.) (')')
WHITE_SPACE ('\n\n')
HaskellTokenType.varidRegexp ('example')
WHITE_SPACE (' ')
HaskellTokenType.:: ('::')
WHITE_SPACE (' ')
HaskellTokenType.conidRegexp ('Char')
WHITE_SPACE ('\n')
HaskellTokenType.varidRegexp ('example')
WHITE_SPACE (' ')
HaskellTokenType.= ('=')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Foo')
WHITE_SPACE (' ')
HaskellTokenType.( ('(')
HaskellTokenType.conidRegexp ('Bar')
WHITE_SPACE (' ')
HaskellTokenType.chartoken (''a'')
HaskellTokenType.) (')')
HaskellTokenType.) (')')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('^.')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('#')
HaskellTokenType.varidRegexp ('bar')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('.')
WHITE_SPACE (' ')
HaskellTokenType.Varsym ('#')
HaskellTokenType.varidRegexp ('baz')