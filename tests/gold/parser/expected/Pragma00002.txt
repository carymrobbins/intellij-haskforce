Haskell File
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('Pragma00002')
    PsiElement(HaskellTokenType.where)('where')
  BODY
    DATADECL
      PsiElement(HaskellTokenType.data)('data')
      TYPEE
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('Vector')
        ATYPE
          TYVAR
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('a')
      PsiElement(HaskellTokenType.=)('=')
      CONSTR
        CON
          CONID
            PsiElement(HaskellTokenType.conidRegexp)('Pull')
        ATYPE
          OQTYCON
            QTYCON
              TYCON
                CONID
                  PsiElement(HaskellTokenType.conidRegexp)('DIM1')
        ATYPE
          PPRAGMA
            PsiElement(HaskellTokenType.{-#)('{-#')
            PsiElement(HaskellTokenType.PRAGMA)('UNPACK')
            PsiElement(HaskellTokenType.#-})('#-}')
          PsiElement(HaskellTokenType.!)('!')
          ATYPE
            TYVAR
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('a')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('f')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          PsiElement(HaskellTokenType.()('(')
          EXP
            PPRAGMA
              PsiElement(HaskellTokenType.{-#)('{-#')
              PsiElement(HaskellTokenType.PRAGMA)('CORE')
              PsiElement(HaskellTokenType.PRAGMA)('"foo"')
              PsiElement(HaskellTokenType.#-})('#-}')
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('show')
          PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.()('(')
          EXP
            PPRAGMA
              PsiElement(HaskellTokenType.{-#)('{-#')
              PsiElement(HaskellTokenType.PRAGMA)('CORE')
              PsiElement(HaskellTokenType.PRAGMA)('"bar"')
              PsiElement(HaskellTokenType.#-})('#-}')
            QVAR
              QVARID
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
          PsiElement(HaskellTokenType.))(')')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('g')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('x')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          LETEXP
            PsiElement(HaskellTokenType.let)('let')
            FUNORPATDECL
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('xs')
              RHS
                PsiElement(HaskellTokenType.=)('=')
                EXP
                  PPRAGMA
                    PsiElement(HaskellTokenType.{-#)('{-#')
                    PsiElement(HaskellTokenType.PRAGMA)('SCC')
                    PsiElement(HaskellTokenType.PRAGMA)('"X"')
                    PsiElement(HaskellTokenType.#-})('#-}')
                  PsiElement(HaskellTokenType.[)('[')
                  EXP
                    PsiElement(HaskellTokenType.integertoken)('1')
                  PsiElement(HaskellTokenType...)('..')
                  EXP
                    PsiElement(HaskellTokenType.integertoken)('1000000')
                  PsiElement(HaskellTokenType.])(']')
            PsiElement(HaskellTokenType.in)('in')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')