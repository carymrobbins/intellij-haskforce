Haskell File
  PPRAGMA
    PsiElement(HaskellTokenType.{-#)('{-#')
    PsiElement(HaskellTokenType.PRAGMA)('LANGUAGE')
    PsiElement(HaskellTokenType.PRAGMA)('MagicHash')
    PsiElement(HaskellTokenType.#-})('#-}')
  MODULEDECL
    PsiElement(HaskellTokenType.module)('module')
    QCONID
      CONID
        PsiElement(HaskellTokenType.conidRegexp)('MagicHash00001')
    PsiElement(HaskellTokenType.where)('where')
  PsiComment(HaskellTokenType.comment)('-- Ripped from Data.List, verify I# constructor is valid.\n')
  BODY
    GENDECL
      VARS
        VARID
          PsiElement(HaskellTokenType.varidRegexp)('findIndices')
      PsiElement(HaskellTokenType.::)('::')
      CTYPE
        TYPEE
          ATYPE
            PsiElement(HaskellTokenType.()('(')
            CTYPE
              TYPEE
                ATYPE
                  TYVAR
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('a')
                PsiElement(HaskellTokenType.->)('->')
                TYPEE
                  ATYPE
                    OQTYCON
                      QTYCON
                        TYCON
                          CONID
                            PsiElement(HaskellTokenType.conidRegexp)('Bool')
            PsiElement(HaskellTokenType.))(')')
          PsiElement(HaskellTokenType.->)('->')
          TYPEE
            ATYPE
              PsiElement(HaskellTokenType.[)('[')
              CTYPE
                TYPEE
                  ATYPE
                    TYVAR
                      VARID
                        PsiElement(HaskellTokenType.varidRegexp)('a')
              PsiElement(HaskellTokenType.])(']')
            PsiElement(HaskellTokenType.->)('->')
            TYPEE
              ATYPE
                PsiElement(HaskellTokenType.[)('[')
                CTYPE
                  TYPEE
                    ATYPE
                      OQTYCON
                        QTYCON
                          TYCON
                            CONID
                              PsiElement(HaskellTokenType.conidRegexp)('Int')
                PsiElement(HaskellTokenType.])(']')
    PsiComment(HaskellTokenType.CPPIFDEF)('#ifdef USE_REPORT_PRELUDE')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('findIndices')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('p')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('xs')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          LISTLIKE
            PsiElement(HaskellTokenType.[)('[')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('i')
            PsiElement(HaskellTokenType.|)('|')
            PAT
              PsiElement(HaskellTokenType.()('(')
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('x')
              PsiElement(HaskellTokenType.,)(',')
              PAT
                VARID
                  PsiElement(HaskellTokenType.varidRegexp)('i')
              PsiElement(HaskellTokenType.))(')')
            PsiElement(HaskellTokenType.<-)('<-')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('zip')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('xs')
              LISTLIKE
                PsiElement(HaskellTokenType.[)('[')
                EXP
                  PsiElement(HaskellTokenType.integertoken)('0')
                PsiElement(HaskellTokenType...)('..')
                PsiElement(HaskellTokenType.])(']')
            PsiElement(HaskellTokenType.,)(',')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('p')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')
            PsiElement(HaskellTokenType.])(']')
    PsiComment(HaskellTokenType.#else)('#else')
    PsiComment(HaskellTokenType.comment)('-- Efficient definition\n')
    FUNORPATDECL
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('findIndices')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('p')
      VARID
        PsiElement(HaskellTokenType.varidRegexp)('ls')
      RHS
        PsiElement(HaskellTokenType.=)('=')
        EXP
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('loop')
          PsiElement(HaskellTokenType.integertoken)('0#')
          QVAR
            QVARID
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('ls')
        PsiElement(HaskellTokenType.where)('where')
        FUNORPATDECL
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('loop')
          PsiElement(HaskellTokenType._)('_')
          PsiElement(HaskellTokenType.[)('[')
          PsiElement(HaskellTokenType.])(']')
          RHS
            PsiElement(HaskellTokenType.=)('=')
            EXP
              PsiElement(HaskellTokenType.[)('[')
              PsiElement(HaskellTokenType.])(']')
        FUNORPATDECL
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('loop')
          VARID
            PsiElement(HaskellTokenType.varidRegexp)('n')
          PsiElement(HaskellTokenType.()('(')
          PAT
            VARID
              PsiElement(HaskellTokenType.varidRegexp)('x')
            QCONOP
              GCONSYM
                PsiElement(HaskellTokenType.:)(':')
            PAT
              VARID
                PsiElement(HaskellTokenType.varidRegexp)('xs')
          PsiElement(HaskellTokenType.))(')')
          RHS
            PsiElement(HaskellTokenType.|)('|')
            GUARD
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('p')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('x')
            PsiElement(HaskellTokenType.=)('=')
            EXP
              QCON
                QCONID
                  CONID
                    PsiElement(HaskellTokenType.conidRegexp)('I')
                  PsiElement(HaskellTokenType.#)('#')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('n')
              QOP
                QVAROP
                  QVARSYM
                    VARSYM
                      PsiElement(HaskellTokenType.:)(':')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('loop')
              PsiElement(HaskellTokenType.()('(')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('n')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType.Varsym)('+#')
                PsiElement(HaskellTokenType.integertoken)('1#')
              PsiElement(HaskellTokenType.))(')')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('xs')
            PsiElement(HaskellTokenType.|)('|')
            GUARD
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('otherwise')
            PsiElement(HaskellTokenType.=)('=')
            EXP
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('loop')
              PsiElement(HaskellTokenType.()('(')
              EXP
                QVAR
                  QVARID
                    VARID
                      PsiElement(HaskellTokenType.varidRegexp)('n')
                QOP
                  QVAROP
                    QVARSYM
                      VARSYM
                        PsiElement(HaskellTokenType.Varsym)('+#')
                PsiElement(HaskellTokenType.integertoken)('1#')
              PsiElement(HaskellTokenType.))(')')
              QVAR
                QVARID
                  VARID
                    PsiElement(HaskellTokenType.varidRegexp)('xs')
        PsiComment(HaskellTokenType.#endif)('#endif  /* USE_REPORT_PRELUDE */')